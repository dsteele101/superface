{
    "swagger": "2.0",
    "info": {
        "description": "The Amelia REST API allows for client applications to connect to Amelia and hold conversations using simple REST commands and webhookUrls or polling.",
        "version": "5.7.4",
        "title": "Amelia REST API",
        "contact": {
            "name": "Amelia",
            "url": "https://amelia.ai/"
        }
    },
    "host": "us.demo.amelia.com",
    "basePath": "/AmeliaRest",
    "tags": [
        {
            "name": "messages-to-amelia-api",
            "description": "Messages To Amelia Api"
        },
        {
            "name": "supervisor-api",
            "description": "Supervisor Api"
        },
        {
            "name": "training-api",
            "description": "Training Api"
        },
        {
            "name": "integration-user-api",
            "description": "Integration User Api"
        },
        {
            "name": "domain-api",
            "description": "Domain Api"
        },
        {
            "name": "authentication-policy-api",
            "description": "Authentication Policy Api"
        },
        {
            "name": "ontology-api",
            "description": "Ontology Api"
        },
        {
            "name": "role-api",
            "description": "Role Api"
        },
        {
            "name": "conversation-api",
            "description": "Conversation Api"
        },
        {
            "name": "escalation-queue-api",
            "description": "Escalation Queue Api"
        },
        {
            "name": "metrics-api",
            "description": "Metrics Api"
        },
        {
            "name": "user-group-api",
            "description": "User Group Api"
        },
        {
            "name": "one-rpa-instance-api",
            "description": "One Rpa Instance Api"
        },
        {
            "name": "corpus-api",
            "description": "Corpus Api"
        },
        {
            "name": "escalation-team-api",
            "description": "Escalation Team Api"
        },
        {
            "name": "predict-api",
            "description": "Predict Api"
        },
        {
            "name": "virtual-host-api",
            "description": "Virtual Host Api"
        },
        {
            "name": "agent-api",
            "description": "Agent Api"
        },
        {
            "name": "audit-api",
            "description": "Audit Api"
        },
        {
            "name": "license-api",
            "description": "License Api"
        },
        {
            "name": "nps-analytics-api",
            "description": "Nps Analytics Api"
        },
        {
            "name": "messages-from-amelia-api",
            "description": "Messages From Amelia Api"
        },
        {
            "name": "sentient-api",
            "description": "Sentient Api"
        },
        {
            "name": "auth-api",
            "description": "Auth Api"
        },
        {
            "name": "push-notification-api",
            "description": "Push Notification Api"
        },
        {
            "name": "tabular-data-api",
            "description": "Tabular Data Api"
        },
        {
            "name": "intents-api",
            "description": "Intents Api"
        },
        {
            "name": "one-store-instance-api",
            "description": "One Store Instance Api"
        },
        {
            "name": "bpn-api",
            "description": "Bpn Api"
        },
        {
            "name": "classifiers-api",
            "description": "Classifiers Api"
        },
        {
            "name": "content-management-api",
            "description": "Content Management Api"
        },
        {
            "name": "subsystems-responder-api",
            "description": "Subsystems Responder Api"
        },
        {
            "name": "authentication-system-api",
            "description": "Authentication System Api"
        },
        {
            "name": "aiops-api",
            "description": "Aiops Api"
        },
        {
            "name": "avatar-api",
            "description": "Avatar Api"
        },
        {
            "name": "integration-api",
            "description": "Integration Api"
        },
        {
            "name": "script-api",
            "description": "Script Api"
        },
        {
            "name": "util-api",
            "description": "Util Api"
        },
        {
            "name": "entities-api",
            "description": "Entities Api"
        },
        {
            "name": "user-api",
            "description": "User Api"
        }
    ],
    "paths": {
        "/api/v1/admin/1rpa/": {
            "get": {
                "tags": [
                    "one-rpa-instance-api"
                ],
                "summary": "Get 1RPA Instances",
                "description": "Obtains the list of 1RPA Instances for display, optionally filtered by name",
                "operationId": "getOneRpaInstancesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Name to search for in the 1RPA instance",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of 1RPA instances",
                        "responseSchema": {
                            "$ref": "#/definitions/OneRpaSearchResults",
                            "originalRef": "OneRpaSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/OneRpaSearchResults",
                            "originalRef": "OneRpaSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "one-rpa-instance-api"
                ],
                "summary": "Create 1RPA Instance",
                "description": "Create a new 1RPA Instance",
                "operationId": "createOneRpaInstanceUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "oneDeskInstance",
                        "description": "The oneDeskInstance to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OneRpaInstanceModel",
                            "originalRef": "OneRpaInstanceModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created 1RPA Instance",
                        "responseSchema": {
                            "$ref": "#/definitions/OneRpaInstanceModel",
                            "originalRef": "OneRpaInstanceModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OneRpaInstanceModel",
                            "originalRef": "OneRpaInstanceModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/1rpa/{id}": {
            "get": {
                "tags": [
                    "one-rpa-instance-api"
                ],
                "summary": "Get 1RPA Instance",
                "description": "Gets a 1RPA instance by its id",
                "operationId": "getOneRpaInstanceUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the 1RPA Instance in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single 1RPA Instance matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/OneRpaInstanceModel",
                            "originalRef": "OneRpaInstanceModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OneRpaInstanceModel",
                            "originalRef": "OneRpaInstanceModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "one-rpa-instance-api"
                ],
                "summary": "Update 1RPA Instance",
                "description": "Updates a 1RPA Instance",
                "operationId": "updateOneRpaInstanceUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the 1RPA Instance in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "oneDeskInstance",
                        "description": "The 1RPA Instance to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OneRpaInstanceModel",
                            "originalRef": "OneRpaInstanceModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated 1RPA Instance",
                        "responseSchema": {
                            "$ref": "#/definitions/OneRpaInstanceModel",
                            "originalRef": "OneRpaInstanceModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OneRpaInstanceModel",
                            "originalRef": "OneRpaInstanceModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "one-rpa-instance-api"
                ],
                "summary": "Delete 1RPA Instance",
                "description": "Deletes a 1RPA Instance",
                "operationId": "deleteOneRpaInstanceUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the 1RPA Instance in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/1store/": {
            "get": {
                "tags": [
                    "one-store-instance-api"
                ],
                "summary": "Get 1Store Instances",
                "description": "Obtains the list of 1Store Instances for display, optionally filtered by name",
                "operationId": "getOneStoreInstancesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Name to search for in the 1Store instance",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "apiKey",
                        "in": "query",
                        "description": "Api Key to use in search for 1Store instance",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of 1Store instances",
                        "responseSchema": {
                            "$ref": "#/definitions/OneStoreSearchResults",
                            "originalRef": "OneStoreSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/OneStoreSearchResults",
                            "originalRef": "OneStoreSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "one-store-instance-api"
                ],
                "summary": "Create 1Store Instance",
                "description": "Create a new 1Store Instance",
                "operationId": "createOneStoreInstanceUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "oneStoreInstance",
                        "description": "The oneStoreInstance to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OneStoreInstanceModel",
                            "originalRef": "OneStoreInstanceModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created 1Store Instance",
                        "responseSchema": {
                            "$ref": "#/definitions/OneStoreInstanceModel",
                            "originalRef": "OneStoreInstanceModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OneStoreInstanceModel",
                            "originalRef": "OneStoreInstanceModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/1store/{id}": {
            "get": {
                "tags": [
                    "one-store-instance-api"
                ],
                "summary": "Get 1Store Instance",
                "description": "Gets a 1Store instance by its id",
                "operationId": "getOneStoreInstanceUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the 1STore in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single 1Store Instance matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/OneStoreInstanceModel",
                            "originalRef": "OneStoreInstanceModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OneStoreInstanceModel",
                            "originalRef": "OneStoreInstanceModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "one-store-instance-api"
                ],
                "summary": "Update 1Store Instance",
                "description": "Updates a 1Store Instance",
                "operationId": "updateOneStoreInstanceUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the 1Store Instance in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "oneStoreInstance",
                        "description": "The 1Store Instance to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OneStoreInstanceModel",
                            "originalRef": "OneStoreInstanceModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated 1Store Instance",
                        "responseSchema": {
                            "$ref": "#/definitions/OneStoreInstanceModel",
                            "originalRef": "OneStoreInstanceModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OneStoreInstanceModel",
                            "originalRef": "OneStoreInstanceModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "one-store-instance-api"
                ],
                "summary": "Delete 1Store Instance",
                "description": "Deletes a 1Store Instance",
                "operationId": "deleteOneStoreInstanceUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the 1Store Instance in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/audit/": {
            "get": {
                "tags": [
                    "audit-api"
                ],
                "summary": "Get Audit Events",
                "description": "Gets the list of audited events",
                "operationId": "searchAuditEventsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text search, of event name or domain code when the event was audited",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "the start of the search window, in format M/d/y H:m",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "the end of the search window, in format M/d/y H:m",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tz",
                        "in": "query",
                        "description": "the code of the time zone if a time zone offset if required; if omitted, will use from/to as UTC",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful list of audit events list",
                        "responseSchema": {
                            "$ref": "#/definitions/AuditEventSearchResults",
                            "originalRef": "AuditEventSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuditEventSearchResults",
                            "originalRef": "AuditEventSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/audit/eventtypes": {
            "get": {
                "tags": [
                    "audit-api"
                ],
                "summary": "Get Audit Event Types",
                "description": "Gets the list of Audit Event Types in this Amelia instance",
                "operationId": "getAuditEventTypesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Optional filter by event type name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Audit Event matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AuditEventTypeSearchResults",
                            "originalRef": "AuditEventTypeSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuditEventTypeSearchResults",
                            "originalRef": "AuditEventTypeSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/audit/{id}": {
            "get": {
                "tags": [
                    "audit-api"
                ],
                "summary": "Get Audit Event",
                "description": "Gets a single audit event by its id",
                "operationId": "getAuditEventUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the audit event in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Audit Event matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AuditEventModel",
                            "originalRef": "AuditEventModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuditEventModel",
                            "originalRef": "AuditEventModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/avatars/": {
            "get": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Get Avatars",
                "description": "Gets the list of avatars for administrative purposes",
                "operationId": "getAdminAvatarsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name of the avatar",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "The code of the avatar",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in either name or code",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful avatar list",
                        "responseSchema": {
                            "$ref": "#/definitions/AvatarSearchResults",
                            "originalRef": "AvatarSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/AvatarSearchResults",
                            "originalRef": "AvatarSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Create Avatar",
                "description": "Creates a new Avatar",
                "operationId": "createAvatarUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "adminAvatarModel",
                        "description": "The avatar to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AdminAvatarModel",
                            "originalRef": "AdminAvatarModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful avatar list",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminAvatarModel",
                            "originalRef": "AdminAvatarModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminAvatarModel",
                            "originalRef": "AdminAvatarModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/avatars/voices/": {
            "get": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Get Avatar Voices",
                "description": "Gets the list of avatars voices for administrative purposes",
                "operationId": "getAvatarVoicesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search in the voice",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The Amelia language code the voice services",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful avatar voice list",
                        "responseSchema": {
                            "$ref": "#/definitions/AvatarVoiceSearchResults",
                            "originalRef": "AvatarVoiceSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/AvatarVoiceSearchResults",
                            "originalRef": "AvatarVoiceSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Create Avatar Voice",
                "description": "Creates a new Avatar Voice",
                "operationId": "createAvatarVoiceUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "model",
                        "description": "The avatar to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AdminAvatarVoiceModel",
                            "originalRef": "AdminAvatarVoiceModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created avatar voice",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminAvatarVoiceModel",
                            "originalRef": "AdminAvatarVoiceModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminAvatarVoiceModel",
                            "originalRef": "AdminAvatarVoiceModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/avatars/voices/{id}": {
            "get": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Get Admin Avatar Voice",
                "description": "Gets a single avatar voice by its id",
                "operationId": "getAdminAvatarVoiceUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the avatar in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single voice matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminAvatarVoiceModel",
                            "originalRef": "AdminAvatarVoiceModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminAvatarVoiceModel",
                            "originalRef": "AdminAvatarVoiceModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Update Avatar Voice",
                "description": "Updates an Avatar Voice",
                "operationId": "updateAvatarVoiceUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": " the id of the avatar vice to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "model",
                        "description": "The avatar voice to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AdminAvatarVoiceModel",
                            "originalRef": "AdminAvatarVoiceModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated avatar voice",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminAvatarVoiceModel",
                            "originalRef": "AdminAvatarVoiceModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminAvatarVoiceModel",
                            "originalRef": "AdminAvatarVoiceModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Delete Avatar Voice",
                "description": "Deletes an avatar voice",
                "operationId": "deleteAvatarVoiceUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the avatar voice in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/avatars/{id}": {
            "get": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Get Admin Avatar",
                "description": "Gets a single avatar by its id",
                "operationId": "getAdminAvatarUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the avatar in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single AmeliaAvatar matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminAvatarModel",
                            "originalRef": "AdminAvatarModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminAvatarModel",
                            "originalRef": "AdminAvatarModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Update Avatar",
                "description": "Updates a Avatar",
                "operationId": "updateAvatarUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": " the id of the avatar to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "adminAvatarModel",
                        "description": "The avatar to udpate",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AdminAvatarModel",
                            "originalRef": "AdminAvatarModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful avatar list",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminAvatarModel",
                            "originalRef": "AdminAvatarModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminAvatarModel",
                            "originalRef": "AdminAvatarModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Delete Avatar",
                "description": "Deletes an avatar",
                "operationId": "deleteAvatarUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the avatar in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/avatars/{id}/upload": {
            "post": {
                "tags": [
                    "avatar-api"
                ],
                "summary": "Upload Images",
                "description": "Uploads Images to Avatar, putting them in pending state",
                "operationId": "uploadImageUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": " the id of the avatar to upload",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "nameTag",
                        "in": "formData",
                        "description": "nameTag",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "backgroundLight",
                        "in": "formData",
                        "description": "backgroundLight",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "backgroundDark",
                        "in": "formData",
                        "description": "backgroundDark",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A map of image types to primary keys of the pending image to reference",
                        "responseSchema": {
                            "type": "object"
                        },
                        "schema": {
                            "type": "object"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/folders/": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Create Folder",
                "description": "Creates a bpn folder in a domain",
                "operationId": "createFolderUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "bpnTreeNode",
                        "description": "The folder to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/BpnTreeNode",
                            "originalRef": "BpnTreeNode"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create a BpnTreeNode ",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnTreeNode",
                            "originalRef": "BpnTreeNode"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnTreeNode",
                            "originalRef": "BpnTreeNode"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/folders/{folderId}": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Update Folder",
                "description": "Updates a bpn folder in a domain",
                "operationId": "updateFolderUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "folderId",
                        "in": "path",
                        "description": "The primary key of the folder to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "bpnTreeNode",
                        "description": "The folder to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/BpnTreeNode",
                            "originalRef": "BpnTreeNode"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create a BpnTreeNode ",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnTreeNode",
                            "originalRef": "BpnTreeNode"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnTreeNode",
                            "originalRef": "BpnTreeNode"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Delete Folder",
                "description": "Deletes a bpn folder if empty",
                "operationId": "deleteFolderUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "folderId",
                        "in": "path",
                        "description": "The primary key of the folder to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete a BpnTreeNode ",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Create BPN Process",
                "description": "Creates a bpn process",
                "operationId": "createProcessUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "bpnModel",
                        "description": "The process to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create a Bpn Process ",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/domains/{domainId}/name/{bpnName}": {
            "get": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Get BPN Process by domain and name",
                "description": "Gets a specific BPN Process by its domain and name",
                "operationId": "getByByNameAndDomainUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain containing the BPN",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "bpnName",
                        "in": "path",
                        "description": "The name of the bpn in this domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a BpnModel",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/import": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Import New BPN Process",
                "description": "Imports a bpn process from a file",
                "operationId": "importNewProcessUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "domainId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "parentPathId",
                        "in": "query",
                        "description": "parentPathId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Import a Bpn Process ",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/{processId}": {
            "get": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Get BPN Process by id",
                "description": "Gets a specific BPN Process by its id",
                "operationId": "getBpnByIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "The primary key of the BPN model",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a BpnModel",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Delete Bpn Process",
                "description": "Deletes a bpn model in a domain",
                "operationId": "deleteProcessUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "The primary key of the process to delete",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete a Bpn Model ",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/{processId}/deploy": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Deploy BPN Process",
                "description": "Deploys a bpn process",
                "operationId": "deployProcessUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "The primary key of the process to deploy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "bpnModel",
                        "description": "The process to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DeployBpnModelCommand",
                            "originalRef": "DeployBpnModelCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deploy a Bpn Process ",
                        "responseSchema": {
                            "$ref": "#/definitions/DeployModel",
                            "originalRef": "DeployModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/DeployModel",
                            "originalRef": "DeployModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/{processId}/deploy/withdeps": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Deploy BPN Process with dependencies",
                "description": "Immediately deploys a bpn process with dependencies, without any validation or preflight checks.",
                "operationId": "deployProcessWithDependenciesUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "The primary key of the process to deploy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deploy a Bpn Process ",
                        "responseSchema": {
                            "$ref": "#/definitions/DeployModel",
                            "originalRef": "DeployModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/DeployModel",
                            "originalRef": "DeployModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/{processId}/export/{format}": {
            "get": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Export BPN Process by id",
                "description": "Export the BPN document of specific BPN Process by its id",
                "operationId": "exportBpnByIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "The primary key of the BPN model",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "format",
                        "in": "path",
                        "description": "The export format,currently only XML",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export BpnModel contents",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/{processId}/import": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Import into Existing BPN Process",
                "description": "Imports a revision content from a file into an existing BPN",
                "operationId": "importIntoExistingProcessUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "processId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Import a Bpn Process ",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/{processId}/rename": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Rename BPN Process",
                "description": "Renames a bpn process",
                "operationId": "renameProcessUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "The primary key of the process to rename",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "bpnModel",
                        "description": "The process to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RenameBpnModelCommand",
                            "originalRef": "RenameBpnModelCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rename a Bpn Process ",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/{processId}/saverevision": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Save New Revision of BPN Process",
                "description": "Saves a new revision of this process with a BpnModelType and Revision XML",
                "operationId": "saveProcessRevisionUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "The primary key of the process to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "bpnModel",
                        "description": "The process to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdateBpnModelCommand",
                            "originalRef": "UpdateBpnModelCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Save a revision of a Bpn Process ",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/{processId}/undeploy": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Undeploy BPN Process",
                "description": "Undeploys a bpn process",
                "operationId": "undeployProcessUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "The primary key of the process to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Undeploy a Bpn Process ",
                        "responseSchema": {
                            "$ref": "#/definitions/UndeployResponse",
                            "originalRef": "UndeployResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/UndeployResponse",
                            "originalRef": "UndeployResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/UndeployResponse",
                            "originalRef": "UndeployResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/UndeployResponse",
                            "originalRef": "UndeployResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/{processId}/undeploy/withdeps": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Undeploy BPN Process with dependencies",
                "description": "Immediately undeploys a bpn process and its  associated bpn models, presuming the user has rights to those dependencies",
                "operationId": "undeployProcessWithDependenciesUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "The primary key of the process to deploy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deploy a Bpn Process ",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BpnModel",
                                "originalRef": "BpnModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BpnModel",
                                "originalRef": "BpnModel"
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/processes/{processId}/validate": {
            "post": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Validate BPN Process",
                "description": "Validates a bpn process for deployment",
                "operationId": "validateProcessUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "processId",
                        "in": "path",
                        "description": "The primary key of the process to validate",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Validate a Bpn Process ",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnValidationModel",
                            "originalRef": "BpnValidationModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnValidationModel",
                            "originalRef": "BpnValidationModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/bpn/tree/{domainId}/": {
            "get": {
                "tags": [
                    "bpn-api"
                ],
                "summary": "Get Model Tree",
                "description": "Obtains the list of BpnModels in a particular domain as nodes on a tree  for display, optionally filtered by name",
                "operationId": "getTreeModelsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain containing the BPN",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name to filter against",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of BpnModels",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BpnTreeNode",
                                "originalRef": "BpnTreeNode"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BpnTreeNode",
                                "originalRef": "BpnTreeNode"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/content/bucket/{id}": {
            "delete": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Delete Content Bucket",
                "description": "Deletes a Content Bucket",
                "operationId": "deleteContentBucketUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the bucket to delete",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete a Content Bucket ",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/content/buckets": {
            "post": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Create Content Bucket",
                "description": "Create a new content bucket",
                "operationId": "createContentBucketUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "contentBucket",
                        "description": "The content bucket to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ContentBucketModel",
                            "originalRef": "ContentBucketModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created Content Bucket",
                        "responseSchema": {
                            "$ref": "#/definitions/ContentBucketModel",
                            "originalRef": "ContentBucketModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ContentBucketModel",
                            "originalRef": "ContentBucketModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/content/buckets/bydomain/{domainId}": {
            "get": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Get Buckets",
                "description": "Obtains the list of content buckets in a particular domain, optionally filtered by name",
                "operationId": "getContentBucketsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain containing the buckets",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "A search term name to filter against",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of entities",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContentBucketModel",
                                "originalRef": "ContentBucketModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContentBucketModel",
                                "originalRef": "ContentBucketModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/content/buckets/{bucketId}/resources": {
            "post": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Create Content Resource",
                "description": "Create a new content resource",
                "operationId": "createContentResourceUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "bucketId",
                        "in": "path",
                        "description": "The primary key of the bucket in which to create the resource",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "The name of the file to upload, omit to use file real name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created Content Resource metadata",
                        "responseSchema": {
                            "$ref": "#/definitions/ContentResourceMetadata",
                            "originalRef": "ContentResourceMetadata"
                        },
                        "schema": {
                            "$ref": "#/definitions/ContentResourceMetadata",
                            "originalRef": "ContentResourceMetadata"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/content/buckets/{id}": {
            "get": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Get Content Bucket",
                "description": "Gets a Content Bucket by its id",
                "operationId": "getContentBucketUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the bucket in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Content Bucket matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/ContentBucketModel",
                            "originalRef": "ContentBucketModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ContentBucketModel",
                            "originalRef": "ContentBucketModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Update Content Bucket",
                "description": "Update an existing content bucket",
                "operationId": "updateContentBucketUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "the id of the bucket to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "contentBucket",
                        "description": "The content bucket to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ContentBucketModel",
                            "originalRef": "ContentBucketModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Content Bucket",
                        "responseSchema": {
                            "$ref": "#/definitions/ContentBucketModel",
                            "originalRef": "ContentBucketModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ContentBucketModel",
                            "originalRef": "ContentBucketModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/content/buckets/{id}/resources": {
            "get": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Get Content Bucket Resources",
                "description": "Gets content resource metadata within a bucket",
                "operationId": "getContentResourcesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the bucket in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "A search term by which to filter the list",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of content to retrieve",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of content reosource metadata for a bucket",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContentResourceMetadata",
                                "originalRef": "ContentResourceMetadata"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContentResourceMetadata",
                                "originalRef": "ContentResourceMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/content/resources/{id}": {
            "get": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Get Content Resource",
                "description": "Gets Content Resource metadata by its id",
                "operationId": "getContentResourceUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the resource in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single content resource metadata matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/ContentResourceMetadata",
                            "originalRef": "ContentResourceMetadata"
                        },
                        "schema": {
                            "$ref": "#/definitions/ContentResourceMetadata",
                            "originalRef": "ContentResourceMetadata"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Delete Content Resource",
                "description": "Deletes a Content Resource",
                "operationId": "deleteContentResourceUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource to delete",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete a Content Resource ",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/content/resources/{id}/file": {
            "get": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Downlaod Content Resource Content",
                "description": "Gets Content Resource content by its id",
                "operationId": "downloadContentResourceUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the resource in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Content Bucket matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/ContentResourceMetadata",
                            "originalRef": "ContentResourceMetadata"
                        },
                        "schema": {
                            "$ref": "#/definitions/ContentResourceMetadata",
                            "originalRef": "ContentResourceMetadata"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/content/resources/{id}/rename": {
            "post": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Rename Content Resource",
                "description": "Rename an existing content resource",
                "operationId": "renameContentResourceUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "the id of the resource to rename",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "the new filename",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Content Resource metadata",
                        "responseSchema": {
                            "$ref": "#/definitions/ContentResourceMetadata",
                            "originalRef": "ContentResourceMetadata"
                        },
                        "schema": {
                            "$ref": "#/definitions/ContentResourceMetadata",
                            "originalRef": "ContentResourceMetadata"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/content/resources/{id}/upload": {
            "post": {
                "tags": [
                    "content-management-api"
                ],
                "summary": "Upload Content Resource",
                "description": "Replace the content of an existing content resource",
                "operationId": "uploadContentResourceUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "the id of the resource to rename",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Content Resource metadata",
                        "responseSchema": {
                            "$ref": "#/definitions/ContentResourceMetadata",
                            "originalRef": "ContentResourceMetadata"
                        },
                        "schema": {
                            "$ref": "#/definitions/ContentResourceMetadata",
                            "originalRef": "ContentResourceMetadata"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/domains/": {
            "get": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Get Domains",
                "description": "Gets the list of domains for administrative purposes",
                "operationId": "getAdminDomainsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name of the domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "The code of the domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in either name or code",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful domain list",
                        "responseSchema": {
                            "$ref": "#/definitions/DomainSearchResults",
                            "originalRef": "DomainSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/DomainSearchResults",
                            "originalRef": "DomainSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Create Domain",
                "description": "Creates a new Domain",
                "operationId": "createDomainUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "adminDomainModel",
                        "description": "The domain to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateAdminDomainModel",
                            "originalRef": "CreateAdminDomainModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful domain list",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/domains/availablesettings": {
            "get": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Get Available Settings",
                "description": "Gets the list of advanced settings that can be set on a domain",
                "operationId": "getDomainAvailableSettingsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful list of available advanced settings",
                        "responseSchema": {
                            "$ref": "#/definitions/AvailableSettingSearchResults",
                            "originalRef": "AvailableSettingSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/AvailableSettingSearchResults",
                            "originalRef": "AvailableSettingSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/domains/bycode/{code}": {
            "get": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Get Admin Domain By Code",
                "description": "Gets a single domain by its code",
                "operationId": "getAdminDomainByCodeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The unique code of the domain in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single AmeliaDomain matching the supplied code",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/domains/domain-templates": {
            "get": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Get Domains Templates",
                "description": "Gets the available domain templates",
                "operationId": "getDomainTemplatesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful domain list",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/domains/{id}": {
            "get": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Get Admin Domain",
                "description": "Gets a single domain by its id",
                "operationId": "getAdminDomainUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the domain in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single AmeliaDomain matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Update Domain",
                "description": "Updates a Domain",
                "operationId": "updateDomainUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": " the id of the domain to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "adminDomainModel",
                        "description": "The domain to udpate",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdateAdminDomainModel",
                            "originalRef": "UpdateAdminDomainModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful domain list",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/domains/{id}/cleanup/summaries": {
            "post": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Cleanup Conversation Summaries For a Domain",
                "description": "Cleans up the conversation summaries and removes transcripts for the requested Domain",
                "operationId": "requestConversationSummaryCleanupForDomainUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the domain requested for cleanup",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "daysRetained",
                        "in": "query",
                        "description": "The number of days of data to retain in the database after the cleanup is complete",
                        "required": false,
                        "type": "integer",
                        "default": 60,
                        "format": "int32"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful request for cleanup",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/domains/{id}/images/header": {
            "get": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Download Header Image",
                "description": "Downloads the facetime header image for a domain",
                "operationId": "downloadHeaderImageUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the domain requested for cleanup",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The image, if present",
                        "responseSchema": {
                            "$ref": "#/definitions/DownloadResourceResponse",
                            "originalRef": "DownloadResourceResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/DownloadResourceResponse",
                            "originalRef": "DownloadResourceResponse"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "If there is no image for the domain"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Upload Header Image",
                "description": "Uploads an image for the header image as the domain",
                "operationId": "uploadHeaderImageUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the domain requested for cleanup",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "content",
                        "in": "formData",
                        "description": "content",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A json payload with upload success as a boolean",
                        "responseSchema": {
                            "type": "object"
                        },
                        "schema": {
                            "type": "object"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "If there is no image for the domain"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "domain-api"
                ],
                "summary": "Delete Header Image",
                "description": "Deletes the header image from the domain",
                "operationId": "deleteHeaderImageUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the domain requested for cleanup",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A json payload with delete success as a boolean",
                        "responseSchema": {
                            "type": "object"
                        },
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "If there is no image for the domain"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/assets/": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Assets",
                "description": "Gets the list of Integration Flow Assets",
                "operationId": "getIntegrationAssetsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in either name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of the domain to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful asset list",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationAssetSearchResults",
                            "originalRef": "IntegrationAssetSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationAssetSearchResults",
                            "originalRef": "IntegrationAssetSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Create an Integration Asset",
                "description": "Creates a single Integration Asset",
                "operationId": "createIntegrationAssetUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "the name of the file, omit to use the file's name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of the domain to contain this asset",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "content",
                        "in": "formData",
                        "description": "A file to upload",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "confirm",
                        "in": "query",
                        "description": "true to override warninings about replacing content, false otherwise",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Integration Asset matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationAssetListModel",
                            "originalRef": "IntegrationAssetListModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationAssetListModel",
                            "originalRef": "IntegrationAssetListModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/assets/{assetId}": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Asset",
                "description": "Gets a single Integration Asset by its id",
                "operationId": "getIntegrationAssetUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "assetId",
                        "in": "path",
                        "description": "The unique primary key of the Integration Asset in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Integration Asset matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationAssetListModel",
                            "originalRef": "IntegrationAssetListModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationAssetListModel",
                            "originalRef": "IntegrationAssetListModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Update an Integration Asset",
                "description": "Updates a single Integration Asset",
                "operationId": "updateIntegrationAssetUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "assetId",
                        "in": "path",
                        "description": "primary key of the asset to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "the name of the file, omit to use the file's name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of the domain to contain this asset",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "content",
                        "in": "formData",
                        "description": "A file to upload",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "confirm",
                        "in": "query",
                        "description": "true to override warninings about replacing content, false otherwise",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Integration Asset matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationAssetListModel",
                            "originalRef": "IntegrationAssetListModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationAssetListModel",
                            "originalRef": "IntegrationAssetListModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/assets/{assetId}/download": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Downlaod Integration Asset",
                "description": "Downloads the binary content of an Integration Asset by its id",
                "operationId": "downloadIntegrationAssetUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "assetId",
                        "in": "path",
                        "description": "The unique primary key of the Integration Asset in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contents of a single Integration Asset matching the supplied id"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/clusters/": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Clusters (Removed)",
                "description": "Clusters have been removed from Amelia",
                "operationId": "getIntegrationClustersUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the cluster",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "301": {
                        "description": "Clusters have been removed",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            },
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Create Cluster (Removed)",
                "description": "Clusters have been removed from Amelia",
                "operationId": "createIntegrationClusterUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "integrationClusterModel",
                        "description": "The cluster to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IntegrationClusterModel",
                            "originalRef": "IntegrationClusterModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "301": {
                        "description": "Clusters have been removed",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            }
        },
        "/api/v1/admin/integrations/clusters/{clusterId}": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Cluster (Removed)",
                "description": "Clusters have been removed from Amelia",
                "operationId": "getIntegrationClusterUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "The unique primary key of the Integration Cluster in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "301": {
                        "description": "Clusters have been removed",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            },
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Update Cluster (Removed)",
                "description": "Clusters have been removed from Amelia",
                "operationId": "updateIntegrationClusterUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "The primary key of the cluster to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "integrationClusterModel",
                        "description": "The host to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IntegrationClusterModel",
                            "originalRef": "IntegrationClusterModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "301": {
                        "description": "Clusters have been removed",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            }
        },
        "/api/v1/admin/integrations/events/": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Events",
                "description": "Searches Integration Events",
                "operationId": "getIntegrationEventsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "text to search in flow, code, or group",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain to which this event belongs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "the start of the search window, in format M/d/y H:m",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "the end of the search window, in format M/d/y H:m",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tz",
                        "in": "query",
                        "description": "the code of the time zone of the export; if omitted, will use the requestor's time zone",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful property set list",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationPropertySetSearchResults",
                            "originalRef": "IntegrationPropertySetSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationPropertySetSearchResults",
                            "originalRef": "IntegrationPropertySetSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/flows/": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Flows",
                "description": "Gets the list of Integration Flows",
                "operationId": "getIntegrationFlowsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in either name or code",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The current runtime status of the flow",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "FAILED",
                            "RUNNING",
                            "CLOSED",
                            "UNKNOWN"
                        ]
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of the domain to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful flow list",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationFlowSearchResults",
                            "originalRef": "IntegrationFlowSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationFlowSearchResults",
                            "originalRef": "IntegrationFlowSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Create Flow",
                "description": "Creates an Integration Flow with an initial revision",
                "operationId": "createIntegrationFlowUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "integrationFlowModel",
                        "description": "The flow to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IntegrationFlowModel",
                            "originalRef": "IntegrationFlowModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created flow",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationFlowModel",
                            "originalRef": "IntegrationFlowModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationFlowModel",
                            "originalRef": "IntegrationFlowModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/flows/{flowId}": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Flow",
                "description": "Gets a single Integration Flow by its id",
                "operationId": "getIntegrationFlowUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "flowId",
                        "in": "path",
                        "description": "The unique primary key of the Integration Flow in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Integration Flow matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationFlowModel",
                            "originalRef": "IntegrationFlowModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationFlowModel",
                            "originalRef": "IntegrationFlowModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Save new revision of an Integration Flow",
                "description": "Saves a new revision of an Integration Flow",
                "operationId": "saveIntegrationFlowRevisionUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "flowId",
                        "in": "path",
                        "description": "The primary key of the model to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "integrationFlowModel",
                        "description": "The flow revision to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IntegrationFlowModel",
                            "originalRef": "IntegrationFlowModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created flow",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationFlowModel",
                            "originalRef": "IntegrationFlowModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationFlowModel",
                            "originalRef": "IntegrationFlowModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/flows/{flowId}/deploy": {
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Deploy an Integration Flow",
                "description": "Deploys an Integration Flow",
                "operationId": "deployIntegrationFlowUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "flowId",
                        "in": "path",
                        "description": "The primary key of the model to deploy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "deployCommand",
                        "description": "The deployment command",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DeployIntegrationFlowCommand",
                            "originalRef": "DeployIntegrationFlowCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response to the deloyment command",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationCommandResponse",
                            "originalRef": "IntegrationCommandResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationCommandResponse",
                            "originalRef": "IntegrationCommandResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/flows/{flowId}/undeploy": {
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Undeploy an Integration Flow",
                "description": "Undeploys an Integration Flow",
                "operationId": "undeployIntegrationFlowUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "flowId",
                        "in": "path",
                        "description": "The primary key of the model to undeploy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "deployCommand",
                        "description": "The undeployment command",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UndeployIntegrationFlowCommand",
                            "originalRef": "UndeployIntegrationFlowCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response to the undeploymend command",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationCommandResponse",
                            "originalRef": "IntegrationCommandResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationCommandResponse",
                            "originalRef": "IntegrationCommandResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/hosts/": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Hosts",
                "description": "Hosts have been removed from Amelia",
                "operationId": "getIntegrationHostsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the host",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clusterName",
                        "in": "query",
                        "description": "Name of a cluster to which this host belongs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clusterId",
                        "in": "query",
                        "description": "The primary key of a cluster to which this host belongs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "301": {
                        "description": "Hosts have been removed",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            },
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Create Host (Removed)",
                "description": "Hosts as separate entities have been removed from Amelia",
                "operationId": "createIntegrationHostUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "integrationHostModel",
                        "description": "The host to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IntegrationHostModel",
                            "originalRef": "IntegrationHostModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "301": {
                        "description": "Hosts have been removed",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            }
        },
        "/api/v1/admin/integrations/hosts/{hostId}": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Host (Removed)",
                "description": "Hosts as separate entities have been removed from Amelia",
                "operationId": "getIntegrationHostUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "hostId",
                        "in": "path",
                        "description": "The unique primary key of the Integration Host in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "301": {
                        "description": "Hosts have been removed",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            },
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Update Host",
                "description": "Updates an Integration Host",
                "operationId": "updateIntegrationHostUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "hostId",
                        "in": "path",
                        "description": "The primary key of the host to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "integrationHostModel",
                        "description": "The host to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IntegrationHostModel",
                            "originalRef": "IntegrationHostModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "301": {
                        "description": "Hosts have been removed",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            }
        },
        "/api/v1/admin/integrations/properties/": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Property Sets",
                "description": "Gets the list of Integration Property Sets",
                "operationId": "getIntegrationPropertySetsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the property set",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain to which this property set belongs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful property set list",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationPropertySetSearchResults",
                            "originalRef": "IntegrationPropertySetSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationPropertySetSearchResults",
                            "originalRef": "IntegrationPropertySetSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Create Property Set",
                "description": "Creates an Integration Property Set",
                "operationId": "createIntegrationPropertySetUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "integrationPropertySetModel",
                        "description": "The cluster to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IntegrationPropertySetModel",
                            "originalRef": "IntegrationPropertySetModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created property set",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationPropertySetModel",
                            "originalRef": "IntegrationPropertySetModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationPropertySetModel",
                            "originalRef": "IntegrationPropertySetModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/properties/{propertySetId}": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Property Set",
                "description": "Gets a single Integration Property Set by its id",
                "operationId": "getIntegrationPropertySetUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "propertySetId",
                        "in": "path",
                        "description": "The unique primary key of the Integration Property Set in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Integration Property Set matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationPropertySetModel",
                            "originalRef": "IntegrationPropertySetModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationPropertySetModel",
                            "originalRef": "IntegrationPropertySetModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Update Property Set",
                "description": "Creates an Integration Property Set",
                "operationId": "updateIntegrationPropertySetUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "propertySetId",
                        "in": "path",
                        "description": "The unique primary key of the Integration Property Set in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "integrationPropertySetModel",
                        "description": "The cluster to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IntegrationPropertySetModel",
                            "originalRef": "IntegrationPropertySetModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated property set",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationPropertySetModel",
                            "originalRef": "IntegrationPropertySetModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationPropertySetModel",
                            "originalRef": "IntegrationPropertySetModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/integrations/requests/": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Requests (Removed)",
                "description": "Requests have been removed from Amelia.  See Events",
                "operationId": "getIntegrationRequestsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in either name, code, or host",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "301": {
                        "description": "Requests have been removed.  See Events",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            }
        },
        "/api/v1/admin/integrations/requests/{requestId}": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Request (Removed)",
                "description": "Requests have been removed from Amelia. See Events",
                "operationId": "getIntegrationRequestUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "requestId",
                        "in": "path",
                        "description": "The unique primary key of the Integration Request in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "301": {
                        "description": "Requests have been removed.  See Events",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            }
        },
        "/api/v1/admin/integrations/status/": {
            "get": {
                "tags": [
                    "integration-api"
                ],
                "summary": "Get Integration Status (Removed)",
                "description": "Status has been removed as a separate entity.  See events",
                "operationId": "getIntegrationStatusUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Text to search for the code",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The current runtime status to search",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "FAILED",
                            "RUNNING",
                            "CLOSED",
                            "UNKNOWN"
                        ]
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of the domain to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "301": {
                        "description": "Status has been removed.  See events",
                        "responseSchema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/RemovedApiResponse",
                            "originalRef": "RemovedApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": true
            }
        },
        "/api/v1/admin/metrics/agents": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get all agent metrics",
                "description": "Gets all agent metrics for a given time range",
                "operationId": "getAllAgentMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for agents",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/agents/bydomain/{domainId}": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get agent metrics",
                "description": "Gets a single domain's agent metrics for a given time range",
                "operationId": "getAgentMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for agents",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/agents/bydomain/{domainId}/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export agent metrics",
                "description": "Export a single domain's agent metrics for a given time range",
                "operationId": "exportAgentMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for agents",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/agents/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export all agent metrics",
                "description": "Exports all agent metrics for a given time range",
                "operationId": "exportAllAgentMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for agents",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/bpnfolders": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get all bpn folder metrics",
                "description": "Gets all bpn folder metrics for a given time range",
                "operationId": "getAllBpnFolderMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for bpn folders",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/bpnfolders/bydomain/{domainId}": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get bpn folder metrics",
                "description": "Gets a single domain's bpn folder metrics for a given time range",
                "operationId": "getBpnFolderMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for domains",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/bpnfolders/bydomain/{domainId}/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export bpn folder metrics",
                "description": "Exports a single domain's bpn folder metrics for a given time range",
                "operationId": "exportBpnFolderMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for domains",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/bpnfolders/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export all bpn folder metrics",
                "description": "Exports all bpn folder metrics for a given time range",
                "operationId": "exportAllBpnFolderMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for bpn folders",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/bpnmodels": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get all bpn model metrics",
                "description": "Gets all bpn model metrics for a given time range",
                "operationId": "getAllBpnModelMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for bpn models",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/bpnmodels/bydomain/{domainId}": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get bpn model metrics",
                "description": "Gets a single domain's bpn model metrics for a given time range",
                "operationId": "getBpnModelMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for bpn models",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/bpnmodels/bydomain/{domainId}/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export bpn model metrics",
                "description": "Exports a single domain's bpn model metrics for a given time range",
                "operationId": "exportBpnModelMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for bpn models",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/bpnmodels/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export all bpn model metrics",
                "description": "Exports all bpn model metrics for a given time range",
                "operationId": "exportAllBpnModelMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for bpn models",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/channels": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get all initial channel metrics",
                "description": "Gets all initial channel metrics for a given time range",
                "operationId": "getAllInitialChannelMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for initial channel",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/channels/bydomain/{domainId}": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get Initial Channel metrics",
                "description": "Gets a single domain's initial channel metrics for a given time range",
                "operationId": "getInitialChannelMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for agents",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/channels/bydomain/{domainId}/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export Initial Channel metrics",
                "description": "Export a single domain's Initial Channel metrics for a given time range",
                "operationId": "exportInitialChannelMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for Initial Channel",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/channels/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export all initial channel metrics",
                "description": "Exports all initial channel metrics for a given time range",
                "operationId": "exportAllInitialChannelMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for initial channel",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/domains": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get all domain metrics",
                "description": "Gets all domain metrics for a given time range",
                "operationId": "getAllDomainMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for domains",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/domains/conversations/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export Conversations by Domains",
                "description": "Exports csv or json file containing metrics of conversations",
                "operationId": "exportConversationsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "domainIds",
                        "in": "query",
                        "description": "a list of primary keys of domains to export",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "the start of the export window, in format M/d/yyyy H:m",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "the end of the export window, in format M/d/yyyy H:m",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tz",
                        "in": "query",
                        "description": "the code of the time zone of the export; if omitted, will use the requestor's time zone",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeTranscripts",
                        "in": "query",
                        "description": "true to include transcripts in the export",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "includeEscalationLogs",
                        "in": "query",
                        "description": "true to include escalation logs in the export",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "includeContexts",
                        "in": "query",
                        "description": "true to include context information in the export",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "useSummaryCreatedDates",
                        "in": "query",
                        "description": "true to calculate times from summary creation dates instead of conversation dates",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "useUserLanguage",
                        "in": "query",
                        "description": "true to use user languages when applicable in transcripts, valid only if includeTranscripts is true",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "format, csv or json only",
                        "required": false,
                        "type": "string",
                        "default": "csv",
                        "enum": [
                            "csv",
                            "json"
                        ]
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "maximum time to wait on amelia, in seconds",
                        "required": false,
                        "type": "integer",
                        "default": 300,
                        "format": "int32"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A csv or json response based on requested format"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/domains/conversations/export/async/generate": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Async Conversation Export Generate",
                "description": "Exports csv or json file containing metrics of conversations",
                "operationId": "generateConversationExportUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "domainIds",
                        "in": "query",
                        "description": "a list of primary keys of domains to export",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "the start of the export window, in format M/d/yyyy H:m",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "the end of the export window, in format M/d/yyyy H:m",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tz",
                        "in": "query",
                        "description": "the code of the time zone of the export; if omitted, will use the requestor's time zone",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeTranscripts",
                        "in": "query",
                        "description": "true to include transcripts in the export",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "includeEscalationLogs",
                        "in": "query",
                        "description": "true to include escalation logs in the export",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "includeContexts",
                        "in": "query",
                        "description": "true to include context information in the export",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "useSummaryCreatedDates",
                        "in": "query",
                        "description": "true to calculate times from summary creation dates instead of conversation dates",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "useUserLanguage",
                        "in": "query",
                        "description": "true to use user languages when applicable in transcripts, valid only if includeTranscripts is true",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "format, csv or json only",
                        "required": false,
                        "type": "string",
                        "default": "csv",
                        "enum": [
                            "csv",
                            "json"
                        ]
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An object with success true/false, an error if false, and an count of exported conversations if true.  If the count is zero, an \"id\" will also be present to poll and download when ready",
                        "responseSchema": {
                            "$ref": "#/definitions/AsyncConversationExportGenerate",
                            "originalRef": "AsyncConversationExportGenerate"
                        },
                        "schema": {
                            "$ref": "#/definitions/AsyncConversationExportGenerate",
                            "originalRef": "AsyncConversationExportGenerate"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/domains/conversations/export/async/{id}/download": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Async Conversation Export Download",
                "description": "Download a COMPLETE status conversation export and remove from the server",
                "operationId": "downloadConversationExportUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "the id of the report being generated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the report in the format originally requested",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/domains/conversations/export/async/{id}/status": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Async Conversation Export Status",
                "description": "Poll the status of a conversation export, will be COMPLETE when done",
                "operationId": "pollConversationExportStatusUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "the id of the report being generated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An object that contains the id of the report and a status, which will be COMPLETE when the reportis ready for download",
                        "responseSchema": {
                            "type": "object"
                        },
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/domains/conversations/exportCheck": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Check Conversation Export Validity",
                "description": "Check if a set of parameters will produce a full, valid conversation export",
                "operationId": "checkExportConversationsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainIds",
                        "in": "query",
                        "description": "a list of primary keys of domains to export",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "the start of the export window, in format M/d/yyyy H:m",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "the end of the export window, in format M/d/yyyy H:m",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tz",
                        "in": "query",
                        "description": "the code of the time zone of the export; if omitted, will use the requestor's time zone",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeTranscripts",
                        "in": "query",
                        "description": "true to include transcripts in the export",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "includeEscalationLogs",
                        "in": "query",
                        "description": "true to include escalation logs in the export",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "includeContexts",
                        "in": "query",
                        "description": "true to include context information in the export",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "useSummaryCreatedDates",
                        "in": "query",
                        "description": "true to calculate times from summary creation dates instead of conversation dates",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "useUserLanguage",
                        "in": "query",
                        "description": "true to use user languages when applicable in transcripts, valid only if includeTranscripts is true",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "metadata about the validity of an export",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationExportCheck",
                            "originalRef": "ConversationExportCheck"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationExportCheck",
                            "originalRef": "ConversationExportCheck"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/domains/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export all domain metrics",
                "description": "Exports all domain metrics for a given time range",
                "operationId": "exportAllDomainMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for domains",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/domains/{domainId}": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get domain metrics",
                "description": "Gets a single domain's metrics for a given time range",
                "operationId": "getDomainMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for domains",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/domains/{domainId}/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export domain metrics",
                "description": "Exports a single domain's metrics for a given time range",
                "operationId": "exportDomainMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for domains",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/queues": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get all escalation queue metrics",
                "description": "Gets all escalation queue metrics for a given time range",
                "operationId": "getAllEscalationQueueMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for escalation queues",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/queues/bydomain/{domainId}": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get escalation queue metrics",
                "description": "Gets a single domain's escalation queue metrics for a given time range",
                "operationId": "getEscalationQueueMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for escalation queues",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/queues/bydomain/{domainId}/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export escalation queue metrics",
                "description": "Export a single domain's escalation queue metrics for a given time range",
                "operationId": "exportEscalationQueueMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "domainId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for escalation queues",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityDurationSummaryModel",
                                "originalRef": "EntityDurationSummaryModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/queues/export": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Export all escalation queue metrics",
                "description": "Exports all escalation queue metrics for a given time range",
                "operationId": "exportAllEscalationQueueMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "range",
                        "in": "query",
                        "description": "range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics for escalation queues",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/metrics/timeranges": {
            "get": {
                "tags": [
                    "metrics-api"
                ],
                "summary": "Get time ranges",
                "description": "Gets the valid time ranges for metrics",
                "operationId": "getTimeRangesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of time range models",
                        "responseSchema": {
                            "$ref": "#/definitions/TimeRangeModel",
                            "originalRef": "TimeRangeModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/TimeRangeModel",
                            "originalRef": "TimeRangeModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nlu/ontology/actions": {
            "get": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Search Ontology Actions",
                "description": "Gets a list of Ontology Actions",
                "operationId": "getOntologyActionsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful ontology objects list",
                        "responseSchema": {
                            "$ref": "#/definitions/OntActionSearchResults",
                            "originalRef": "OntActionSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/OntActionSearchResults",
                            "originalRef": "OntActionSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Create Ontology Action",
                "description": "Creates a new Ontology Action",
                "operationId": "createOntologyActionUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "actionModel",
                        "description": "The object to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OntActionModel",
                            "originalRef": "OntActionModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created action",
                        "responseSchema": {
                            "$ref": "#/definitions/OntActionModel",
                            "originalRef": "OntActionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OntActionModel",
                            "originalRef": "OntActionModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nlu/ontology/actions/{id}": {
            "get": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Get Ontology Action",
                "description": "Gets a single action by its id",
                "operationId": "getOntologyActionUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the object in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Ontology Action matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Update Ontology Action",
                "description": "Updates an Ontology Action",
                "operationId": "updateOntologyActionUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "actionModel",
                        "description": "The action to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OntActionModel",
                            "originalRef": "OntActionModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated action",
                        "responseSchema": {
                            "$ref": "#/definitions/OntActionModel",
                            "originalRef": "OntActionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OntActionModel",
                            "originalRef": "OntActionModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Delete Ontology Action",
                "description": "Deletes an Ontology Action",
                "operationId": "deleteOntologyActionUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the action",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nlu/ontology/mappings": {
            "get": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Search Ontology Mappings",
                "description": "Gets a list of Ontology Mappings",
                "operationId": "getOntologyMappingsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful ontology objects list",
                        "responseSchema": {
                            "$ref": "#/definitions/OntIntentMappingSearchResults",
                            "originalRef": "OntIntentMappingSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/OntIntentMappingSearchResults",
                            "originalRef": "OntIntentMappingSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Create Ontology Mapping",
                "description": "Creates a new Ontology Mapping",
                "operationId": "createOntologyMappingUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "mappingModel",
                        "description": "The object to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OntIntentMappingModel",
                            "originalRef": "OntIntentMappingModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created mapping",
                        "responseSchema": {
                            "$ref": "#/definitions/OntIntentMappingModel",
                            "originalRef": "OntIntentMappingModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OntIntentMappingModel",
                            "originalRef": "OntIntentMappingModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nlu/ontology/mappings/{id}": {
            "get": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Get Ontology Mapping",
                "description": "Gets a single mapping by its id",
                "operationId": "getOntologyMappingUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the object in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Ontology Mapping matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Update Ontology Mapping",
                "description": "Updates an Ontology Mapping",
                "operationId": "updateOntologyMappingUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "mappingModel",
                        "description": "The mapping to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OntIntentMappingModel",
                            "originalRef": "OntIntentMappingModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated mapping",
                        "responseSchema": {
                            "$ref": "#/definitions/OntIntentMappingModel",
                            "originalRef": "OntIntentMappingModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OntIntentMappingModel",
                            "originalRef": "OntIntentMappingModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Delete Ontology Mapping",
                "description": "Deletes an Ontology Mapping",
                "operationId": "deleteOntologyMappingUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the mapping",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nlu/ontology/objects": {
            "get": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Search Ontology Objects",
                "description": "Gets a list of Ontology Objects",
                "operationId": "getOntologyObjectsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful ontology objects list",
                        "responseSchema": {
                            "$ref": "#/definitions/OntObjectSearchResults",
                            "originalRef": "OntObjectSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/OntObjectSearchResults",
                            "originalRef": "OntObjectSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Create Ontology Object",
                "description": "Creates a new Ontology Object",
                "operationId": "createOntologyObjectUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "objectModel",
                        "description": "The object to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OntObjectModel",
                            "originalRef": "OntObjectModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created object",
                        "responseSchema": {
                            "$ref": "#/definitions/OntObjectModel",
                            "originalRef": "OntObjectModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OntObjectModel",
                            "originalRef": "OntObjectModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nlu/ontology/objects/{id}": {
            "get": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Get Ontology Object",
                "description": "Gets a single object by its id",
                "operationId": "getOntologyObjectUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the object in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Ontology Object matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminDomainModel",
                            "originalRef": "AdminDomainModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Update Ontology Object",
                "description": "Updates an Ontology Object",
                "operationId": "updateOntologyObjectUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "objectModel",
                        "description": "The object to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OntObjectModel",
                            "originalRef": "OntObjectModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated object",
                        "responseSchema": {
                            "$ref": "#/definitions/OntObjectModel",
                            "originalRef": "OntObjectModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/OntObjectModel",
                            "originalRef": "OntObjectModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ontology-api"
                ],
                "summary": "Delete Ontology Object",
                "description": "Deletes an Ontology Object",
                "operationId": "deleteOntologyObjectUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the object",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nps/aspects": {
            "get": {
                "tags": [
                    "nps-analytics-api"
                ],
                "summary": "Get Nps Aspect Metrics",
                "description": "Gets Nps Aspects for a time period optionally filtered by domain",
                "operationId": "getAspectsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "timeRange",
                        "in": "query",
                        "description": "Time range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful metrics list",
                        "responseSchema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nps/customer-retention": {
            "get": {
                "tags": [
                    "nps-analytics-api"
                ],
                "summary": "Get Nps Customer Retention Metrics",
                "description": "Gets Nps Customer Retention Metrics for a time period optionally filtered by domain",
                "operationId": "getCustomerRetentionUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "timeRange",
                        "in": "query",
                        "description": "Time range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful metrics list",
                        "responseSchema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nps/customer-risk": {
            "get": {
                "tags": [
                    "nps-analytics-api"
                ],
                "summary": "Get Nps Customer Risk Metrics",
                "description": "Gets Nps Customer Risk Metrics for a time period optionally filtered by domain",
                "operationId": "getCustomerRiskUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "timeRange",
                        "in": "query",
                        "description": "Time range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful metrics list",
                        "responseSchema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nps/customer-satisfaction": {
            "get": {
                "tags": [
                    "nps-analytics-api"
                ],
                "summary": "Get Nps Customer Satisfaction Metrics",
                "description": "Gets Nps Customer Satisfaction Metrics for a time period optionally filtered by domain",
                "operationId": "getCustSatUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "timeRange",
                        "in": "query",
                        "description": "Time range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful metrics list",
                        "responseSchema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nps/intelligence": {
            "get": {
                "tags": [
                    "nps-analytics-api"
                ],
                "summary": "Get Nps Intelligence Metrics",
                "description": "Gets Nps Intelligence Metrics for a time period optionally filtered by domain",
                "operationId": "getIntelligenceUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "timeRange",
                        "in": "query",
                        "description": "Time range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful metrics list",
                        "responseSchema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nps/nps-trend": {
            "get": {
                "tags": [
                    "nps-analytics-api"
                ],
                "summary": "Get Nps Trend Metrics",
                "description": "Gets Nps Trend Metrics for a time period optionally filtered by domain",
                "operationId": "getNpsTrendUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "timeRange",
                        "in": "query",
                        "description": "Time range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful metrics list",
                        "responseSchema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/nps/timeranges": {
            "get": {
                "tags": [
                    "nps-analytics-api"
                ],
                "summary": "Get NPS time ranges",
                "description": "Gets the valid time ranges for nps analytics",
                "operationId": "getTimeRangesUsingGET_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of time range models",
                        "responseSchema": {
                            "$ref": "#/definitions/TimeRangeModel",
                            "originalRef": "TimeRangeModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/TimeRangeModel",
                            "originalRef": "TimeRangeModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/scripts/": {
            "post": {
                "tags": [
                    "script-api"
                ],
                "summary": "Create Script",
                "description": "Creates a script in a domain under a folder",
                "operationId": "createScriptUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "scriptModel",
                        "description": "The script to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create a Script ",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/scripts/domains/{domainId}/": {
            "get": {
                "tags": [
                    "script-api"
                ],
                "summary": "Get Model Tree",
                "description": "Obtains the list of ScriptModels in a particular domain as nodes on a tree  for display, optionally filtered by name",
                "operationId": "getTreeModelsUsingGET_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain containing the BPN",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name to filter against",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of ScriptModels",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ScriptTreeNode",
                                "originalRef": "ScriptTreeNode"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ScriptTreeNode",
                                "originalRef": "ScriptTreeNode"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/scripts/domains/{domainId}/name/{scriptName}": {
            "get": {
                "tags": [
                    "script-api"
                ],
                "summary": "Get ScriptModel by domain and name",
                "description": "Gets a specific ScriptModel by its domain and name",
                "operationId": "getByByNameAndDomainUsingGET_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain containing the Script",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "scriptName",
                        "in": "path",
                        "description": "The name of the bpn in this domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a ScriptModel",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/scripts/folders/": {
            "post": {
                "tags": [
                    "script-api"
                ],
                "summary": "Create Folder",
                "description": "Creates a script folder in a domain",
                "operationId": "createFolderUsingPOST_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ScriptTreeNode",
                        "description": "The folder to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ScriptFolder",
                            "originalRef": "ScriptFolder"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create a ScriptTreeNode ",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptFolder",
                            "originalRef": "ScriptFolder"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptFolder",
                            "originalRef": "ScriptFolder"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptFolder",
                            "originalRef": "ScriptFolder"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptFolder",
                            "originalRef": "ScriptFolder"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/scripts/folders/{folderId}": {
            "post": {
                "tags": [
                    "script-api"
                ],
                "summary": "Update Folder",
                "description": "Updates a script folder in a domain",
                "operationId": "updateFolderUsingPOST_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "folderId",
                        "in": "path",
                        "description": "The primary key of the folder to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "ScriptTreeNode",
                        "description": "The folder to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ScriptFolder",
                            "originalRef": "ScriptFolder"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a ScriptTreeNode ",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptFolder",
                            "originalRef": "ScriptFolder"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptFolder",
                            "originalRef": "ScriptFolder"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "script-api"
                ],
                "summary": "Delete Folder",
                "description": "Deletes a script folder in a domain",
                "operationId": "deleteFolderUsingDELETE_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "folderId",
                        "in": "path",
                        "description": "The primary key of the folder to delete",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete a Script Folder ",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/scripts/import": {
            "post": {
                "tags": [
                    "script-api"
                ],
                "summary": "Import New Script",
                "description": "Imports a script from a file",
                "operationId": "importNewScriptUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "domainId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "parentPathId",
                        "in": "query",
                        "description": "parentPathId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "language",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Import a Script",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/scripts/{scriptId}": {
            "get": {
                "tags": [
                    "script-api"
                ],
                "summary": "Get ScriptModel by id",
                "description": "Gets a specific ScriptModel by its id",
                "operationId": "getScriptByIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "scriptId",
                        "in": "path",
                        "description": "The primary key of the Script model",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a ScriptModel",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "script-api"
                ],
                "summary": "Update Script",
                "description": "Updates a script in a domain under a folder",
                "operationId": "updateScriptUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "scriptId",
                        "in": "path",
                        "description": "The primary key of the script to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "scriptModel",
                        "description": "The folder to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a Script ",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "script-api"
                ],
                "summary": "Delete Script",
                "description": "Deletes a script in a domain",
                "operationId": "deleteScriptUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "scriptId",
                        "in": "path",
                        "description": "The primary key of the folder to delete",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete a Script ",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/scripts/{scriptId}/checksyntax": {
            "post": {
                "tags": [
                    "script-api"
                ],
                "summary": "Check script syntax",
                "description": "Checks the syntax of a script",
                "operationId": "checkSyntaxUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "scriptId",
                        "in": "path",
                        "description": "The primary key of the script to check",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "scriptModel",
                        "description": "The script whose syntax to check",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create a Script ",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptValidationModel",
                            "originalRef": "ScriptValidationModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptValidationModel",
                            "originalRef": "ScriptValidationModel"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptValidationModel",
                            "originalRef": "ScriptValidationModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptValidationModel",
                            "originalRef": "ScriptValidationModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/scripts/{scriptId}/export": {
            "get": {
                "tags": [
                    "script-api"
                ],
                "summary": "Export Script by id",
                "description": "Export the Script contents by id",
                "operationId": "exportScriptByIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "scriptId",
                        "in": "path",
                        "description": "The primary key of the Script",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export BpnModel contents",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnModel",
                            "originalRef": "BpnModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/scripts/{scriptId}/import": {
            "post": {
                "tags": [
                    "script-api"
                ],
                "summary": "Import into Existing Script",
                "description": "Imports a script from a file into an existing script",
                "operationId": "importExistingScriptUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "scriptId",
                        "in": "path",
                        "description": "scriptId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "language",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Import a Script",
                        "responseSchema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ScriptModel",
                            "originalRef": "ScriptModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/sentient/metrics": {
            "get": {
                "tags": [
                    "sentient-api"
                ],
                "summary": "Get Sentient Metrics",
                "description": "Gets sentient metrics for a time period optionally filtered by domain",
                "operationId": "getSentientMetricsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "timeRange",
                        "in": "query",
                        "description": "Time range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful metrics list",
                        "responseSchema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/SentientMetricsListModel",
                            "originalRef": "SentientMetricsListModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/sentient/metrics-history": {
            "get": {
                "tags": [
                    "sentient-api"
                ],
                "summary": "Get Sentient Metrics History",
                "description": "Gets sentient metrics history for a time period optionally filtered by domain",
                "operationId": "getSentientMetricsHistoryUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "timeRange",
                        "in": "query",
                        "description": "Time range",
                        "required": false,
                        "type": "string",
                        "default": "today"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful metrics history list",
                        "responseSchema": {
                            "$ref": "#/definitions/NpsAnalyticsMultiPlotResponse",
                            "originalRef": "NpsAnalyticsMultiPlotResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/NpsAnalyticsMultiPlotResponse",
                            "originalRef": "NpsAnalyticsMultiPlotResponse"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/sentient/timeranges": {
            "get": {
                "tags": [
                    "sentient-api"
                ],
                "summary": "Get Sentient time ranges",
                "description": "Gets the valid time ranges for sentient analytics",
                "operationId": "getTimeRangesUsingGET_2",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of time range models",
                        "responseSchema": {
                            "$ref": "#/definitions/TimeRangeModel",
                            "originalRef": "TimeRangeModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/TimeRangeModel",
                            "originalRef": "TimeRangeModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/subsystemresponders/": {
            "get": {
                "tags": [
                    "subsystems-responder-api"
                ],
                "summary": "Get Subsystem Responders",
                "description": "Gets the list of all subsystemresponders",
                "operationId": "getSubystemRespondersUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful domain list",
                        "responseSchema": {
                            "$ref": "#/definitions/SubsystemResponderSearchResults",
                            "originalRef": "SubsystemResponderSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/SubsystemResponderSearchResults",
                            "originalRef": "SubsystemResponderSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/authenticationPolicies/": {
            "get": {
                "tags": [
                    "authentication-policy-api"
                ],
                "summary": "Get AuthenticationPolicies",
                "description": "Obtains the list of AuthenticationPolicies for display, optionally filtered by name",
                "operationId": "getAuthenticationPoliciesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name to search for in the authenticationPolicy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of AuthenticationPolicies",
                        "responseSchema": {
                            "$ref": "#/definitions/AuthenticationPolicySearchResults",
                            "originalRef": "AuthenticationPolicySearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicySearchResults",
                            "originalRef": "AuthenticationPolicySearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "authentication-policy-api"
                ],
                "summary": "Create AuthenticationPolicy",
                "description": "Create a new authenticationPolicy",
                "operationId": "createAuthenticationPolicyUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "authenticationPolicy",
                        "description": "The authenticationPolicy to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyModel",
                            "originalRef": "AuthenticationPolicyModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created AuthenticationPolicy",
                        "responseSchema": {
                            "$ref": "#/definitions/AuthenticationPolicyModel",
                            "originalRef": "AuthenticationPolicyModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyModel",
                            "originalRef": "AuthenticationPolicyModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/authenticationPolicies/{id}": {
            "get": {
                "tags": [
                    "authentication-policy-api"
                ],
                "summary": "Get AuthenticationPolicy",
                "description": "Gets a authenticationPolicy by its id",
                "operationId": "getAuthenticationPolicyUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the domain in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single AuthenticationPolicy matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AuthenticationPolicyModel",
                            "originalRef": "AuthenticationPolicyModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyModel",
                            "originalRef": "AuthenticationPolicyModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "authentication-policy-api"
                ],
                "summary": "Update AuthenticationPolicy",
                "description": "Updates a authenticationPolicy",
                "operationId": "updateAuthenticationPolicyUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the authenticationPolicy in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "authenticationPolicy",
                        "description": "The authenticationPolicy to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyModel",
                            "originalRef": "AuthenticationPolicyModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated AuthenticationPolicy",
                        "responseSchema": {
                            "$ref": "#/definitions/AuthenticationPolicyModel",
                            "originalRef": "AuthenticationPolicyModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyModel",
                            "originalRef": "AuthenticationPolicyModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/authenticationSystems/": {
            "get": {
                "tags": [
                    "authentication-system-api"
                ],
                "summary": "Get AuthenticationSystems",
                "description": "Obtains the list of AuthenticationSystems for display, optionally filtered by name",
                "operationId": "getAuthenticationSystemsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name to search for in the authenticationSystem",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of AuthenticationSystems",
                        "responseSchema": {
                            "$ref": "#/definitions/AuthenticationSystemSearchResults",
                            "originalRef": "AuthenticationSystemSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSystemSearchResults",
                            "originalRef": "AuthenticationSystemSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "authentication-system-api"
                ],
                "summary": "Create AuthenticationSystem",
                "description": "Create a new authenticationSystem",
                "operationId": "createAuthenticationSystemUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "authenticationSystem",
                        "description": "The authenticationSystem to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AdminAuthenticationSystemModel",
                            "originalRef": "AdminAuthenticationSystemModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created AuthenticationSystem",
                        "responseSchema": {
                            "$ref": "#/definitions/AuthenticationSystemModel",
                            "originalRef": "AuthenticationSystemModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSystemModel",
                            "originalRef": "AuthenticationSystemModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/authenticationSystems/{id}": {
            "get": {
                "tags": [
                    "authentication-system-api"
                ],
                "summary": "Get AuthenticationSystem",
                "description": "Gets a authenticationSystem by its id",
                "operationId": "getAuthenticationSystemUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the domain in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single AuthenticationSystem matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AuthenticationSystemModel",
                            "originalRef": "AuthenticationSystemModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSystemModel",
                            "originalRef": "AuthenticationSystemModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "authentication-system-api"
                ],
                "summary": "Update AuthenticationSystem",
                "description": "Updates a authenticationSystem",
                "operationId": "updateAuthenticationSystemUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the authenticationSystem in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "authenticationSystem",
                        "description": "The authenticationSystem to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AdminAuthenticationSystemModel",
                            "originalRef": "AdminAuthenticationSystemModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated AuthenticationSystem",
                        "responseSchema": {
                            "$ref": "#/definitions/AuthenticationSystemModel",
                            "originalRef": "AuthenticationSystemModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSystemModel",
                            "originalRef": "AuthenticationSystemModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/escalationqueues": {
            "get": {
                "tags": [
                    "escalation-queue-api"
                ],
                "summary": "Get EscalationQueues",
                "description": "Get a list of escalation queues for display, optionally filtered by name",
                "operationId": "getEscalationQueuesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "Primary key of a domain in which to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in the queue name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of Users",
                        "responseSchema": {
                            "$ref": "#/definitions/EscalationQueueSearchResults",
                            "originalRef": "EscalationQueueSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/EscalationQueueSearchResults",
                            "originalRef": "EscalationQueueSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "escalation-queue-api"
                ],
                "summary": "Create Escalation Queue",
                "description": "Create a new escalation queue",
                "operationId": "createEscalationQueueUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "queue",
                        "description": "The escalation queue to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/EscalationQueueModel",
                            "originalRef": "EscalationQueueModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created Escalation Queue",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/escalationqueues/{id}": {
            "get": {
                "tags": [
                    "escalation-queue-api"
                ],
                "summary": "Get Escalation Queue",
                "description": "Gets an escalation queue by its id",
                "operationId": "getEscalationQueueUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the escalation queue in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single AdminUser matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/EscalationQueueModel",
                            "originalRef": "EscalationQueueModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/EscalationQueueModel",
                            "originalRef": "EscalationQueueModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "escalation-queue-api"
                ],
                "summary": "Update Escalation Queue",
                "description": "Updates an escalation queue",
                "operationId": "updateEscalationQueueUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the escalation queue in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "queue",
                        "description": "The escalation queue to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/EscalationQueueModel",
                            "originalRef": "EscalationQueueModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Escalation Queue",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "escalation-queue-api"
                ],
                "summary": "Delete Escalation Queue",
                "description": "Deletes an escalation queue",
                "operationId": "deleteEscalationQueueUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the Escalation Queue in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/escalationteams": {
            "get": {
                "tags": [
                    "escalation-team-api"
                ],
                "summary": "Get EscalationTeams",
                "description": "Get a list of escalation teams for display, optionally filtered by name",
                "operationId": "getEscalationTeamsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in the team name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of Escalation Teams",
                        "responseSchema": {
                            "$ref": "#/definitions/EscalationTeamSearchResults",
                            "originalRef": "EscalationTeamSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/EscalationTeamSearchResults",
                            "originalRef": "EscalationTeamSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "escalation-team-api"
                ],
                "summary": "Create Escalation Team",
                "description": "Create a new escalation team",
                "operationId": "createEscalationTeamUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "team",
                        "description": "The escalation team to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/EscalationTeamModel",
                            "originalRef": "EscalationTeamModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created Escalation Team",
                        "responseSchema": {
                            "$ref": "#/definitions/EscalationTeamModel",
                            "originalRef": "EscalationTeamModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/EscalationTeamModel",
                            "originalRef": "EscalationTeamModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/escalationteams/{id}": {
            "get": {
                "tags": [
                    "escalation-team-api"
                ],
                "summary": "Get Escalation Team",
                "description": "Gets an escalation team by its id",
                "operationId": "getEscalationTeamUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the escalation team in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Escalation Team matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/EscalationTeamModel",
                            "originalRef": "EscalationTeamModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/EscalationTeamModel",
                            "originalRef": "EscalationTeamModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "escalation-team-api"
                ],
                "summary": "Update Escalation Team",
                "description": "Updates an escalation team",
                "operationId": "updateEscalationTeamUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the escalation team in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "team",
                        "description": "The escalation team to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/EscalationTeamModel",
                            "originalRef": "EscalationTeamModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Escalation Team",
                        "responseSchema": {
                            "$ref": "#/definitions/EscalationTeamModel",
                            "originalRef": "EscalationTeamModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/EscalationTeamModel",
                            "originalRef": "EscalationTeamModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "escalation-team-api"
                ],
                "summary": "Delete Escalation Team",
                "description": "Deletes an escalation team",
                "operationId": "deleteEscalationTeamUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the Escalation Team in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/roles/": {
            "get": {
                "tags": [
                    "role-api"
                ],
                "summary": "Get Roles",
                "description": "Obtains the list of Roles for display, optionally filtered by name",
                "operationId": "getRolesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name to search for in the role",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of Roles",
                        "responseSchema": {
                            "$ref": "#/definitions/RoleSearchResults",
                            "originalRef": "RoleSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/RoleSearchResults",
                            "originalRef": "RoleSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "role-api"
                ],
                "summary": "Create Role",
                "description": "Create a new role",
                "operationId": "createRoleUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "role",
                        "description": "The role to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RoleModel",
                            "originalRef": "RoleModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created Role",
                        "responseSchema": {
                            "$ref": "#/definitions/RoleModel",
                            "originalRef": "RoleModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/RoleModel",
                            "originalRef": "RoleModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/roles/{id}": {
            "get": {
                "tags": [
                    "role-api"
                ],
                "summary": "Get Role",
                "description": "Gets a role by its id",
                "operationId": "getRoleUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the role in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Role matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/RoleModel",
                            "originalRef": "RoleModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/RoleModel",
                            "originalRef": "RoleModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "role-api"
                ],
                "summary": "Update Role",
                "description": "Updates a role",
                "operationId": "updateRoleUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the role in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "role",
                        "description": "The role to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RoleModel",
                            "originalRef": "RoleModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Role",
                        "responseSchema": {
                            "$ref": "#/definitions/RoleModel",
                            "originalRef": "RoleModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/RoleModel",
                            "originalRef": "RoleModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "role-api"
                ],
                "summary": "Delete Role",
                "description": "Deletes a role",
                "operationId": "deleteRoleUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the role in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/usergroups/": {
            "get": {
                "tags": [
                    "user-group-api"
                ],
                "summary": "Get UserGroups",
                "description": "Obtains the list of UserGroups for display, optionally filtered by name",
                "operationId": "getUserGroupsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name of group to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in the userGroup",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of UserGroups",
                        "responseSchema": {
                            "$ref": "#/definitions/UserGroupSearchResults",
                            "originalRef": "UserGroupSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserGroupSearchResults",
                            "originalRef": "UserGroupSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "user-group-api"
                ],
                "summary": "Create User Group",
                "description": "Create a new User Group",
                "operationId": "createUserGroupUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "userGroup",
                        "description": "The User Group to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UserGroupModel",
                            "originalRef": "UserGroupModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created User Group",
                        "responseSchema": {
                            "$ref": "#/definitions/UserGroupModel",
                            "originalRef": "UserGroupModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserGroupModel",
                            "originalRef": "UserGroupModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/usergroups/{id}": {
            "get": {
                "tags": [
                    "user-group-api"
                ],
                "summary": "Get User Group",
                "description": "Gets a User Group by its id",
                "operationId": "getUserGroupUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the user group in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single User Group matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/UserGroupModel",
                            "originalRef": "UserGroupModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserGroupModel",
                            "originalRef": "UserGroupModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "user-group-api"
                ],
                "summary": "Update User Group",
                "description": "Updates a User Group",
                "operationId": "updateUserGroupUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the User Group in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "userGroup",
                        "description": "The User Group to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UserGroupModel",
                            "originalRef": "UserGroupModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated User Group",
                        "responseSchema": {
                            "$ref": "#/definitions/UserGroupModel",
                            "originalRef": "UserGroupModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserGroupModel",
                            "originalRef": "UserGroupModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "user-group-api"
                ],
                "summary": "Delete User Group",
                "description": "Deletes a user group",
                "operationId": "deleteUserGroupUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the user Group in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/users/": {
            "get": {
                "tags": [
                    "user-api"
                ],
                "summary": "Get Users",
                "description": "Obtains the list of Users for display, optionally filtered by name",
                "operationId": "getAdminUsersUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain contaning users",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "memberOfGroupId",
                        "in": "query",
                        "description": "The primary key of a group to which a user may belong",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in the user",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of Users",
                        "responseSchema": {
                            "$ref": "#/definitions/UserSearchResults",
                            "originalRef": "UserSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserSearchResults",
                            "originalRef": "UserSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "user-api"
                ],
                "summary": "Create User",
                "description": "Create a new user",
                "operationId": "createAdminUserUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "user",
                        "description": "The user to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created User",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/users/byemail/{email}": {
            "get": {
                "tags": [
                    "user-api"
                ],
                "summary": "Get User By Email",
                "description": "Gets a user by its email",
                "operationId": "getAdminUserByEmailUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "The email address of the user in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single AdminUser matching the supplied email address",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/users/byexternaluid/{externalUid}": {
            "get": {
                "tags": [
                    "user-api"
                ],
                "summary": "Get User By External Id",
                "description": "Gets a user by its external id",
                "operationId": "getAdminUserByExternaUidUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "externalUid",
                        "in": "path",
                        "description": "The external uid of the user in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single AdminUser matching the supplied email address",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/users/{id}": {
            "get": {
                "tags": [
                    "user-api"
                ],
                "summary": "Get User",
                "description": "Gets a user by its id",
                "operationId": "getAdminUserUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the user in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single AdminUser matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "user-api"
                ],
                "summary": "Update User",
                "description": "Updates a user",
                "operationId": "updateAdminUserUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the user in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "user",
                        "description": "The user to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated User",
                        "responseSchema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/AdminUserModel",
                            "originalRef": "AdminUserModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "user-api"
                ],
                "summary": "Delete User",
                "description": "Deletes a user",
                "operationId": "deleteAdminUserUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the user in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/users/{id}/authorities": {
            "get": {
                "tags": [
                    "user-api"
                ],
                "summary": "Get Authorities for User",
                "description": "Obtains a page of effective authorities granted to this user",
                "operationId": "getEffectiveAuthoritiesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The primary key of user",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of granted authorities",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EffectiveAuthoritySearchResults",
                                "originalRef": "EffectiveAuthoritySearchResults"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EffectiveAuthoritySearchResults",
                                "originalRef": "EffectiveAuthoritySearchResults"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/users/{id}/cleanup/summaries": {
            "post": {
                "tags": [
                    "user-api"
                ],
                "summary": "Cleanup Conversation Summaries For User",
                "description": "Cleans up conversation summaries and removes transcripts for the requested user",
                "operationId": "requestConversationSummaryCleanupForUserUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the user in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "daysRetained",
                        "in": "query",
                        "description": "The number of days of data to retain in the database after the cleanup is complete",
                        "required": false,
                        "type": "integer",
                        "default": 60,
                        "format": "int32"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful request for cleanup",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/users/{id}/reactivate": {
            "post": {
                "tags": [
                    "user-api"
                ],
                "summary": "Reactivate User",
                "description": "Reactivates a user whose account is no longer active for use in Amelia",
                "operationId": "reactivateAdminUserUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the user in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An OK message",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/users/{id}/unlock": {
            "post": {
                "tags": [
                    "user-api"
                ],
                "summary": "Unlock User",
                "description": "Unlock a user whose account has been locked in Amelia",
                "operationId": "unlockAdminUserUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the user in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An OK message",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/util/locales": {
            "get": {
                "tags": [
                    "util-api"
                ],
                "summary": "Get Locales",
                "description": "Obtains the list of available Locales",
                "operationId": "getLocalesUsingGET_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of Time Zones",
                        "responseSchema": {
                            "$ref": "#/definitions/LocaleModelSearchResults",
                            "originalRef": "LocaleModelSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/LocaleModelSearchResults",
                            "originalRef": "LocaleModelSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/util/locales/{id}": {
            "get": {
                "tags": [
                    "util-api"
                ],
                "summary": "Get Locale",
                "description": "Gets a single locale by id",
                "operationId": "getLocalesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the locale",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a Locale",
                        "responseSchema": {
                            "$ref": "#/definitions/LocaleModel",
                            "originalRef": "LocaleModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/LocaleModel",
                            "originalRef": "LocaleModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/util/timezones": {
            "get": {
                "tags": [
                    "util-api"
                ],
                "summary": "Get Time Zones",
                "description": "Obtains the list of available Time Zones",
                "operationId": "getTimeZonesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "searchText",
                        "in": "query",
                        "description": "Optional search text to filter the time zone list",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of Time Zones",
                        "responseSchema": {
                            "$ref": "#/definitions/TimeZoneSearchResults",
                            "originalRef": "TimeZoneSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/TimeZoneSearchResults",
                            "originalRef": "TimeZoneSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/util/timezones/{area}": {
            "get": {
                "tags": [
                    "util-api"
                ],
                "summary": "Get TimeZone",
                "description": "Gets a single time zone by it's id in the form of area/location/sublocation.  where area and sublocation are optional.  Example, UTC would only have area, which would be UTC.  US/Central would have an area and a location, with area being US and location being Central",
                "operationId": "getTimeZoneByAreaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "area",
                        "in": "path",
                        "description": "The root area of the time zone",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a TimeZone",
                        "responseSchema": {
                            "$ref": "#/definitions/TimeZoneModel",
                            "originalRef": "TimeZoneModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/TimeZoneModel",
                            "originalRef": "TimeZoneModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/util/timezones/{area}/{location}": {
            "get": {
                "tags": [
                    "util-api"
                ],
                "summary": "Get TimeZone",
                "description": "Gets a single time zone by it's id in the form of area/location/sublocation.  where area and sublocation are optional.  Example, UTC would only have area, which would be UTC.  US/Central would have an area and a location, with area being US and location being Central",
                "operationId": "getTimeZoneByAreaAndLocationUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "area",
                        "in": "path",
                        "description": "The root area of the time zone",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "location",
                        "in": "path",
                        "description": "The optional location of the time zone",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a TimeZone",
                        "responseSchema": {
                            "$ref": "#/definitions/TimeZoneModel",
                            "originalRef": "TimeZoneModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/TimeZoneModel",
                            "originalRef": "TimeZoneModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/util/timezones/{area}/{location}/{sublocation}": {
            "get": {
                "tags": [
                    "util-api"
                ],
                "summary": "Get TimeZone",
                "description": "Gets a single locale by it's id in the form of area/location/sublocation.  where area and sublocation are optional.  Example, UTC would only have area, which would be UTC.  US/Central would have an area and a location, with area being US and location being Central",
                "operationId": "getTimeZoneByAreaAndLocationAndSubLocationUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "area",
                        "in": "path",
                        "description": "The root area of the time zone",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "location",
                        "in": "path",
                        "description": "The location of the time zone",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sublocation",
                        "in": "path",
                        "description": "The sublocation of the time zone",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a TimeZone",
                        "responseSchema": {
                            "$ref": "#/definitions/TimeZoneModel",
                            "originalRef": "TimeZoneModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/TimeZoneModel",
                            "originalRef": "TimeZoneModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/util/version": {
            "get": {
                "tags": [
                    "util-api"
                ],
                "summary": "Get Amelia Version",
                "description": "Gets the version of the Amelia being contacted",
                "operationId": "getAmeliaVersionUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get the Amelia Version",
                        "responseSchema": {
                            "$ref": "#/definitions/AmeliaVersion",
                            "originalRef": "AmeliaVersion"
                        },
                        "schema": {
                            "$ref": "#/definitions/AmeliaVersion",
                            "originalRef": "AmeliaVersion"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/virtualhosts/": {
            "get": {
                "tags": [
                    "virtual-host-api"
                ],
                "summary": "Get VirtualHosts",
                "description": "Obtains the list of VirtualHosts for display, optionally filtered by name",
                "operationId": "getVirtualHostsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in the virtualHost",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of VirtualHosts",
                        "responseSchema": {
                            "$ref": "#/definitions/VirtualHostSearchResults",
                            "originalRef": "VirtualHostSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/VirtualHostSearchResults",
                            "originalRef": "VirtualHostSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "virtual-host-api"
                ],
                "summary": "Create Virtual Host",
                "description": "Create a new Virtual Host",
                "operationId": "createVirtualHostUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "virtualHost",
                        "description": "The Virtual Host to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/VirtualHostModel",
                            "originalRef": "VirtualHostModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created Virtual Host",
                        "responseSchema": {
                            "$ref": "#/definitions/VirtualHostModel",
                            "originalRef": "VirtualHostModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/VirtualHostModel",
                            "originalRef": "VirtualHostModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/virtualhosts/availablesettings": {
            "get": {
                "tags": [
                    "virtual-host-api"
                ],
                "summary": "Get Available Settings",
                "description": "Gets the list of advanced settings that can be set on a virtual host",
                "operationId": "getVirtualHostAvailableSettingsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful list of available advanced settings",
                        "responseSchema": {
                            "$ref": "#/definitions/AvailableSettingSearchResults",
                            "originalRef": "AvailableSettingSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/AvailableSettingSearchResults",
                            "originalRef": "AvailableSettingSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/system/virtualhosts/{id}": {
            "get": {
                "tags": [
                    "virtual-host-api"
                ],
                "summary": "Get Virtual Host",
                "description": "Gets a Virtual Host by its id",
                "operationId": "getVirtualHostUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the Virtual Host in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single Virtual Host matching the supplied id",
                        "responseSchema": {
                            "$ref": "#/definitions/VirtualHostModel",
                            "originalRef": "VirtualHostModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/VirtualHostModel",
                            "originalRef": "VirtualHostModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "virtual-host-api"
                ],
                "summary": "Update Virtual Host",
                "description": "Updates a Virtual Host",
                "operationId": "updateVirtualHostUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the Virtual Host in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "virtualHost",
                        "description": "The Virtual Host to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/VirtualHostModel",
                            "originalRef": "VirtualHostModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Virtual Host",
                        "responseSchema": {
                            "$ref": "#/definitions/VirtualHostModel",
                            "originalRef": "VirtualHostModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/VirtualHostModel",
                            "originalRef": "VirtualHostModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "virtual-host-api"
                ],
                "summary": "Delete Virtual Host",
                "description": "Deletes a virtual Host",
                "operationId": "deleteVirtualHostUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique primary id of the Virtual Host in Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message indicating successful deletion",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/tabular/": {
            "get": {
                "tags": [
                    "tabular-data-api"
                ],
                "summary": "Get Tabluar Data",
                "description": "Search for Tabular Data Sets for display, optionally filtered by name",
                "operationId": "getTabularDataSetsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Name to search for in the tabular data",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of the domain in which to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of Tabluar Data",
                        "responseSchema": {
                            "$ref": "#/definitions/TabularDataSearchResults",
                            "originalRef": "TabularDataSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/TabularDataSearchResults",
                            "originalRef": "TabularDataSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "tabular-data-api"
                ],
                "summary": "Create Tabluar Data",
                "description": "Create a new Tabular Data Set",
                "operationId": "createTabularDataSetUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "The name of the table to create",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "domainCode",
                        "in": "query",
                        "description": "The code of the domain in which to create the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "delimiter",
                        "in": "query",
                        "description": "The single character delimiter in the file, or TAB for tab",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "textQualifier",
                        "in": "query",
                        "description": "The text qualifier in the file",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metadata for the created tabular data",
                        "responseSchema": {
                            "$ref": "#/definitions/TabularDataModel",
                            "originalRef": "TabularDataModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/TabularDataModel",
                            "originalRef": "TabularDataModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/tabular/{id}": {
            "get": {
                "tags": [
                    "tabular-data-api"
                ],
                "summary": "Get Tabular Data",
                "description": "Get metadata for a single tabular data set",
                "operationId": "getTabularDataSetUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The primary key of the tabular set to get",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get the metadata for Tabluar Data Set",
                        "responseSchema": {
                            "$ref": "#/definitions/TabularDataModel",
                            "originalRef": "TabularDataModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/TabularDataModel",
                            "originalRef": "TabularDataModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "tabular-data-api"
                ],
                "summary": "Update Tabular Data Metadata",
                "description": "Change the domain or table name of an existing tabular set data set",
                "operationId": "updateTabularDataMetadataUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The primary key of the tabular set to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "tableName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "domainCode",
                        "in": "query",
                        "description": "domainCode",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metadata for the updated tabular data",
                        "responseSchema": {
                            "$ref": "#/definitions/TabularDataModel",
                            "originalRef": "TabularDataModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/TabularDataModel",
                            "originalRef": "TabularDataModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "tabular-data-api"
                ],
                "summary": "Delete Tabluar Data",
                "description": "Delete a tabular data set",
                "operationId": "deleteTabularDataUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The primary key of the tabular set to delete",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A delete confirmation",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/tabular/{id}/columns": {
            "get": {
                "tags": [
                    "tabular-data-api"
                ],
                "summary": "Get Tabluar Data Columns",
                "description": "Gets the columns of tabular data set",
                "operationId": "getTabularDataColumnsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The primary key of the tabular set to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metadata for the updated tabular data",
                        "responseSchema": {
                            "$ref": "#/definitions/TabularDataModelColumnSearchResults",
                            "originalRef": "TabularDataModelColumnSearchResults"
                        },
                        "schema": {
                            "$ref": "#/definitions/TabularDataModelColumnSearchResults",
                            "originalRef": "TabularDataModelColumnSearchResults"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "tabular-data-api"
                ],
                "summary": "Update Tabluar Data Column Type",
                "description": "Updates the column type of a column in a particular tabular data set",
                "operationId": "updateTabularDataColumnTypeUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The primary key of the tabular set to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "columnName",
                        "in": "query",
                        "description": "columnName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "columnType",
                        "in": "query",
                        "description": "columnType",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Double",
                            "Integer",
                            "LocalDate",
                            "LocalDateTime",
                            "LocalTime",
                            "String"
                        ]
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metadata for the updated tabular data"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/tabular/{id}/download": {
            "get": {
                "tags": [
                    "tabular-data-api"
                ],
                "summary": "Download Tabluar Data Content",
                "description": "Download tabular data set file",
                "operationId": "downloadTabularDataSetUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The primary key of the tabular set to get",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contents of tabular data"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/tabular/{id}/upload": {
            "post": {
                "tags": [
                    "tabular-data-api"
                ],
                "summary": "Upload New Tabular Data Content",
                "description": "Updating the contents of an existing tabular data set in place",
                "operationId": "updateTabularDataContentUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The primary key of the tabular set to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metadata for the updated tabular data",
                        "responseSchema": {
                            "$ref": "#/definitions/TabularDataModel",
                            "originalRef": "TabularDataModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/TabularDataModel",
                            "originalRef": "TabularDataModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/classifiers/export/{classifierModelRevisionId}": {
            "get": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Export Classifier Model",
                "description": "Exports .zip file for a classifier model revision",
                "operationId": "exportModelUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "parameters": [
                    {
                        "name": "classifierModelRevisionId",
                        "in": "path",
                        "description": "the primary key of the classifier model revision to export",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export a classifier model revision"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/classifiers/import/{domainId}": {
            "post": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Import Classifier Model",
                "description": "Imports a pre-trained classifier model revision",
                "operationId": "importModelUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The domain into which to import the model",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "The name of the file to upload, omit to use file real name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of the classifier being uploaded; if omitted, Amelia will attempt todetermine from the submission",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "INTENT_CLASSIFIER",
                            "DOMAIN_CLASSIFIER",
                            "ENTITY_TAGGER",
                            "ENTITY_ROLE_CLASSIFIER",
                            "SPANLESS_ENTITY_CLASSIFIER",
                            "TEXT_SCORER",
                            "TEXT_ENCODER"
                        ]
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Imports a pre-trained classifier model",
                        "responseSchema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/classifiers/model-revisions/{classifierModelRevisionId}": {
            "get": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Get Classifier Revision",
                "description": "Gets a classifier model revision by its ID",
                "operationId": "getModelRevisionUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "classifierModelRevisionId",
                        "in": "path",
                        "description": "The primary key of the target classifier model revision",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a classifier revision",
                        "responseSchema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Delete Classifier Revision",
                "description": "Delete a classifier model revision",
                "operationId": "deleteModelRevisionUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "classifierModelRevisionId",
                        "in": "path",
                        "description": "the primary key of the classifier revision to delete",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete a classifier model revision",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/classifiers/model-revisions/{classifierModelRevisionId}/deploy": {
            "post": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Deploy Classifier Model Revision",
                "description": "Deploys a classifier model revision for immediate use",
                "operationId": "deployModelUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "classifierModelRevisionId",
                        "in": "path",
                        "description": "The primary key of the classifier model revision to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deploy a classifier model revision",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/classifiers/model-revisions/{classifierModelRevisionId}/undeploy": {
            "post": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Undeploy Classifier Model Revision",
                "description": "Undeploys a classifier model revision",
                "operationId": "undeployModelUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "classifierModelRevisionId",
                        "in": "path",
                        "description": "The primary key of the classifier model revision to update",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Undeploy a classifier model revision",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/classifiers/models": {
            "get": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Get classifiers",
                "description": "Search for a list of classifier models, optionally filtered by name and type",
                "operationId": "getModelsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Classifier name to filter against",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Classifier type to filter against",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "TEXT_CLASSIFIER",
                            "TEXT_TAGGER",
                            "SPAN_CLASSIFIER",
                            "SPANLESS_SLOT_EXTRACTOR"
                        ]
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "Primary key of the domain to search in",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Generic search to filter against",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of classifier models",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ClassifierModelSearchResults",
                                "originalRef": "ClassifierModelSearchResults"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ClassifierModelSearchResults",
                                "originalRef": "ClassifierModelSearchResults"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/classifiers/models/domain/{domainId}/type/{type}/name/{name}": {
            "get": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Get Latest Classifier Revision",
                "description": "Get the latest classifier model revision by its domain, type, and name, the three of which uniquely identify classifier models.",
                "operationId": "getModelRevisionUsingGET_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type/function of the classifier model",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "TEXT_CLASSIFIER",
                            "TEXT_TAGGER",
                            "SPAN_CLASSIFIER",
                            "SPANLESS_SLOT_EXTRACTOR"
                        ]
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the classifier model",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a classifier revision",
                        "responseSchema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/classifiers/models/{classifierModelId}": {
            "get": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Get Latest Classifier Revision",
                "description": "Gets the latest revision for a classifier",
                "operationId": "getLatestModelRevisionUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "classifierModelId",
                        "in": "path",
                        "description": "The primary key of the classifier model",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a classifier revision",
                        "responseSchema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/classifiers/train": {
            "post": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Train Model",
                "description": "Kick off training for a new classifier model revision given a configuration",
                "operationId": "trainModelUsingPOST_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "modelTrainerParameters",
                        "description": "The training configuration",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ModelTrainerParameters",
                            "originalRef": "ModelTrainerParameters"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Train classifier model",
                        "responseSchema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/classifiers/train/withxml": {
            "post": {
                "tags": [
                    "classifiers-api"
                ],
                "summary": "Train Model with with XML",
                "description": "Kick off training for a new classifier model revisiongiven a configuration and XML additional input",
                "operationId": "trainModelUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "modelTrainerParameters",
                        "in": "formData",
                        "description": "The training configuration as JSON, please see Train Model method for model docuemntation",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "featureFile",
                        "in": "formData",
                        "description": "Optional XML file used for configuring custom features.",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Train classifier model",
                        "responseSchema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/ClassifierModelRevisionModel",
                            "originalRef": "ClassifierModelRevisionModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/corpus/document": {
            "get": {
                "tags": [
                    "corpus-api"
                ],
                "summary": "Get documents",
                "description": "Search for a list of documents, optionally filtered by name and domain",
                "operationId": "getDocumentsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The optional primary key of a domain in which to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "A search term name to filter against",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of documents",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DocumentSearchResults",
                                "originalRef": "DocumentSearchResults"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DocumentSearchResults",
                                "originalRef": "DocumentSearchResults"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "corpus-api"
                ],
                "summary": "Create Document",
                "description": "Creates a new document",
                "operationId": "createDocumentUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "documentRevisionModel",
                        "description": "The document to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create a document",
                        "responseSchema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "corpus-api"
                ],
                "summary": "Delete Document",
                "description": "Deletes a document",
                "operationId": "deleteDocumentUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "documentModel",
                        "description": "document to delete",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DocumentModel",
                            "originalRef": "DocumentModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete a document ",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/corpus/document-revision": {
            "delete": {
                "tags": [
                    "corpus-api"
                ],
                "summary": "Delete Document Revision",
                "description": "Deletes a document revision",
                "operationId": "deleteDocumentRevisionUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "documentRevisionModel",
                        "description": "document revision to delete",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete a document revision",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/corpus/document-revision/{documentRevisionId}": {
            "get": {
                "tags": [
                    "corpus-api"
                ],
                "summary": "Get document revision by id",
                "description": "Gets a document revision by its ID",
                "operationId": "getDocumentRevisionUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "documentRevisionId",
                        "in": "path",
                        "description": "The primary key of the target document revision",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a document revision",
                        "responseSchema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/corpus/document/revisions": {
            "get": {
                "tags": [
                    "corpus-api"
                ],
                "summary": "Get document revisions",
                "description": "Search for a list of document revisions, optionally filtered by document name",
                "operationId": "getDocumentRevisionsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "A search term name to filter against",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DocumentRevisionSearchResults",
                                "originalRef": "DocumentRevisionSearchResults"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DocumentRevisionSearchResults",
                                "originalRef": "DocumentRevisionSearchResults"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/corpus/document/{documentId}": {
            "get": {
                "tags": [
                    "corpus-api"
                ],
                "summary": "Get document revision by id",
                "description": "Gets the latest revision for a document",
                "operationId": "getLatestDocumentRevisionUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "The primary key of the document",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a document revision",
                        "responseSchema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "corpus-api"
                ],
                "summary": "Update Document",
                "description": "Updates an existing document",
                "operationId": "updateDocumentUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "documentRevisionModel",
                        "description": "The document to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        }
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "The primary key of the document to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a document",
                        "responseSchema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/corpus/import/document": {
            "post": {
                "tags": [
                    "corpus-api"
                ],
                "summary": "Import Document",
                "description": "Imports an annotated document for use in training and validation",
                "operationId": "importCorpusDocumentUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of the domain into which to import the document",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "The name of the file to upload, omit to use file real name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Imports an annotated document",
                        "responseSchema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/DocumentRevisionModel",
                            "originalRef": "DocumentRevisionModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/": {
            "post": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Create Entity",
                "description": "Creates an Entity",
                "operationId": "createEntityModelUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "entityModel",
                        "description": "The Entity to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/EntityModel",
                            "originalRef": "EntityModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resulting Entity",
                        "responseSchema": {
                            "$ref": "#/definitions/EntityModel",
                            "originalRef": "EntityModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/EntityModel",
                            "originalRef": "EntityModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/domain/export": {
            "post": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Export Entity TSV File",
                "description": "This operation is deprecated and it will be removed.  It has been replaced by Export Entity JSON File. Exports TSV for a Domain or Set of entities",
                "operationId": "exportEntitiesTsvUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "exportCommand",
                        "description": "exportCommand",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExportEntitiesTsvCommand",
                            "originalRef": "ExportEntitiesTsvCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a TSV file of Entities"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/domain/exportJson": {
            "post": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Export Entity JSON File",
                "description": "Exports JSON for a Domain or Set of entities",
                "operationId": "exportEntitiesJsonUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "exportCommand",
                        "description": "exportCommand",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExportEntitiesJsonCommand",
                            "originalRef": "ExportEntitiesJsonCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a JSON file of Entities"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/domain/{domainId}/": {
            "get": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Get Entities",
                "description": "Obtains the list of Entities in a particular domain, optionally filtered by name",
                "operationId": "getEntityModelsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain containing the entity",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "A search term name to filter against",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of entities",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityModelSearchResults",
                                "originalRef": "EntityModelSearchResults"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityModelSearchResults",
                                "originalRef": "EntityModelSearchResults"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/domain/{domainId}/import": {
            "post": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Import Entities",
                "description": "Imports a TSV file for bulk import of entities",
                "operationId": "importEntitiesTsvUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The domain into which to import the entities",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "strategy",
                        "in": "query",
                        "description": "The strategy to parse the imported file",
                        "required": false,
                        "type": "string",
                        "default": "ADD",
                        "enum": [
                            "ADD",
                            "MERGE",
                            "OVERWRITE"
                        ]
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "The name of the file to upload, omit to use file real name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Imports a TSV file",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityModelSearchResults",
                                "originalRef": "EntityModelSearchResults"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityModelSearchResults",
                                "originalRef": "EntityModelSearchResults"
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/{entityId}": {
            "get": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Get Entity by id",
                "description": "Gets a specific Entity by its id",
                "operationId": "getEntityModelByIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "The primary key of the Entity",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get an EntityModel",
                        "responseSchema": {
                            "$ref": "#/definitions/EntityModel",
                            "originalRef": "EntityModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/EntityModel",
                            "originalRef": "EntityModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Update Entity",
                "description": "Updates an Entity",
                "operationId": "updateEntityModelUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "entityId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "entityModel",
                        "description": "The Entity to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/EntityModel",
                            "originalRef": "EntityModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated entity",
                        "responseSchema": {
                            "$ref": "#/definitions/EntityModel",
                            "originalRef": "EntityModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/EntityModel",
                            "originalRef": "EntityModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Delete Entity",
                "description": "Deletes an Entity by entity primary key",
                "operationId": "deleteEntityModelUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "entityId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status indicating entity has been deleted successfully",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/{entityId}/questions": {
            "get": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Get Entity Questions",
                "description": "Gets all questions/prompts for a given Entity.",
                "operationId": "getEntityModelQuestionsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "entityId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of questions for a given entity",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityQuestionModel",
                                "originalRef": "EntityQuestionModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityQuestionModel",
                                "originalRef": "EntityQuestionModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/{entityId}/questions/add": {
            "post": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Add Entity Questions",
                "description": "Adds a list of questions/prompts for a given Entity.",
                "operationId": "addEntityModelQuestionsUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "entityId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "entityQuestions",
                        "description": "The Questions to create",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityQuestionModel",
                                "originalRef": "EntityQuestionModel"
                            }
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of ",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityQuestionModel",
                                "originalRef": "EntityQuestionModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityQuestionModel",
                                "originalRef": "EntityQuestionModel"
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/{entityId}/questions/delete": {
            "post": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Delete Entity Questions",
                "description": "Deletes a list of questions/prompts for a given Entity.",
                "operationId": "deleteEntityModelQuestionsUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "entityId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "entityUtteranceIds",
                        "description": "The ids of questions to delete",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status indicating entities have been successfully deleted",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/{entityId}/utterances": {
            "get": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Get Entity Utterances",
                "description": "Gets all spanless entity training examples for an Entity",
                "operationId": "getEntityModelUtterancesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "entityId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of resulting entity utterances",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityUtteranceModel",
                                "originalRef": "EntityUtteranceModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityUtteranceModel",
                                "originalRef": "EntityUtteranceModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/{entityId}/utterances/add": {
            "post": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Add Entity Utterances",
                "description": "Adds spanless entity utterance examples to a given Entity",
                "operationId": "addEntityModelUtterancesUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "entityId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "entityUtterances",
                        "description": "The Utterances to create",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityUtteranceModel",
                                "originalRef": "EntityUtteranceModel"
                            }
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of resulting utterances",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityUtteranceModel",
                                "originalRef": "EntityUtteranceModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EntityUtteranceModel",
                                "originalRef": "EntityUtteranceModel"
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/entities/{entityId}/utterances/delete": {
            "post": {
                "tags": [
                    "entities-api"
                ],
                "summary": "Delete Entity Utterances",
                "description": "Deletes Utterances from an Entity",
                "operationId": "deleteEntityModelUtterancesUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "entityId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "entityUtteranceIds",
                        "description": "The ids of utterances to delete",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status indicating utterances have been deleted successfully",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/": {
            "post": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Create Intent",
                "description": "Creates an Intent",
                "operationId": "createIntentModelUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "intentModel",
                        "description": "The Intent to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create an Intent ",
                        "responseSchema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/domain/{domainId}/": {
            "get": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Get Intents",
                "description": "Obtains the list of Intents in a particular domain, optionally filtered by name",
                "operationId": "getIntentModelsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain containing the intent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "A search term name to filter against",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The zero-indexed page of results to return",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of each results page",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "format": "int32"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "A list of {field},{dir} sort directives, where dir can be asc or desc",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of intents",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentModelSearchResults",
                                "originalRef": "IntentModelSearchResults"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentModelSearchResults",
                                "originalRef": "IntentModelSearchResults"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/domain/{domainId}/export": {
            "post": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Export Intent TSV File",
                "description": "Exports TSV for a Domain or Set of intents",
                "operationId": "exportIntentsTsvUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "exportCommand",
                        "description": "exportCommand",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExportIntentsTsvCommand",
                            "originalRef": "ExportIntentsTsvCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a TSV file of Intents"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/domain/{domainId}/import": {
            "post": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Import Intents",
                "description": "Imports a tsv file to import in bulk",
                "operationId": "importIntentsTsvUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The domain into which to import the intents",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "strategy",
                        "in": "query",
                        "description": "The strategy to parse the imported file",
                        "required": false,
                        "type": "string",
                        "default": "ADD",
                        "enum": [
                            "ADD",
                            "MERGE",
                            "OVERWRITE"
                        ]
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "The name of the file to upload, omit to use file real name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Imports a TSV file",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentModelSearchResults",
                                "originalRef": "IntentModelSearchResults"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentModelSearchResults",
                                "originalRef": "IntentModelSearchResults"
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/{intentId}": {
            "get": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Get Intent by id",
                "description": "Gets a specific Intent by its id",
                "operationId": "getIntentModelByIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "The primary key of the Intent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get an IntentModel",
                        "responseSchema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Update Intent",
                "description": "Updates an Intent",
                "operationId": "updateIntentModelUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "intentId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "intentModel",
                        "description": "The Intent to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updates an Intent ",
                        "responseSchema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Delete Intent",
                "description": "Deletes an Intent",
                "operationId": "deleteIntentModelUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "intentId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete an Intent ",
                        "responseSchema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/{intentId}/responses": {
            "get": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Get Intent Responses",
                "description": "Gets all Responses for an Intent",
                "operationId": "getIntentModelResponsesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "intentId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gets all Responses for an Intent",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentUtteranceModel",
                                "originalRef": "IntentUtteranceModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentUtteranceModel",
                                "originalRef": "IntentUtteranceModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/{intentId}/responses/add": {
            "post": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Add Intent Responses",
                "description": "Add Responses to an Intent",
                "operationId": "addIntentModelResponsesUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "intentId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "intentResponses",
                        "description": "The Intent to create",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentUtteranceModel",
                                "originalRef": "IntentUtteranceModel"
                            }
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Intent Responses ",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentUtteranceModel",
                                "originalRef": "IntentUtteranceModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentUtteranceModel",
                                "originalRef": "IntentUtteranceModel"
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/{intentId}/responses/delete": {
            "post": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Delete Intent Responses",
                "description": "Delets Responses from an Intent",
                "operationId": "deleteIntentModelResponsesUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "intentId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "intentResponseIds",
                        "description": "The ids of responses to delete",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete Responses from an Intent ",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/{intentId}/utterances": {
            "get": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Get Intent Utterances",
                "description": "Gets all Utterances for an Intent",
                "operationId": "getIntentModelUtterancesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "intentId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gets all Utterances for an Intent ",
                        "responseSchema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/{intentId}/utterances/add": {
            "post": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Add Intent Utterances",
                "description": "Adds all Utterances for an Intent",
                "operationId": "addIntentModelUtterancesUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "intentId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "intentUtterances",
                        "description": "The Intent to create",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentUtteranceModel",
                                "originalRef": "IntentUtteranceModel"
                            }
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Add Utterances for an Intent ",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentUtteranceModel",
                                "originalRef": "IntentUtteranceModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntentUtteranceModel",
                                "originalRef": "IntentUtteranceModel"
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/intents/{intentId}/utterances/delete": {
            "post": {
                "tags": [
                    "intents-api"
                ],
                "summary": "Delete Intent Utterances",
                "description": "Deletes Utterances from and Intent",
                "operationId": "deleteIntentModelUtterancesUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "intentId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "intentUtteranceIds",
                        "description": "The ids of utterances to delete",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete Utterances from an Intent ",
                        "responseSchema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntentModel",
                            "originalRef": "IntentModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/nlu/domain/{domainId}": {
            "get": {
                "tags": [
                    "training-api"
                ],
                "summary": "Get Nlu Configuration",
                "description": "Gets the nlu configuration for a domain",
                "operationId": "getNluConfigurationUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain whose nlu configuration we are getting",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a nlu configuration",
                        "responseSchema": {
                            "$ref": "#/definitions/NluConfigurationModel",
                            "originalRef": "NluConfigurationModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/NluConfigurationModel",
                            "originalRef": "NluConfigurationModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "training-api"
                ],
                "summary": "Save Nlu Configuration",
                "description": "Saves the nlu configuration for a domain",
                "operationId": "savetNluConfigurationUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain whose nlu configuration we are getting",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "nluConfigurationModel",
                        "description": "nluConfigurationModel",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NluConfigurationModel",
                            "originalRef": "NluConfigurationModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a nlu configuration",
                        "responseSchema": {
                            "$ref": "#/definitions/NluConfigurationModel",
                            "originalRef": "NluConfigurationModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/NluConfigurationModel",
                            "originalRef": "NluConfigurationModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/predict/domain/{domainId}": {
            "get": {
                "tags": [
                    "predict-api"
                ],
                "summary": "Predict All",
                "description": "Apply intents, entities, and classifiers to make NLU predictions for an utterance in a given domain.",
                "operationId": "getPredictionsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain in which to make predictions",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "utterance",
                        "in": "query",
                        "description": "The utterance on which to make predictions",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "promptEntityId",
                        "in": "query",
                        "description": "Optional primary key of an entity to emulate Amelia's behavior on an \"ask for the slot ...\" task",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "intentId",
                        "in": "query",
                        "description": "Optional primary key of an intent to be used to constrain entity predictions, such as for testing the scoping of entities to intents when no intent classifier is available.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "usePredictedDomain",
                        "in": "query",
                        "description": "Optional, determines whether to use predicted domain or not during FAQ prediction",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Optional language to signal translation should be done to the selected domain's language. (ex. 'ja' or 'ja_JP')",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NLU predictions for the input utterance",
                        "responseSchema": {
                            "$ref": "#/definitions/NluPredictionModel",
                            "originalRef": "NluPredictionModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/NluPredictionModel",
                            "originalRef": "NluPredictionModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/admin/training/predict/domain/{domainId}/batch": {
            "get": {
                "tags": [
                    "predict-api"
                ],
                "summary": "Predict All Batch",
                "description": "Apply intents, entities, and classifiers to make NLU predictions for a batch of utterances in a given domain.",
                "operationId": "getBatchPredictionsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "path",
                        "description": "The primary key of the domain in which to make predictions",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "utterances",
                        "in": "query",
                        "description": "The batch of utterances on which to make predictions",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "promptEntityId",
                        "in": "query",
                        "description": "Optional primary key of an entity to emulate Amelia's behavior on an \"ask for the slot ...\" task",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "intentId",
                        "in": "query",
                        "description": "Optional primary key of an intent to be used to constrain entity predictions, such as for testing the scoping of entities to intents when no intent classifier is available.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "usePredictedDomain",
                        "in": "query",
                        "description": "Optional, determines whether to use predicted domain or not during FAQ prediction",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Optional language to signal translation should be done to the selected domain's language. (ex. 'ja' or 'ja_JP')",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NLU predictions for the batch of input utterances",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NluPredictionModel",
                                "originalRef": "NluPredictionModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NluPredictionModel",
                                "originalRef": "NluPredictionModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/aiops/token/get": {
            "post": {
                "tags": [
                    "aiops-api"
                ],
                "summary": "Get Aiops Token",
                "description": "Request from a token for use with AiOps for a given user and password",
                "operationId": "loginUserUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "loginCommand",
                        "description": "loginCommand",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/LoginCommand",
                            "originalRef": "LoginCommand"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Token Response",
                        "responseSchema": {
                            "$ref": "#/definitions/AiopsAccessTokenResponse",
                            "originalRef": "AiopsAccessTokenResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/AiopsAccessTokenResponse",
                            "originalRef": "AiopsAccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "A response with a null token, indicating user has no permission",
                        "responseSchema": {
                            "$ref": "#/definitions/AiopsAccessTokenResponse",
                            "originalRef": "AiopsAccessTokenResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/AiopsAccessTokenResponse",
                            "originalRef": "AiopsAccessTokenResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/auth/anonymousLogin": {
            "post": {
                "tags": [
                    "auth-api"
                ],
                "summary": "Anonymous Login",
                "description": "Login to a specific Amelia as an anonymous user  and returns a token for further access to this session.  Not supported in Clustered Rest Gateway Instances.",
                "operationId": "loginAnonymouslyUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "loginCommand",
                        "description": "loginCommand",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AnonymousLoginCommand",
                            "originalRef": "AnonymousLoginCommand"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Login",
                        "responseSchema": {
                            "$ref": "#/definitions/LoginResponse",
                            "originalRef": "LoginResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/LoginResponse",
                            "originalRef": "LoginResponse"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "An error if accessing this Amelia is denied",
                        "responseSchema": {
                            "$ref": "#/definitions/ForbiddenHostException",
                            "originalRef": "ForbiddenHostException"
                        },
                        "schema": {
                            "$ref": "#/definitions/ForbiddenHostException",
                            "originalRef": "ForbiddenHostException"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "tags": [
                    "auth-api"
                ],
                "summary": "Login",
                "description": "Login to a specific Amelia as a given user with a given password  and returns a token for further access to this session",
                "operationId": "loginUserUsingPOST_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "loginCommand",
                        "description": "loginCommand",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/LoginCommand",
                            "originalRef": "LoginCommand"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Login",
                        "responseSchema": {
                            "$ref": "#/definitions/LoginResponse",
                            "originalRef": "LoginResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/LoginResponse",
                            "originalRef": "LoginResponse"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "An error if accessing this Amelia is denied",
                        "responseSchema": {
                            "$ref": "#/definitions/ForbiddenHostException",
                            "originalRef": "ForbiddenHostException"
                        },
                        "schema": {
                            "$ref": "#/definitions/ForbiddenHostException",
                            "originalRef": "ForbiddenHostException"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "tags": [
                    "auth-api"
                ],
                "summary": "Logout",
                "description": "Logs out the current session",
                "operationId": "logoutUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "responseSchema": {
                            "$ref": "#/definitions/LogoutResponse",
                            "originalRef": "LogoutResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/LogoutResponse",
                            "originalRef": "LogoutResponse"
                        }
                    },
                    "204": {
                        "description": "Successful Logout",
                        "responseSchema": {
                            "$ref": "#/definitions/LogoutResponse",
                            "originalRef": "LogoutResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/LogoutResponse",
                            "originalRef": "LogoutResponse"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/auth/logout/allSessionsForUser": {
            "post": {
                "tags": [
                    "auth-api"
                ],
                "summary": "Logout User Sessions",
                "description": "Logs out all API sessions and tokens for this user",
                "operationId": "logoutAllSessionsUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "forceLogoutCommand",
                        "description": "forceLogoutCommand",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ForceLogoutCommand",
                            "originalRef": "ForceLogoutCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "responseSchema": {
                            "$ref": "#/definitions/LogoutResponse",
                            "originalRef": "LogoutResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/LogoutResponse",
                            "originalRef": "LogoutResponse"
                        }
                    },
                    "204": {
                        "description": "Successful Logout",
                        "responseSchema": {
                            "$ref": "#/definitions/LogoutResponse",
                            "originalRef": "LogoutResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/LogoutResponse",
                            "originalRef": "LogoutResponse"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/domains": {
            "get": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Get Conversation Domains",
                "description": "Gets the list of domains that can hold conversations for this user",
                "operationId": "getDomainsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful domain list",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConversationDomainModel",
                                "originalRef": "ConversationDomainModel"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConversationDomainModel",
                                "originalRef": "ConversationDomainModel"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/new": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "New Conversation",
                "description": "Begins a new conversation with a logged in user on a given domain",
                "operationId": "newConversationUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "newConversationCommand",
                        "description": "newConversationCommand",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NewConversationCommand",
                            "originalRef": "NewConversationCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Conversation start",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/observe": {
            "post": {
                "tags": [
                    "agent-api"
                ],
                "summary": "Observe",
                "description": "Observes up a conversation with a user.  Note the {conversationId} path is deprecated",
                "operationId": "observeUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "observeConversationCommand",
                        "description": "command",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ObserveCommand",
                            "originalRef": "ObserveCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful observe requests",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/pickup": {
            "post": {
                "tags": [
                    "agent-api"
                ],
                "summary": "Pickup",
                "description": "Picks up a conversation with a user.  Note the {conversationId} path is deprecated",
                "operationId": "pickupUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "pickupConversationCommand",
                        "description": "command",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PickupCommand",
                            "originalRef": "PickupCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Conversation pickup",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/push-new-with-agent": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Push New Conversation with Agent",
                "description": "Pushes a new conversation to a user with an agent",
                "operationId": "pushNewConversationWithAgentUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "pushNewConversationWithAgentCommand",
                        "description": "pushNewConversationWithAgentCommand",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PushNewConversationWithAgentCommand",
                            "originalRef": "PushNewConversationWithAgentCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Conversation start",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/push-new-with-amelia": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Push New Conversation with Amelia",
                "description": "Pushes a new conversation to a user with amelia",
                "operationId": "pushNewConversationWithAmeliaUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "pushNewConversationWithAmeliaCommand",
                        "description": "pushNewConversationWithAmeliaCommand",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PushNewConversationWithAmeliaCommand",
                            "originalRef": "PushNewConversationWithAmeliaCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Conversation push",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationId}/observe": {
            "post": {
                "tags": [
                    "agent-api"
                ],
                "summary": "Observe",
                "description": "Observes up a conversation with a user.  Note the {conversationId} path is deprecated",
                "operationId": "observeUsingPOST_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "observeConversationCommand",
                        "description": "command",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ObserveCommand",
                            "originalRef": "ObserveCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful observe requests",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationId}/pickup": {
            "post": {
                "tags": [
                    "agent-api"
                ],
                "summary": "Pickup",
                "description": "Picks up a conversation with a user.  Note the {conversationId} path is deprecated",
                "operationId": "pickupUsingPOST_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "pickupConversationCommand",
                        "description": "command",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PickupCommand",
                            "originalRef": "PickupCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Conversation pickup",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationId}/push-to-agent": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Push existing conversation to an agent",
                "description": "Pushes an existing conversation to a agent",
                "operationId": "pushExistingConversationToAgentUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "in": "path",
                        "description": "The conversation to push",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "pushExistingConversationToAgentCommand",
                        "description": "pushExistingConversationToAgentCommand",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PushExistingConversationToAgentCommand",
                            "originalRef": "PushExistingConversationToAgentCommand"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Conversation push",
                        "responseSchema": {
                            "type": "string"
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/close": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Close",
                "description": "Close and disconnect the conversation with Amelia",
                "operationId": "closeConversationUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "params",
                        "description": "An optional body of additional parameters",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CloseConversationParams",
                            "originalRef": "CloseConversationParams"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation ended",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/content/upload": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Upload",
                "description": "Uploads a single file to Amelia",
                "operationId": "uploadUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "The name of the file to store",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "content",
                        "in": "formData",
                        "description": "content",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The upload has been received"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/content/upload/cancel": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Cancel Upload",
                "description": "Tells Amelia that previous uploads should be cancelled",
                "operationId": "cancelUploadUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The upload has been received",
                        "responseSchema": {
                            "$ref": "#/definitions/SayResponse",
                            "originalRef": "SayResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SayResponse",
                            "originalRef": "SayResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/content/upload/done": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Finish Upload",
                "description": "Tells Amelia that previous uploads are finished, and ok to save",
                "operationId": "finishUploadUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The upload has been confirmed",
                        "responseSchema": {
                            "$ref": "#/definitions/SayResponse",
                            "originalRef": "SayResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SayResponse",
                            "originalRef": "SayResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/content/{contextId}/{bucketName}/{fileName}": {
            "get": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Download",
                "description": "Downloads a single file identified by the conversationSessionId, its bucket name,and its file name",
                "operationId": "downloadUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contextId",
                        "in": "path",
                        "description": "The current context ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "bucketName",
                        "in": "path",
                        "description": "The bucket in which the requested piece of content resides",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fileName",
                        "in": "path",
                        "description": "The name of the file to retrieve",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The content to be delviered"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/content/{contextId}/{processInstanceId}/{bucketName}/{fileName}": {
            "get": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Download",
                "description": "Downloads a single file identified by the conversationSessionId, context ID, bucket name, file name, and process instance ID. The resource, if dynamic (a template), is evaluated in the given context.",
                "operationId": "downloadWitProcInstanceUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contextId",
                        "in": "path",
                        "description": "The current context ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "processInstanceId",
                        "in": "path",
                        "description": "The process instance ID as provided by present message in which to evaluate this content",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "bucketName",
                        "in": "path",
                        "description": "The bucket in which the requested piece of content resides",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fileName",
                        "in": "path",
                        "description": "The name of the file to retrieve",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The content to be delivered"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/disconnect": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Disconnect",
                "description": "Disconnect from the conversation with Amelia.  Favor using close.",
                "operationId": "disconnectConversationUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation disconnected",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/longpoll": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Long Poll",
                "description": "Long Poll for Messages, flushing on message type containing textor ready messages, or a maximum time duration.  Calling long polling on a webhook conversation will always return an empty list after the maximum duration",
                "operationId": "longPollUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages successfully returned",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MessageFromAmelia",
                                "originalRef": "MessageFromAmelia"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MessageFromAmelia",
                                "originalRef": "MessageFromAmelia"
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/poll": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Poll",
                "description": "Poll for messages, immediately returning any available messages. Polling a webhook conversation will always return an empty list.",
                "operationId": "pollUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages successfully returned",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MessageFromAmelia",
                                "originalRef": "MessageFromAmelia"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MessageFromAmelia",
                                "originalRef": "MessageFromAmelia"
                            }
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/say": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Say",
                "description": "Say something to Amelia",
                "operationId": "sayUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "messageText",
                        "in": "query",
                        "description": "The text to say to Amelia",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully submitted",
                        "responseSchema": {
                            "$ref": "#/definitions/SayResponse",
                            "originalRef": "SayResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SayResponse",
                            "originalRef": "SayResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/send": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Send",
                "description": "Send a message with attributes to Amelia",
                "operationId": "sendUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "message",
                        "description": "A complete message to send to Amelia",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/BaseMessageToAmelia",
                            "originalRef": "BaseMessageToAmelia"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully submitted",
                        "responseSchema": {
                            "$ref": "#/definitions/SayResponse",
                            "originalRef": "SayResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SayResponse",
                            "originalRef": "SayResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/conversations/{conversationSessionId}/start": {
            "post": {
                "tags": [
                    "conversation-api"
                ],
                "summary": "Start Conversation",
                "description": "Starts a conversation that requires manual startup",
                "operationId": "startConversationUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "conversationSessionId",
                        "in": "path",
                        "description": "The conversation with which to interact",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Conversation start",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationSessionResponse",
                            "originalRef": "ConversationSessionResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/integrations/execute": {
            "post": {
                "tags": [
                    "integration-user-api"
                ],
                "summary": "Execute an Integration Flow",
                "description": "Executes an Integration Flow",
                "operationId": "executeIntegrationFlowUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "request",
                        "description": "The execution request",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExecuteIntegrationFlowRequest",
                            "originalRef": "ExecuteIntegrationFlowRequest"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ExecuteIntegrationFlowResponse",
                            "originalRef": "ExecuteIntegrationFlowResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/ExecuteIntegrationFlowResponse",
                            "originalRef": "ExecuteIntegrationFlowResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/license": {
            "get": {
                "tags": [
                    "license-api"
                ],
                "summary": "Get License",
                "description": "Gets the current License for an Amelia instance",
                "operationId": "getLicenseUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The current License",
                        "responseSchema": {
                            "$ref": "#/definitions/LicenseViewModel",
                            "originalRef": "LicenseViewModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/LicenseViewModel",
                            "originalRef": "LicenseViewModel"
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "license-api"
                ],
                "summary": "Install License",
                "description": "Installs a License one an Amelia instance",
                "operationId": "installLicenseUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "licenseText",
                        "description": "licenseText",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly installed license License",
                        "responseSchema": {
                            "$ref": "#/definitions/LicenseViewModel",
                            "originalRef": "LicenseViewModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/LicenseViewModel",
                            "originalRef": "LicenseViewModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/agentSessionChangedMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "AgentSessionChangedMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "agentSessionChangedMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/AgentSessionChangedMessageFromAmelia",
                            "originalRef": "AgentSessionChangedMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/AgentSessionChangedMessageFromAmelia",
                            "originalRef": "AgentSessionChangedMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/ameliaReadyMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "AmeliaReadyMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "ameliaReadyMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/AmeliaReadyMessageFromAmelia",
                            "originalRef": "AmeliaReadyMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/AmeliaReadyMessageFromAmelia",
                            "originalRef": "AmeliaReadyMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/automataExecutionCreatedMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "AutomataExecutionCreatedMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "automataExecutionCreatedMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/AutomataExecutionCreatedMessageFromAmelia",
                            "originalRef": "AutomataExecutionCreatedMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/AutomataExecutionCreatedMessageFromAmelia",
                            "originalRef": "AutomataExecutionCreatedMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/botExecutionRequestMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "BotExecutionRequestMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "botExecutionRequestMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/BotExecutionRequestMessageFromAmelia",
                            "originalRef": "BotExecutionRequestMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/BotExecutionRequestMessageFromAmelia",
                            "originalRef": "BotExecutionRequestMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/bpnExecutionEventMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "BpnExecutionEventMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "bpnExecutionEventMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnExecutionEventMessageFromAmelia",
                            "originalRef": "BpnExecutionEventMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnExecutionEventMessageFromAmelia",
                            "originalRef": "BpnExecutionEventMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/cardMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "CardMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "cardMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/CardMessageFromAmelia",
                            "originalRef": "CardMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/CardMessageFromAmelia",
                            "originalRef": "CardMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/conversationClosedMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "ConversationClosedMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "conversationClosedMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationClosedMessageFromAmelia",
                            "originalRef": "ConversationClosedMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationClosedMessageFromAmelia",
                            "originalRef": "ConversationClosedMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/conversationSuspendedMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "ConversationSuspendedMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "conversationSuspendedMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationSuspendedMessageFromAmelia",
                            "originalRef": "ConversationSuspendedMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationSuspendedMessageFromAmelia",
                            "originalRef": "ConversationSuspendedMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/customAttributesMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "CustomAttributesMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "customAttributesMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/CustomAttributesMessageFromAmelia",
                            "originalRef": "CustomAttributesMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/CustomAttributesMessageFromAmelia",
                            "originalRef": "CustomAttributesMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/domainChangeMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "DomainChangeMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "domainChangeMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/DomainChangeMessageFromAmelia",
                            "originalRef": "DomainChangeMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/DomainChangeMessageFromAmelia",
                            "originalRef": "DomainChangeMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/echoMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "EchoMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "echoMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/EchoMessageFromAmelia",
                            "originalRef": "EchoMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/EchoMessageFromAmelia",
                            "originalRef": "EchoMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/escalationAnnotationMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "EscalationAnnotationMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "escalationAnnotationMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/EscalationAnnotationMessageFromAmelia",
                            "originalRef": "EscalationAnnotationMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/EscalationAnnotationMessageFromAmelia",
                            "originalRef": "EscalationAnnotationMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/escalationStartedMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "EscalationStartedMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "escalationStartedMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/EscalationStartedMessageFromAmelia",
                            "originalRef": "EscalationStartedMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/EscalationStartedMessageFromAmelia",
                            "originalRef": "EscalationStartedMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/formInputMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "FormInputMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "formInputMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/FormInputMessageFromAmelia",
                            "originalRef": "FormInputMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/FormInputMessageFromAmelia",
                            "originalRef": "FormInputMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/integrationMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "IntegrationMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "integrationMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/IntegrationMessageFromAmelia",
                            "originalRef": "IntegrationMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntegrationMessageFromAmelia",
                            "originalRef": "IntegrationMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/joinConversationRequestMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "JoinConversationRequestMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "joinConversationRequestMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/JoinConversationRequestMessageFromAmelia",
                            "originalRef": "JoinConversationRequestMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/JoinConversationRequestMessageFromAmelia",
                            "originalRef": "JoinConversationRequestMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/nluSummaryMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "NluSummaryMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "nluSummaryMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/NluSummaryMessageFromAmelia",
                            "originalRef": "NluSummaryMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/NluSummaryMessageFromAmelia",
                            "originalRef": "NluSummaryMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/npsCollectionMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "NpsCollectionMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "npsCollectionMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/NpsCollectionMessageFromAmelia",
                            "originalRef": "NpsCollectionMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/NpsCollectionMessageFromAmelia",
                            "originalRef": "NpsCollectionMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/oneRpaBotExecutionMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "OneRpaBotExecutionMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "oneRpaBotExecutionMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/OneRpaBotExecutionMessageFromAmelia",
                            "originalRef": "OneRpaBotExecutionMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/OneRpaBotExecutionMessageFromAmelia",
                            "originalRef": "OneRpaBotExecutionMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/predictionScoreMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "PredictionScoreMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "predictionScoreMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/PredictionScoreMessageFromAmelia",
                            "originalRef": "PredictionScoreMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/PredictionScoreMessageFromAmelia",
                            "originalRef": "PredictionScoreMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/presentMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "PresentMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "presentMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/PresentMessageFromAmelia",
                            "originalRef": "PresentMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/PresentMessageFromAmelia",
                            "originalRef": "PresentMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/recommendationsMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "RecommendationsMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "recommendationsMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/RecommendationsMessageFromAmelia",
                            "originalRef": "RecommendationsMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/RecommendationsMessageFromAmelia",
                            "originalRef": "RecommendationsMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/replayFinishedMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "ReplayFinishedMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "replayFinishedMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ReplayFinishedMessageFromAmelia",
                            "originalRef": "ReplayFinishedMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/ReplayFinishedMessageFromAmelia",
                            "originalRef": "ReplayFinishedMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/requestMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "RequestMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "requestMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/RequestMessageFromAmelia",
                            "originalRef": "RequestMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/RequestMessageFromAmelia",
                            "originalRef": "RequestMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/routeLinkedMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "RouteLinkedMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "routeLinkedMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/RouteLinkedMessageFromAmelia",
                            "originalRef": "RouteLinkedMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/RouteLinkedMessageFromAmelia",
                            "originalRef": "RouteLinkedMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/semNetFaqDetailMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "SemNetFaqDetailMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "semNetFaqDetailMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/SemNetFaqDetailMessageFromAmelia",
                            "originalRef": "SemNetFaqDetailMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/SemNetFaqDetailMessageFromAmelia",
                            "originalRef": "SemNetFaqDetailMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/sessionClosedMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "SessionClosedMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "sessionClosedMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionClosedMessageFromAmelia",
                            "originalRef": "SessionClosedMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionClosedMessageFromAmelia",
                            "originalRef": "SessionClosedMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/systemErrorMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "SystemErrorMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "systemErrorMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/SystemErrorMessageFromAmelia",
                            "originalRef": "SystemErrorMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/SystemErrorMessageFromAmelia",
                            "originalRef": "SystemErrorMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/textMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "TextMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "textMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/TextMessageFromAmelia",
                            "originalRef": "TextMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/TextMessageFromAmelia",
                            "originalRef": "TextMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/uploadCompletionMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "UploadCompletionMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "uploadCompletionMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/UploadCompletionMessageFromAmelia",
                            "originalRef": "UploadCompletionMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/UploadCompletionMessageFromAmelia",
                            "originalRef": "UploadCompletionMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/userActivityMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "UserActivityMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "userActivityMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/UserActivityMessageFromAmelia",
                            "originalRef": "UserActivityMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserActivityMessageFromAmelia",
                            "originalRef": "UserActivityMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/userInformationMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "UserInformationMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "userInformationMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/UserInformationMessageFromAmelia",
                            "originalRef": "UserInformationMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserInformationMessageFromAmelia",
                            "originalRef": "UserInformationMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/userTaskHistoryMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "UserTaskHistoryMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "userTaskHistoryMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/UserTaskHistoryMessageFromAmelia",
                            "originalRef": "UserTaskHistoryMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserTaskHistoryMessageFromAmelia",
                            "originalRef": "UserTaskHistoryMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/bpn/execution/event/userTransactionHistoryMessageFromAmelia": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "UserTransactionHistoryMessageFromAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "userTransactionHistoryMessageFromAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/UserTransactionHistoryMessageFromAmelia",
                            "originalRef": "UserTransactionHistoryMessageFromAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserTransactionHistoryMessageFromAmelia",
                            "originalRef": "UserTransactionHistoryMessageFromAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/processAbortedEvent": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "ProcessAbortedEvent",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "processAbortedEventUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ProcessAbortedEvent",
                            "originalRef": "ProcessAbortedEvent"
                        },
                        "schema": {
                            "$ref": "#/definitions/ProcessAbortedEvent",
                            "originalRef": "ProcessAbortedEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/processCompletedEvent": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "ProcessCompletedEvent",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "processCompletedEventUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ProcessCompletedEvent",
                            "originalRef": "ProcessCompletedEvent"
                        },
                        "schema": {
                            "$ref": "#/definitions/ProcessCompletedEvent",
                            "originalRef": "ProcessCompletedEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/processResumedEvent": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "ProcessResumedEvent",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "processResumedEventUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ProcessResumedEvent",
                            "originalRef": "ProcessResumedEvent"
                        },
                        "schema": {
                            "$ref": "#/definitions/ProcessResumedEvent",
                            "originalRef": "ProcessResumedEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/processStartedEvent": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "ProcessStartedEvent",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "processStartedEventUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ProcessStartedEvent",
                            "originalRef": "ProcessStartedEvent"
                        },
                        "schema": {
                            "$ref": "#/definitions/ProcessStartedEvent",
                            "originalRef": "ProcessStartedEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/processSuspendedEvent": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "ProcessSuspendedEvent",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "processSuspendedEventUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ProcessSuspendedEvent",
                            "originalRef": "ProcessSuspendedEvent"
                        },
                        "schema": {
                            "$ref": "#/definitions/ProcessSuspendedEvent",
                            "originalRef": "ProcessSuspendedEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/taskCompletedEvent": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "TaskCompletedEvent",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "taskCompletedEventUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/TaskCompletedEvent",
                            "originalRef": "TaskCompletedEvent"
                        },
                        "schema": {
                            "$ref": "#/definitions/TaskCompletedEvent",
                            "originalRef": "TaskCompletedEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/taskCustomPropertyEvent": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "TaskCustomPropertyEvent",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "taskCustomPropertyEventUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/TaskCustomPropertyEvent",
                            "originalRef": "TaskCustomPropertyEvent"
                        },
                        "schema": {
                            "$ref": "#/definitions/TaskCustomPropertyEvent",
                            "originalRef": "TaskCustomPropertyEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/taskSegmentCompletedEvent": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "TaskSegmentCompletedEvent",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "taskSegmentCompletedEventUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/TaskSegmentCompletedEvent",
                            "originalRef": "TaskSegmentCompletedEvent"
                        },
                        "schema": {
                            "$ref": "#/definitions/TaskSegmentCompletedEvent",
                            "originalRef": "TaskSegmentCompletedEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/from/taskStartedEvent": {
            "get": {
                "tags": [
                    "messages-from-amelia-api"
                ],
                "summary": "TaskStartedEvent",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "taskStartedEventUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/TaskStartedEvent",
                            "originalRef": "TaskStartedEvent"
                        },
                        "schema": {
                            "$ref": "#/definitions/TaskStartedEvent",
                            "originalRef": "TaskStartedEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/agentImageMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "AgentImageMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "agentImageMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/AgentImageMessageToAmelia",
                            "originalRef": "AgentImageMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/AgentImageMessageToAmelia",
                            "originalRef": "AgentImageMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/agentIntegrationMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "AgentIntegrationMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "agentIntegrationMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/AgentIntegrationMessageToAmelia",
                            "originalRef": "AgentIntegrationMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/AgentIntegrationMessageToAmelia",
                            "originalRef": "AgentIntegrationMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/agentTransferMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "AgentTransferMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "agentTransferMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/AgentTransferMessageToAmelia",
                            "originalRef": "AgentTransferMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/AgentTransferMessageToAmelia",
                            "originalRef": "AgentTransferMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/bpnKickoffMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "BpnKickoffMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "bpnKickoffMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/BpnKickoffMessageToAmelia",
                            "originalRef": "BpnKickoffMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/BpnKickoffMessageToAmelia",
                            "originalRef": "BpnKickoffMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/changeUserLanguageMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "ChangeUserLanguageMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "changeUserLanguageMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ChangeUserLanguageMessageToAmelia",
                            "originalRef": "ChangeUserLanguageMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/ChangeUserLanguageMessageToAmelia",
                            "originalRef": "ChangeUserLanguageMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/conversationClosedMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "ConversationClosedMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "conversationClosedMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ConversationClosedMessageToAmelia",
                            "originalRef": "ConversationClosedMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/ConversationClosedMessageToAmelia",
                            "originalRef": "ConversationClosedMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/escalationKickoffMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "EscalationKickoffMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "escalationKickoffMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/EscalationKickoffMessageToAmelia",
                            "originalRef": "EscalationKickoffMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/EscalationKickoffMessageToAmelia",
                            "originalRef": "EscalationKickoffMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/hyperaResolutionMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "HyperaResolutionMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "hyperaResolutionMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/HyperaResolutionMessageToAmelia",
                            "originalRef": "HyperaResolutionMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/HyperaResolutionMessageToAmelia",
                            "originalRef": "HyperaResolutionMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/inboundDetailClickMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "InboundDetailClickMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "inboundDetailClickMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/InboundDetailClickMessageToAmelia",
                            "originalRef": "InboundDetailClickMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/InboundDetailClickMessageToAmelia",
                            "originalRef": "InboundDetailClickMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/intentKickoffMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "IntentKickoffMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "intentKickoffMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/IntentKickoffMessageToAmelia",
                            "originalRef": "IntentKickoffMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/IntentKickoffMessageToAmelia",
                            "originalRef": "IntentKickoffMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/linkRouteMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "LinkRouteMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "linkRouteMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/LinkRouteMessageToAmelia",
                            "originalRef": "LinkRouteMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/LinkRouteMessageToAmelia",
                            "originalRef": "LinkRouteMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/macroExecutionMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "MacroExecutionMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "macroExecutionMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/MacroExecutionMessageToAmelia",
                            "originalRef": "MacroExecutionMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/MacroExecutionMessageToAmelia",
                            "originalRef": "MacroExecutionMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/notificationEventMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "NotificationEventMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "notificationEventMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/NotificationEventMessageToAmelia",
                            "originalRef": "NotificationEventMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/NotificationEventMessageToAmelia",
                            "originalRef": "NotificationEventMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/npsCollectionMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "NpsCollectionMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "npsCollectionMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/NpsCollectionMessageToAmelia",
                            "originalRef": "NpsCollectionMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/NpsCollectionMessageToAmelia",
                            "originalRef": "NpsCollectionMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/pendingConversationStatusMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "PendingConversationStatusMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "pendingConversationStatusMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/PendingConversationStatusMessageToAmelia",
                            "originalRef": "PendingConversationStatusMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/PendingConversationStatusMessageToAmelia",
                            "originalRef": "PendingConversationStatusMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/processResumeMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "ProcessResumeMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "processResumeMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/ProcessResumeMessageToAmelia",
                            "originalRef": "ProcessResumeMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/ProcessResumeMessageToAmelia",
                            "originalRef": "ProcessResumeMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/runAutomatonMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "RunAutomatonMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "runAutomatonMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/RunAutomatonMessageToAmelia",
                            "originalRef": "RunAutomatonMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/RunAutomatonMessageToAmelia",
                            "originalRef": "RunAutomatonMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/sttNotRecognizedMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "SttNotRecognizedMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "sttNotRecognizedMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/SttNotRecognizedMessageToAmelia",
                            "originalRef": "SttNotRecognizedMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/SttNotRecognizedMessageToAmelia",
                            "originalRef": "SttNotRecognizedMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/transferToAmeliaMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "TransferToAmeliaMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "transferToAmeliaMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/TransferToAmeliaMessageToAmelia",
                            "originalRef": "TransferToAmeliaMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/TransferToAmeliaMessageToAmelia",
                            "originalRef": "TransferToAmeliaMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/unsolicitedUploadMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "UnsolicitedUploadMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "unsolicitedUploadMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/UnsolicitedUploadMessageToAmelia",
                            "originalRef": "UnsolicitedUploadMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/UnsolicitedUploadMessageToAmelia",
                            "originalRef": "UnsolicitedUploadMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/userActivityMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "UserActivityMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "userActivityMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/UserActivityMessageToAmelia",
                            "originalRef": "UserActivityMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserActivityMessageToAmelia",
                            "originalRef": "UserActivityMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/messages/to/bpn/execution/event/userUtteranceMessageToAmelia": {
            "get": {
                "tags": [
                    "messages-to-amelia-api"
                ],
                "summary": "UserUtteranceMessageToAmelia",
                "description": "Not intended to be called, but to document messages types",
                "operationId": "userUtteranceMessageToAmeliaUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "responseSchema": {
                            "$ref": "#/definitions/UserUtteranceMessageToAmelia",
                            "originalRef": "UserUtteranceMessageToAmelia"
                        },
                        "schema": {
                            "$ref": "#/definitions/UserUtteranceMessageToAmelia",
                            "originalRef": "UserUtteranceMessageToAmelia"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/push/notification/{id}": {
            "post": {
                "tags": [
                    "push-notification-api"
                ],
                "summary": "Send push notification",
                "description": "Send a notification message to a user through the specified  channel and integration id",
                "operationId": "pushNotificationToChannelUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of gateway integration to use to send the notification",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "pushRequest",
                        "description": "Message and attributes relevant the specific endpoint in the request",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PushNotificationApiRequestModel",
                            "originalRef": "PushNotificationApiRequestModel"
                        }
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The notification has been received, check the response for result status",
                        "responseSchema": {
                            "$ref": "#/definitions/PushNotificationApiResponseModel",
                            "originalRef": "PushNotificationApiResponseModel"
                        },
                        "schema": {
                            "$ref": "#/definitions/PushNotificationApiResponseModel",
                            "originalRef": "PushNotificationApiResponseModel"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "A status and message error",
                        "responseSchema": {
                            "$ref": "#/definitions/BadRequestResponse",
                            "originalRef": "BadRequestResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/BadRequestResponse",
                            "originalRef": "BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "A status and message error",
                        "responseSchema": {
                            "$ref": "#/definitions/UnauthorizedResponse",
                            "originalRef": "UnauthorizedResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/UnauthorizedResponse",
                            "originalRef": "UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically that the session does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/supervisor/agents": {
            "get": {
                "tags": [
                    "supervisor-api"
                ],
                "summary": "Get AgentSummary",
                "description": "Obtains the list of AgentSummaries for an escalation queue or list of escalation queues",
                "operationId": "getAgentSummaryUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "queueIds",
                        "in": "query",
                        "description": "The primary keys of escalation queues",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "onlineOnly",
                        "in": "query",
                        "description": "True to restrict to agents currently online",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of ActiveEscalationsSummary",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActiveEscalationsSummary",
                                "originalRef": "ActiveEscalationsSummary"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActiveEscalationsSummary",
                                "originalRef": "ActiveEscalationsSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/supervisor/escalations": {
            "get": {
                "tags": [
                    "supervisor-api"
                ],
                "summary": "Get ActiveEscalationsSummary",
                "description": "Obtains the list of ActiveEscalation Summaries for display, for the instance or for a specific domain",
                "operationId": "getActiveEscalationsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of ActiveEscalationsSummary",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActiveEscalationsSummary",
                                "originalRef": "ActiveEscalationsSummary"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActiveEscalationsSummary",
                                "originalRef": "ActiveEscalationsSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/supervisor/hourly": {
            "get": {
                "tags": [
                    "supervisor-api"
                ],
                "summary": "Get HourlyConversationSummary",
                "description": "Obtains the list of HourlyConversation Summaries for display, for the instance or for a specific domain",
                "operationId": "getHourlySummariesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of HourlyConversationSummary",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HourlyConversationSummary",
                                "originalRef": "HourlyConversationSummary"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HourlyConversationSummary",
                                "originalRef": "HourlyConversationSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/v1/supervisor/queues": {
            "get": {
                "tags": [
                    "supervisor-api"
                ],
                "summary": "Get QueueSummaries",
                "description": "Obtains the list of Queue Summaries for display, for the instance or for a specific domain",
                "operationId": "getQueueSummariesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json;charset=UTF-8"
                ],
                "parameters": [
                    {
                        "name": "domainId",
                        "in": "query",
                        "description": "The primary key of a domain",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Amelia-Rest-Token",
                        "in": "header",
                        "description": "The temporary access token provided upon initial login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of QueueSummaries",
                        "responseSchema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QueueSummary",
                                "originalRef": "QueueSummary"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QueueSummary",
                                "originalRef": "QueueSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "A status and message error, with optional other fields",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "A status and message error, typically when the session or conversation does not exist",
                        "responseSchema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/SessionGoneResponse",
                            "originalRef": "SessionGoneResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "responseSchema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        },
                        "schema": {
                            "$ref": "#/definitions/StatusAndMessageResponse",
                            "originalRef": "StatusAndMessageResponse"
                        }
                    }
                },
                "deprecated": false
            }
        }
    },
    "definitions": {
        "ActiveEscalationsSummary": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of active escalations"
                },
                "queueCode": {
                    "type": "string",
                    "description": "The code of the queue in Amelia, or __total for a summary of all in this request"
                },
                "queueName": {
                    "type": "string",
                    "description": "The code of the queue in Amelia, or Total for a summary of all in this request"
                },
                "slaCritical": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of escalations exceeding their sla critical threshold"
                },
                "slaOk": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of escalations within their sla time"
                },
                "slaWarn": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of escalations exceeding their sla warning threshold, but not their critical threshold"
                }
            }
        },
        "AdminAuthenticationSystemModel": {
            "type": "object",
            "required": [
                "code",
                "id",
                "name",
                "type"
            ],
            "properties": {
                "addDefaultVirtualHost": {
                    "type": "boolean",
                    "description": "if true, the default virtual host will be added to the virtualHostIds list, regardless of what is submitted.  Defaults to true"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Authentication System"
                },
                "ldapUserEmailAttribute": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Authentication System"
                },
                "code": {
                    "type": "string",
                    "description": "The code of the Authentication System"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Authentication System"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Authentication System, which in turn determines the properties needed",
                    "enum": [
                        "INTERNAL",
                        "FACIAL_RECOGNITION",
                        "LDAP",
                        "AD",
                        "APOLLO",
                        "DENY_ALL",
                        "SAML2",
                        "WS_FEDERATION",
                        "CUSTOM"
                    ]
                },
                "disabled": {
                    "type": "boolean",
                    "description": "true if this Authentication System is disabled, false if is is active"
                },
                "immediate": {
                    "type": "boolean",
                    "description": "true if this Authentication System enables an immediate action, such as a redirect, without any user intervention, false otherwise"
                },
                "virtualHostIds": {
                    "type": "array",
                    "description": "a set of primary keys of virtualHosts in which this authentication system will participate",
                    "items": {
                        "type": "string"
                    }
                },
                "displayOnLoginWindow": {
                    "type": "boolean",
                    "description": "true if the Amelia configuration prefers it displayed in login widgets, false otherwise"
                },
                "loginWindowOrder": {
                    "type": "integer",
                    "format": "int32",
                    "description": "If displaying in a login widget with other Authentication Systems, the 0-based ordering"
                },
                "adDomain": {
                    "type": "string",
                    "description": "AD Type: The active directory domain to use"
                },
                "customProperties": {
                    "type": "array",
                    "description": "Custom Type: A list of properties the Authentication System uses",
                    "items": {
                        "$ref": "#/definitions/AuthenticationSystemCustomPropertyModel",
                        "originalRef": "AuthenticationSystemCustomPropertyModel"
                    }
                },
                "customProviderClass": {
                    "type": "string",
                    "description": "Custom Type: The fully qualified class name of the implementation of this Authentication System"
                },
                "ldapUserDnPatterns": {
                    "type": "string",
                    "description": "LDAP Type: userDn patterns in the Directory"
                },
                "ldapUserSearchBase": {
                    "type": "string",
                    "description": "LDAP Type: search base in the Directory"
                },
                "ldapUserSearchFilter": {
                    "type": "string",
                    "description": "LDAP Type: search filter in the Directory"
                },
                "ldapUserFirstNameAttribute": {
                    "type": "string",
                    "description": "LDAP Type: the LDAP attribute that should correspond to Amelia first name"
                },
                "ldapUserLastNameAttribute": {
                    "type": "string",
                    "description": "LDAP Type: the LDAP attribute that should correspond to Amelia last name"
                },
                "ldapContextManagerDn": {
                    "type": "string",
                    "description": "LDAP Type: identity of the user querying the LDAP server"
                },
                "ldapContextManagerPassword": {
                    "type": "string",
                    "description": "LDAP Type: password of the user querying the LDAP server"
                },
                "ldapContextRoot": {
                    "type": "string",
                    "description": "LDAP Type: optional root suffix"
                },
                "ldapContextUrl": {
                    "type": "string",
                    "description": "LDAP Type: ldap url"
                },
                "ldapAutoCreate": {
                    "type": "boolean",
                    "description": "LDAP Type: true to auto-create users in Amelia, false otherwise, which will require manual creation before that user may log in"
                },
                "ldapDefaultUserGroups": {
                    "type": "string",
                    "description": "LDAP Type: comma separated list of Amelia groups to which to add created users"
                },
                "ldapDefaultUserGroupScript": {
                    "type": "string",
                    "description": "LDAP Type: a groovy script calculating Amelia groups in which to put user, will suppress ldapDefaultUserGroups if it returns any"
                },
                "ldapGroupSync": {
                    "type": "string",
                    "description": "LDAP Type: a comma separated list of groups to sync the user's membership; ignored if we have a ldapDefaultUserGroupScript"
                },
                "ldapPrimaryDomainCode": {
                    "type": "string",
                    "description": "LDAP Type: the code of a the domain with which to associate users"
                },
                "ldapPrimaryDomainScript": {
                    "type": "string",
                    "description": "LDAP Type: a script calculating the code of a the domain with which to associate users If present and successful in finding a domain, ldapPrimaryDomainCode will be ignored"
                },
                "ldapAlwaysChangeDomain": {
                    "type": "boolean",
                    "description": "LDAP Type: true to change the domain if necessary on each login, false to set domain on creation only"
                },
                "samlSpNoAlias": {
                    "type": "boolean",
                    "description": "SAML2 Type: true to alias the entry point by code, false otherwise"
                },
                "samlSignMetadata": {
                    "type": "boolean",
                    "description": "SAML2 Type: true if the metadata will be signed by a certificate, false otherwise"
                },
                "samlMetadataTrustCheck": {
                    "type": "boolean",
                    "description": "SAML2 Type: true to force a check of metadata, false otherwise"
                },
                "samlMetadataRequireSignature": {
                    "type": "boolean",
                    "description": "SAML2 Type: true if metadata requires a signature, false otherwise"
                },
                "samlMetadataProviderType": {
                    "type": "string",
                    "description": "SAML2 Type: the type of metadata for this provider",
                    "enum": [
                        "HTTP",
                        "FILE"
                    ]
                },
                "samlUserGroup": {
                    "type": "string",
                    "description": "SAML2 Type: name of a user group to which to assign users"
                },
                "samlUserGroupScript": {
                    "type": "string",
                    "description": "SAML2 Type: a script by which to calculate a group to assign users; if present and successful,  samlUserGroup is ignored"
                },
                "samlAlwaysChangeDomain": {
                    "type": "boolean",
                    "description": "SAML2 Type: true to change the domain of the user if needed on each login, false to change the domain only on creation"
                },
                "samlDefaultDomainScript": {
                    "type": "string",
                    "description": "SAML2 Type: a script by which to calculate a domain to assign users; if none found, domain will  be taken from first non-global group of the user"
                },
                "samlIdpMetadataUrl": {
                    "type": "string",
                    "description": "SAML2 Type: if http metadata, the url"
                },
                "samlIdpMetadataXml": {
                    "type": "string",
                    "description": "SAML2 Type: if file metadata, the metadata xml"
                },
                "samlIdpSslCertificate": {
                    "type": "string",
                    "description": "SAML2 Type: the SSL certificate of the provider"
                },
                "samlSpBaseUrl": {
                    "type": "string",
                    "description": "SAML2 Type: the base url of the metadata to generate"
                },
                "samlSpEntityId": {
                    "type": "string",
                    "description": "SAML2 Type: the entity id of the metadata to generate"
                },
                "samlSpSslCertificate": {
                    "type": "string",
                    "description": "SAML2 Type: ssl certificate to add to the metadata upon generation"
                },
                "samlSpSslPrivateKey": {
                    "type": "string",
                    "description": "SAML2 Type: private key to add to the metadata upon generation"
                },
                "samlSpSslKeyPassword": {
                    "type": "string",
                    "description": "SAML2 Type: private key password to add to the metadata upon generation"
                },
                "samlEmailProperty": {
                    "type": "string",
                    "description": "SAML2 Type: the SAML user property corresponding to Amelia email"
                },
                "samlLastNameProperty": {
                    "type": "string",
                    "description": "SAML2 Type: the SAML user property corresponding to Amelia last name"
                },
                "samlFirstNameProperty": {
                    "type": "string",
                    "description": "SAML2 Type: the SAML user property corresponding to Amelia first name"
                },
                "samlExternalUidProperty": {
                    "type": "string",
                    "description": "SAML2 Type: the SAML user property corresponding to Amelia externalUid property"
                },
                "samlUseExternalId": {
                    "type": "string",
                    "description": "SAML2 Type: true to look up the user by externalId when loading the user from SAML, false to use email."
                },
                "samlAutoCreate": {
                    "type": "boolean",
                    "description": "SAML2 Type: true to auto-create users when needed, false to require manual creation"
                },
                "samlLoginRedirects": {
                    "type": "string",
                    "description": "SAML2 Type: JSON defining redirect URLs according to the login code and mode"
                },
                "wsFederationEmailProperty": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: The WS federation property to use for email in Amelia"
                },
                "wsFederationLastNameProperty": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: The WS federation property to use for last name in Amelia"
                },
                "wsFederationFirstNameProperty": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: The WS federation property to use for first name in Amelia"
                },
                "wsFederationStsUrl": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: URL of the STS provider"
                },
                "wsFederationLogoutUrl": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: The federation logout url"
                },
                "wsFederationReplyUrl": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: URL at which to receive replies from the STS service"
                },
                "wsFederationStsFriendlyName": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: A descriptive name of the STS provider"
                },
                "wsFederationThumbprint": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: Thumbprint for the STS certificate"
                },
                "wsFederationRealm": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: Realm of the STS provider"
                },
                "wsFederationTrustedIssuers": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: Trusted issues of STS credentials"
                },
                "wsFederationAudienceUris": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: List of uris representing valid audiences"
                },
                "wsFederationAutoCreate": {
                    "type": "boolean",
                    "description": "WS_FEDERATION Type: true to create users automatically when needed, false to require manual creation"
                },
                "wsFederationDefaultUserGroups": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: Comma delimited list of user groups with which to associate users"
                },
                "wsFederationPrimaryDomainCode": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: The code of a domain with which to associate users"
                },
                "wsFederationLoginRedirects": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: JSON defining redirect URLs according to the login code and mode"
                },
                "apolloApiUrlBase": {
                    "type": "string",
                    "description": "APOLLO Type: The api URL of the Apollo instance"
                },
                "apolloPublicUrl": {
                    "type": "string",
                    "description": "APOLLO Type: The public URL of the Apollo instance"
                },
                "apolloClientDomainMap": {
                    "type": "string",
                    "example": "2f904cc2-dbad-4087-ba96-ece874ccea35=b5af2a72-6cec-41a6-85c7-a1dd4d894e64",
                    "description": "APOLLO Type: a comma delimited list of client=domain UUIDs"
                },
                "apolloGroupMap": {
                    "type": "string",
                    "description": "APOLLO Type: list of group names with which to associate users"
                },
                "apolloAutoCreate": {
                    "type": "boolean",
                    "description": "APOLLO Type: true to auto-create users in Amelia when necessary, false to require manual creation"
                },
                "apolloAmeliaUserEmail": {
                    "type": "string",
                    "description": "APOLLO Type: The Apollo user email to use in querying"
                },
                "apolloAmeliaUserPassword": {
                    "type": "string",
                    "description": "APOLLO Type: The Apollo user password to use in querying"
                }
            },
            "description": "A convenience version of AdminDomainModel for use in updating, to include the optional addDefaultVirtualHost properties"
        },
        "AdminAvatarModel": {
            "type": "object",
            "required": [
                "avatarType",
                "code",
                "id",
                "name",
                "settings"
            ],
            "properties": {
                "avatarType": {
                    "type": "string",
                    "description": "The type of the avatar",
                    "enum": [
                        "Quantum",
                        "Uneeq"
                    ]
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The creation date of this model"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The creator of this model"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the avatar"
                },
                "images": {
                    "type": "object",
                    "description": "A map of images, with the key being the image type and the value being the current image, pending image, ",
                    "additionalProperties": {
                        "$ref": "#/definitions/AvatarImageModel",
                        "originalRef": "AvatarImageModel"
                    }
                },
                "languages": {
                    "type": "object",
                    "description": "A map of supported voices, with the key being the language code and the value being the primary key of an avatar voice.  Ony valid for Quantum avatars",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date this model was last modified"
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "The last user to modify this model"
                },
                "settings": {
                    "type": "array",
                    "description": "A list of name/value pairs; not all settings will be valid for all avatar types",
                    "items": {
                        "$ref": "#/definitions/AvatarSettingModel",
                        "originalRef": "AvatarSettingModel"
                    }
                },
                "tings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AvatarSettingModel",
                        "originalRef": "AvatarSettingModel"
                    }
                },
                "code": {
                    "type": "string",
                    "description": "The unique code of the avatar"
                },
                "name": {
                    "type": "string",
                    "description": "The human readable name of the avatar"
                }
            }
        },
        "AdminAvatarVoiceModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The code of the voice, as noted by the provider"
                },
                "custom": {
                    "type": "string",
                    "description": "A custom definition for the voice, which can override the code/gender/index combination"
                },
                "gender": {
                    "type": "string",
                    "description": "The gender of the voice, as noted by the provider"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the voice in Amelia"
                },
                "index": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The index of the voice, as noted by the provider"
                },
                "language": {
                    "type": "string",
                    "description": "The Amelia language code this voice supports"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the avatar in Amelia"
                },
                "provider": {
                    "type": "string",
                    "description": "The provider of this voice"
                }
            }
        },
        "AdminDomainListModel": {
            "type": "object",
            "required": [
                "code",
                "enabled",
                "id",
                "name",
                "parentCode"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique id of the domain"
                },
                "parentCode": {
                    "type": "string",
                    "description": "The code if this domain's parent, if any",
                    "readOnly": true
                },
                "virtualHostIds": {
                    "type": "array",
                    "description": "a set of primary keys of virtualHosts in which this domain will participate",
                    "items": {
                        "type": "string"
                    }
                },
                "code": {
                    "type": "string",
                    "description": "The unique code of the domain"
                },
                "name": {
                    "type": "string",
                    "description": "The human readable name of the domain"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the domain is currently active for use"
                }
            }
        },
        "AdminDomainModel": {
            "type": "object",
            "required": [
                "code",
                "enabled",
                "id",
                "name",
                "parentCode"
            ],
            "properties": {
                "agentTranslationEnabled": {
                    "type": "boolean",
                    "description": "Whether or not this conversations will attempt to auto-translate agent messages not in the domain's native language"
                },
                "aiOpsClientCode": {
                    "type": "string",
                    "description": "AI Ops client code associated with this domain"
                },
                "allowAnonymousUsers": {
                    "type": "boolean",
                    "description": "Whether or not this domain allows anonymous users to participate in conversations"
                },
                "allowAnonymousView": {
                    "type": "boolean",
                    "description": "Whether this domain is visible to anonymous users.  May still require them to be authenticatedto have an actual conversation"
                },
                "allowConversations": {
                    "type": "boolean",
                    "description": "Whether or not this domain supports conversations"
                },
                "allowNpsCollection": {
                    "type": "boolean",
                    "description": "Allow Amelia to take feedback from user when a bpn context ends, defaults to true"
                },
                "allowSwitchIn": {
                    "type": "boolean",
                    "description": "If true, this domain will allow user to switch to domain during conversation context switching"
                },
                "allowSwitchOut": {
                    "type": "boolean",
                    "description": "If true, this domain will allow user to switch out of domain during conversation context switching"
                },
                "ameliaUserId": {
                    "type": "string",
                    "description": "The unique identifier of the user of this domain, if any"
                },
                "anonymizeTranscriptUser": {
                    "type": "boolean",
                    "description": "Whether to anonymize transcripts"
                },
                "anonymousFirstNameOverride": {
                    "type": "string"
                },
                "anonymousLastNameOverride": {
                    "type": "string"
                },
                "anonymousUserCreationDomain": {
                    "type": "boolean"
                },
                "anonymousUserGroupId": {
                    "type": "string",
                    "description": "Anonymous users will receive the authorities on this domain from this group if specified"
                },
                "authenticationPolicyId": {
                    "type": "string",
                    "description": "The UUID of the authenticationPolicy that governs this domain"
                },
                "autoCreateUserGroupId": {
                    "type": "string"
                },
                "avatarId": {
                    "type": "string",
                    "description": "The primary key of an avatar of the same type as specified in avatarType"
                },
                "avatarType": {
                    "type": "string",
                    "description": "A valid avatar setting for this domain.",
                    "enum": [
                        "None",
                        "Uneeq",
                        "Quantum"
                    ]
                },
                "avatarVoice": {
                    "type": "string",
                    "description": "The default voice used when the avatar speaks in this domain"
                },
                "conversationSummaryCleanupDaysRetained": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of days of data to retain in the database after the cleanup summary job completes"
                },
                "customTranslationSettings": {
                    "type": "array",
                    "description": "Optional custom translation settings for this domain",
                    "items": {
                        "$ref": "#/definitions/TranslationSettingModel",
                        "originalRef": "TranslationSettingModel"
                    }
                },
                "defaultEscalationQueueId": {
                    "type": "string",
                    "description": "The UUID of an escalation queue to handle conversation escalations in this domain"
                },
                "domainBeanMappings": {
                    "type": "array",
                    "description": "A list of mappings, from one bean to another.  Each key needs to be unique",
                    "items": {
                        "$ref": "#/definitions/DomainBeanMappingModel",
                        "originalRef": "DomainBeanMappingModel"
                    }
                },
                "domainTemplateCode": {
                    "type": "string",
                    "description": "Template assigned while creating a Domain"
                },
                "ftHeaderImageId": {
                    "type": "string",
                    "description": "Face time header id"
                },
                "greetingBpnId": {
                    "type": "string",
                    "description": "If configured, the BPN to automatically run at the start of a conversation in this domain"
                },
                "greetingGoalId": {
                    "type": "string",
                    "description": "If configured, the intent to automatically run at the start of a conversation in this domain"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the domain"
                },
                "imageEnabled": {
                    "type": "boolean"
                },
                "inboundContentMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContentMaskModel",
                        "originalRef": "ContentMaskModel"
                    }
                },
                "integrationApiKey": {
                    "type": "string",
                    "description": "An api key any integration host must possess to run integrations for this domain.  If empty, domain will inherit from its parent"
                },
                "languageDetectionFilters": {
                    "type": "array",
                    "description": "The set of languageDetection filters for this domain",
                    "items": {
                        "$ref": "#/definitions/DomainLanguageDetectionModel",
                        "originalRef": "DomainLanguageDetectionModel"
                    }
                },
                "localeTag": {
                    "type": "string",
                    "description": "The language and locale of the domain"
                },
                "maintainDetectedLanguage": {
                    "type": "boolean",
                    "description": "Whether when translation is detected if the detected language should persist for future messages in the conversation"
                },
                "oneRpaInstanceId": {
                    "type": "string",
                    "description": "UUID of the OneRpa Instance connected to this domain"
                },
                "oneStoreInstanceId": {
                    "type": "string",
                    "description": "UUID of the 1Store instance connected to this domain"
                },
                "orchestratorConfigId": {
                    "type": "string",
                    "description": "Orchestrator configuration Id associated to Domain"
                },
                "orchestratorUserId": {
                    "type": "string",
                    "description": "User Id used for all operation in Amelia Orchestrator"
                },
                "parentCode": {
                    "type": "string",
                    "description": "The code if this domain's parent, if any",
                    "readOnly": true
                },
                "parentId": {
                    "type": "string",
                    "description": "The unique identifier of the parent domain, if any"
                },
                "preCloseBpnId": {
                    "type": "string",
                    "description": "If configured, the BPN to run right before a conversation is closed"
                },
                "preCloseSurveyBpnId": {
                    "type": "string",
                    "description": "If configured, a survey BPN to run right before a conversation is closed, before pre-close BPN"
                },
                "preEscalationBpnId": {
                    "type": "string",
                    "description": "If configured, the BPN to run when a conversation is escalated.  Can be used to gather other information from the user or even prevent escalation"
                },
                "runPreEscalationBpnOnTransfer": {
                    "type": "boolean"
                },
                "runTheWorkflowEnabled": {
                    "type": "boolean",
                    "description": "Whether to allow 'run the workflow' to kickoff BPNs"
                },
                "settings": {
                    "type": "array",
                    "description": "Advanced domain settings",
                    "items": {
                        "$ref": "#/definitions/DomainSettingModel",
                        "originalRef": "DomainSettingModel"
                    }
                },
                "stickyTranslationEnabled": {
                    "type": "boolean",
                    "description": "Whether or not this conversations translation is set to sticky translation. When this is set to true, translation will use the sticky language for translation rather than auto-detection."
                },
                "stickyTranslationLanguage": {
                    "type": "string",
                    "description": "When stick translation is enabled, this is the language the conversation will be translated to and from."
                },
                "subsystemResponderIds": {
                    "type": "array",
                    "description": "The UUID of subsystemResponders set to run on this domain",
                    "items": {
                        "type": "string"
                    }
                },
                "timeZoneId": {
                    "type": "string",
                    "description": "The id of the default time zone of this domain"
                },
                "transcriptContentMasks": {
                    "type": "array",
                    "description": "The content masks used to mask sensitive information in the conversation transcripts export",
                    "items": {
                        "$ref": "#/definitions/ContentMaskModel",
                        "originalRef": "ContentMaskModel"
                    }
                },
                "uneeqEnabled": {
                    "type": "boolean",
                    "description": "Deprecated.  Kept only for backwards compatibility.  See avatarType and avatarId"
                },
                "uneeqLanguageSource": {
                    "type": "string",
                    "description": "The name of a configured uneeq language source for a domain. If null or empty, will use the default uneeq language source for this instance."
                },
                "userTranslationEnabled": {
                    "type": "boolean",
                    "description": "Whether or not this conversations will attempt to auto-translate user messages not in the domain's native language"
                },
                "version": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                },
                "virtualHostIds": {
                    "type": "array",
                    "description": "a set of primary keys of virtualHosts in which this domain will participate",
                    "items": {
                        "type": "string"
                    }
                },
                "webGlEnabled": {
                    "type": "boolean",
                    "description": "Deprecated.  Kept only for backwards compatibility.  See avatarType and avatarId"
                },
                "webPlayerEnabled": {
                    "type": "boolean"
                },
                "code": {
                    "type": "string",
                    "description": "The unique code of the domain"
                },
                "name": {
                    "type": "string",
                    "description": "The human readable name of the domain"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the domain is currently active for use"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "A flag suggesting it not display in UI widgets"
                }
            }
        },
        "AdminUserListModel": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the user"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user"
                },
                "primaryDomain": {
                    "type": "string",
                    "description": "The primary domain name of the user"
                }
            }
        },
        "AdminUserModel": {
            "type": "object",
            "required": [
                "availability",
                "domainId",
                "email",
                "enabled",
                "expired",
                "firstName",
                "id",
                "locale",
                "locked",
                "timeZone"
            ],
            "properties": {
                "attributes": {
                    "type": "array",
                    "description": "The attributes of the user",
                    "items": {
                        "$ref": "#/definitions/UserAttributeModel",
                        "originalRef": "UserAttributeModel"
                    }
                },
                "authenticationPolicyId": {
                    "type": "string",
                    "description": "The auth policy for user"
                },
                "availability": {
                    "type": "string",
                    "description": "The availability of the user"
                },
                "changePassword": {
                    "type": "boolean",
                    "description": "Flag indicating request is to change password"
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary domain id of the user"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the user is enabled"
                },
                "excludeFromMetrics": {
                    "type": "boolean",
                    "description": "Whether the user should be excluded from Metrics, defaults to false"
                },
                "expired": {
                    "type": "boolean",
                    "description": "Whether the user is expired"
                },
                "externalUid": {
                    "type": "string",
                    "description": "The id of the User in an external system other than Amelia"
                },
                "firstName": {
                    "type": "string",
                    "description": "The first name of the user"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the user"
                },
                "lastFailedLogin": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date of last failed login, or null",
                    "readOnly": true
                },
                "lastLogin": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date of last successful login, or null if none",
                    "readOnly": true
                },
                "lastName": {
                    "type": "string",
                    "description": "The last name of the user"
                },
                "locale": {
                    "type": "string",
                    "description": "The locale of the user"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Whether the user is locked"
                },
                "maxAgentActiveChats": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The max concurrent chats if user is an agent"
                },
                "memberGroups": {
                    "type": "array",
                    "description": "Groups the user is a member of",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "newPassword": {
                    "type": "string",
                    "description": "New password"
                },
                "passwordChangeAllowed": {
                    "type": "boolean",
                    "description": "Whether the user can change password",
                    "readOnly": true
                },
                "timeZone": {
                    "type": "string",
                    "description": "The timezone of the user"
                }
            }
        },
        "AffectedResourceDescription": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The main description configured for this resource"
                },
                "messages": {
                    "type": "array",
                    "description": "The list of messages to accompany this resource and violation, if any",
                    "items": {
                        "type": "string"
                    }
                },
                "postDescription": {
                    "type": "string",
                    "description": "Any suffix to the main description configured for this resource"
                },
                "preDescription": {
                    "type": "string",
                    "description": "Any prefix to the main description configured for this resource"
                }
            },
            "description": "A description of a resource in violation"
        },
        "AffectedResourceInfo": {
            "type": "object",
            "required": [
                "id",
                "name",
                "status"
            ],
            "properties": {
                "description": {
                    "description": "The detailed description of the violating resource",
                    "$ref": "#/definitions/AffectedResourceDescription",
                    "originalRef": "AffectedResourceDescription"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the violating resource"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the violating resource"
                },
                "status": {
                    "type": "string",
                    "description": "The status code of the violation"
                },
                "type": {
                    "type": "string",
                    "description": "The name of the violating resource"
                }
            },
            "description": "A resource in violation of a BPN validation"
        },
        "AgentImageMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                },
                "uploadedCmObjectMetadataId": {
                    "type": "string",
                    "description": "The primary key of the uploaded CM object"
                }
            },
            "description": "Inbound message sent after an image upload is completed by the agent"
        },
        "AgentIntegrationMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "Not used directly, parent indicating any of the specific messageTypes"
        },
        "AgentSessionChangedMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "emoticon": {
                    "type": "string",
                    "description": "Emoticon name generated by humanization, if any."
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hintText": {
                    "type": "string",
                    "description": "Hint text"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "newAgentId": {
                    "type": "string",
                    "description": "The user ID of the new agent."
                },
                "newSessionId": {
                    "type": "string",
                    "description": "The session ID of the new agent."
                },
                "outboundFormInputCorrelationId": {
                    "type": "string",
                    "description": "Correlates this message with a subsequent FormInputMessage. If exists, this message would be the question for the subsequent form input data."
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "responsePoolContext": {
                    "description": "If this message was generated from a response pool, the response pool context.",
                    "$ref": "#/definitions/ResponsePoolContext",
                    "originalRef": "ResponsePoolContext"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "speechMessageText": {
                    "type": "string",
                    "description": "Message text marked up with speech tags (technology-specific), when speech utterance annotations are available."
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent when the agent associated with the conversation has changed"
        },
        "AgentSummary": {
            "type": "object",
            "properties": {
                "abandoned": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of abandoned conversations during this time period"
                },
                "avgAnswerSpeed": {
                    "type": "string",
                    "description": "The agent's average speed to answer a escalation request"
                },
                "avgHandleTime": {
                    "type": "string",
                    "description": "The agent's average time to handle a conversation"
                },
                "concurrentChatsAllowed": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of concurrent chats allowed for this agent"
                },
                "currentConversations": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of conversations in which this agent is currently participating"
                },
                "maxAnswerSpeed": {
                    "type": "string",
                    "description": "The agent's longest time taken to answer an escalation request"
                },
                "maxConcurrent": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The maximum number of conversations this agent can have at one time"
                },
                "maxHandleTime": {
                    "type": "string",
                    "description": "The longest time taken to handle a conversation"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user in Amelia"
                },
                "queues": {
                    "type": "array",
                    "description": "The primary keys of the queues for which this agent works in Amelia",
                    "items": {
                        "type": "string"
                    }
                },
                "silentQueues": {
                    "type": "array",
                    "description": "The primary keys of the queues for which this agent is declared silent in Amelia",
                    "items": {
                        "type": "string"
                    }
                },
                "slaViolations": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of sla violations during this time period"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the user in Amelia"
                },
                "statusDuration": {
                    "type": "string",
                    "description": "The duration of time spent in this current status"
                },
                "totalConversations": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of conversations in which this agent has participated over this time period"
                },
                "userId": {
                    "type": "string",
                    "description": "The primary key of the user in Amelia"
                }
            }
        },
        "AgentTransferMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "escalationQueueId": {
                    "type": "string",
                    "description": "The primary key of an escalation queue for the transfer"
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                },
                "transferReason": {
                    "type": "string",
                    "description": "The reason for the transfer"
                }
            },
            "description": "A message instructing Amelia transfer a conversation, to a specific queue if specified"
        },
        "AgentViewInstanceAnnotation": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "description": "One single utterance (in a context)"
                }
            }
        },
        "AiopsAccessTokenResponse": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "aiOpsAccessToken": {
                    "type": "string",
                    "example": "_cvy332df",
                    "description": "A token that can be used for Aipos access, if the requesting user has such permissions. Will be null if the user lacks permissions"
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "example": 201
                }
            }
        },
        "AmeliaReadyMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent to indicate Amelia is ready for further input"
        },
        "AmeliaVersion": {
            "type": "object",
            "required": [
                "version"
            ],
            "properties": {
                "version": {
                    "type": "string",
                    "description": "The version reported by the contacted Amelia",
                    "readOnly": true
                }
            }
        },
        "AnonymousLoginCommand": {
            "type": "object",
            "required": [
                "ameliaUrl"
            ],
            "properties": {
                "ameliaUrl": {
                    "type": "string",
                    "description": "The Amelia URL; if unspecified, will default to /Amelia/ on the same scheme, hostname, and port as the REST gateway"
                }
            }
        },
        "AsyncConversationExportGenerate": {
            "type": "object",
            "properties": {
                "exportCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "the number of conversations that would be exported.  If greater than the maxAllowed, only the most recent conversations up to the maxAllowed will be exported"
                },
                "id": {
                    "type": "string",
                    "description": "id of the report that will be generated asynchronously, only present if the export is valid and theexport count is greater than zero"
                },
                "isValid": {
                    "type": "boolean",
                    "description": "true if this export request would result in a valid export, false otherwise"
                },
                "maxAllowed": {
                    "type": "integer",
                    "format": "int32",
                    "description": "the maximum number of conversations that can be present in a valid export"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "AuditEventDataModel": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the field",
                    "readOnly": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the field",
                    "readOnly": true
                }
            }
        },
        "AuditEventModel": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "description": "Optional list of extra name/value data captured in this event",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/AuditEventDataModel",
                        "originalRef": "AuditEventDataModel"
                    }
                },
                "domainCode": {
                    "type": "string",
                    "description": "The code of the domain when this event was fired; may be null if the event was not tied to any single domain",
                    "readOnly": true
                },
                "eventDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date of this event",
                    "readOnly": true
                },
                "eventType": {
                    "type": "string",
                    "description": "The name/type of this event",
                    "readOnly": true
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of this event",
                    "readOnly": true
                },
                "principal": {
                    "type": "string",
                    "description": "The actor who performed this event",
                    "readOnly": true
                }
            }
        },
        "AuditEventSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuditEventModel",
                        "originalRef": "AuditEventModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "AuditEventType": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "AuditEventTypeSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuditEventType",
                        "originalRef": "AuditEventType"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "AuthenticationPolicyListModel": {
            "type": "object",
            "properties": {
                "authenticationSystemName": {
                    "type": "string",
                    "description": "The name of the authentication system which this authentication policy affects"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the authentication policy in Amelia"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the authentication policy"
                },
                "passwordChangedAllowed": {
                    "type": "boolean",
                    "description": "true if this policy allows the password to be changed in Amelia, false otherwise"
                }
            }
        },
        "AuthenticationPolicyModel": {
            "type": "object",
            "required": [
                "authenticationSystem",
                "id",
                "name"
            ],
            "properties": {
                "authenticationSystem": {
                    "type": "string",
                    "description": "THe primary key of an authentication system"
                },
                "forgotPasswordAllowed": {
                    "type": "boolean",
                    "description": "true if this policy allows forgot password mentions, false otherwise"
                },
                "id": {
                    "type": "string",
                    "description": "the primary key of the Authentication Policy"
                },
                "inactivityExpirationDays": {
                    "type": "integer",
                    "format": "int32"
                },
                "lockoutDurationMinutes": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The length of a lockout after the last failed login attempt"
                },
                "maxLoginAttempts": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The maximum number of failed login attempts before an account may be locked out"
                },
                "minPasswordComplexityMatches": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The minimum number of complexity matches before a password is considered valid"
                },
                "minimumPasswordAge": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the Authentication Policy"
                },
                "passwordChangeAllowed": {
                    "type": "boolean",
                    "description": "true if this policy allows passwords to be changed in Amelia, false otherwise"
                },
                "passwordComplexityDescription": {
                    "type": "string",
                    "description": "A human-readable description of complexity rules"
                },
                "passwordComplexityRules": {
                    "type": "string",
                    "example": "[a-z]::1::[A-Z]::1::[\\d]::1::[^a-zA-Z0-9]::1",
                    "description": "Complexity rules defining requirements for a valid password"
                },
                "passwordExpirationDays": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of days before a password expires"
                },
                "passwordExpirationWarningDays": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of days before expiration a warning may be issued"
                },
                "passwordMaxLength": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The maximum length of a password"
                },
                "passwordMinLength": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The minimum length of a password"
                },
                "passwordRejectionRules": {
                    "type": "string",
                    "example": "[\\s]::1::(?i)${email}::1::(?i)${firstName}::1::(?i)${lastName}::1",
                    "description": "Rules defining explicit rejection rules for a password"
                },
                "pastPasswordRetention": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of past passwords to keep, for checks against during password changes"
                }
            }
        },
        "AuthenticationPolicySearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthenticationPolicyListModel",
                        "originalRef": "AuthenticationPolicyListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "AuthenticationSystemCustomPropertyModel": {
            "type": "object",
            "properties": {
                "propertyId": {
                    "type": "string",
                    "description": "The primary key of the property in Amelia"
                },
                "propertyName": {
                    "type": "string",
                    "description": "The name of the property"
                },
                "propertyValue": {
                    "type": "string",
                    "description": "The value of the property"
                }
            }
        },
        "AuthenticationSystemListModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The code of the Authentication System"
                },
                "disabled": {
                    "type": "string",
                    "description": "true if the Authentication System is disabled, false if it is enabled"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Authentication System in Amelia"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Authentication System"
                }
            }
        },
        "AuthenticationSystemModel": {
            "type": "object",
            "required": [
                "code",
                "id",
                "name",
                "type"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The primary key of the Authentication System"
                },
                "ldapUserEmailAttribute": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Authentication System"
                },
                "code": {
                    "type": "string",
                    "description": "The code of the Authentication System"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Authentication System"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Authentication System, which in turn determines the properties needed",
                    "enum": [
                        "INTERNAL",
                        "FACIAL_RECOGNITION",
                        "LDAP",
                        "AD",
                        "APOLLO",
                        "DENY_ALL",
                        "SAML2",
                        "WS_FEDERATION",
                        "CUSTOM"
                    ]
                },
                "disabled": {
                    "type": "boolean",
                    "description": "true if this Authentication System is disabled, false if is is active"
                },
                "immediate": {
                    "type": "boolean",
                    "description": "true if this Authentication System enables an immediate action, such as a redirect, without any user intervention, false otherwise"
                },
                "virtualHostIds": {
                    "type": "array",
                    "description": "a set of primary keys of virtualHosts in which this authentication system will participate",
                    "items": {
                        "type": "string"
                    }
                },
                "displayOnLoginWindow": {
                    "type": "boolean",
                    "description": "true if the Amelia configuration prefers it displayed in login widgets, false otherwise"
                },
                "loginWindowOrder": {
                    "type": "integer",
                    "format": "int32",
                    "description": "If displaying in a login widget with other Authentication Systems, the 0-based ordering"
                },
                "adDomain": {
                    "type": "string",
                    "description": "AD Type: The active directory domain to use"
                },
                "customProperties": {
                    "type": "array",
                    "description": "Custom Type: A list of properties the Authentication System uses",
                    "items": {
                        "$ref": "#/definitions/AuthenticationSystemCustomPropertyModel",
                        "originalRef": "AuthenticationSystemCustomPropertyModel"
                    }
                },
                "customProviderClass": {
                    "type": "string",
                    "description": "Custom Type: The fully qualified class name of the implementation of this Authentication System"
                },
                "ldapUserDnPatterns": {
                    "type": "string",
                    "description": "LDAP Type: userDn patterns in the Directory"
                },
                "ldapUserSearchBase": {
                    "type": "string",
                    "description": "LDAP Type: search base in the Directory"
                },
                "ldapUserSearchFilter": {
                    "type": "string",
                    "description": "LDAP Type: search filter in the Directory"
                },
                "ldapUserFirstNameAttribute": {
                    "type": "string",
                    "description": "LDAP Type: the LDAP attribute that should correspond to Amelia first name"
                },
                "ldapUserLastNameAttribute": {
                    "type": "string",
                    "description": "LDAP Type: the LDAP attribute that should correspond to Amelia last name"
                },
                "ldapContextManagerDn": {
                    "type": "string",
                    "description": "LDAP Type: identity of the user querying the LDAP server"
                },
                "ldapContextManagerPassword": {
                    "type": "string",
                    "description": "LDAP Type: password of the user querying the LDAP server"
                },
                "ldapContextRoot": {
                    "type": "string",
                    "description": "LDAP Type: optional root suffix"
                },
                "ldapContextUrl": {
                    "type": "string",
                    "description": "LDAP Type: ldap url"
                },
                "ldapAutoCreate": {
                    "type": "boolean",
                    "description": "LDAP Type: true to auto-create users in Amelia, false otherwise, which will require manual creation before that user may log in"
                },
                "ldapDefaultUserGroups": {
                    "type": "string",
                    "description": "LDAP Type: comma separated list of Amelia groups to which to add created users"
                },
                "ldapDefaultUserGroupScript": {
                    "type": "string",
                    "description": "LDAP Type: a groovy script calculating Amelia groups in which to put user, will suppress ldapDefaultUserGroups if it returns any"
                },
                "ldapGroupSync": {
                    "type": "string",
                    "description": "LDAP Type: a comma separated list of groups to sync the user's membership; ignored if we have a ldapDefaultUserGroupScript"
                },
                "ldapPrimaryDomainCode": {
                    "type": "string",
                    "description": "LDAP Type: the code of a the domain with which to associate users"
                },
                "ldapPrimaryDomainScript": {
                    "type": "string",
                    "description": "LDAP Type: a script calculating the code of a the domain with which to associate users If present and successful in finding a domain, ldapPrimaryDomainCode will be ignored"
                },
                "ldapAlwaysChangeDomain": {
                    "type": "boolean",
                    "description": "LDAP Type: true to change the domain if necessary on each login, false to set domain on creation only"
                },
                "samlSpNoAlias": {
                    "type": "boolean",
                    "description": "SAML2 Type: true to alias the entry point by code, false otherwise"
                },
                "samlSignMetadata": {
                    "type": "boolean",
                    "description": "SAML2 Type: true if the metadata will be signed by a certificate, false otherwise"
                },
                "samlMetadataTrustCheck": {
                    "type": "boolean",
                    "description": "SAML2 Type: true to force a check of metadata, false otherwise"
                },
                "samlMetadataRequireSignature": {
                    "type": "boolean",
                    "description": "SAML2 Type: true if metadata requires a signature, false otherwise"
                },
                "samlMetadataProviderType": {
                    "type": "string",
                    "description": "SAML2 Type: the type of metadata for this provider",
                    "enum": [
                        "HTTP",
                        "FILE"
                    ]
                },
                "samlUserGroup": {
                    "type": "string",
                    "description": "SAML2 Type: name of a user group to which to assign users"
                },
                "samlUserGroupScript": {
                    "type": "string",
                    "description": "SAML2 Type: a script by which to calculate a group to assign users; if present and successful,  samlUserGroup is ignored"
                },
                "samlAlwaysChangeDomain": {
                    "type": "boolean",
                    "description": "SAML2 Type: true to change the domain of the user if needed on each login, false to change the domain only on creation"
                },
                "samlDefaultDomainScript": {
                    "type": "string",
                    "description": "SAML2 Type: a script by which to calculate a domain to assign users; if none found, domain will  be taken from first non-global group of the user"
                },
                "samlIdpMetadataUrl": {
                    "type": "string",
                    "description": "SAML2 Type: if http metadata, the url"
                },
                "samlIdpMetadataXml": {
                    "type": "string",
                    "description": "SAML2 Type: if file metadata, the metadata xml"
                },
                "samlIdpSslCertificate": {
                    "type": "string",
                    "description": "SAML2 Type: the SSL certificate of the provider"
                },
                "samlSpBaseUrl": {
                    "type": "string",
                    "description": "SAML2 Type: the base url of the metadata to generate"
                },
                "samlSpEntityId": {
                    "type": "string",
                    "description": "SAML2 Type: the entity id of the metadata to generate"
                },
                "samlSpSslCertificate": {
                    "type": "string",
                    "description": "SAML2 Type: ssl certificate to add to the metadata upon generation"
                },
                "samlSpSslPrivateKey": {
                    "type": "string",
                    "description": "SAML2 Type: private key to add to the metadata upon generation"
                },
                "samlSpSslKeyPassword": {
                    "type": "string",
                    "description": "SAML2 Type: private key password to add to the metadata upon generation"
                },
                "samlEmailProperty": {
                    "type": "string",
                    "description": "SAML2 Type: the SAML user property corresponding to Amelia email"
                },
                "samlLastNameProperty": {
                    "type": "string",
                    "description": "SAML2 Type: the SAML user property corresponding to Amelia last name"
                },
                "samlFirstNameProperty": {
                    "type": "string",
                    "description": "SAML2 Type: the SAML user property corresponding to Amelia first name"
                },
                "samlExternalUidProperty": {
                    "type": "string",
                    "description": "SAML2 Type: the SAML user property corresponding to Amelia externalUid property"
                },
                "samlUseExternalId": {
                    "type": "string",
                    "description": "SAML2 Type: true to look up the user by externalId when loading the user from SAML, false to use email."
                },
                "samlAutoCreate": {
                    "type": "boolean",
                    "description": "SAML2 Type: true to auto-create users when needed, false to require manual creation"
                },
                "samlLoginRedirects": {
                    "type": "string",
                    "description": "SAML2 Type: JSON defining redirect URLs according to the login code and mode"
                },
                "wsFederationEmailProperty": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: The WS federation property to use for email in Amelia"
                },
                "wsFederationLastNameProperty": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: The WS federation property to use for last name in Amelia"
                },
                "wsFederationFirstNameProperty": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: The WS federation property to use for first name in Amelia"
                },
                "wsFederationStsUrl": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: URL of the STS provider"
                },
                "wsFederationLogoutUrl": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: The federation logout url"
                },
                "wsFederationReplyUrl": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: URL at which to receive replies from the STS service"
                },
                "wsFederationStsFriendlyName": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: A descriptive name of the STS provider"
                },
                "wsFederationThumbprint": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: Thumbprint for the STS certificate"
                },
                "wsFederationRealm": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: Realm of the STS provider"
                },
                "wsFederationTrustedIssuers": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: Trusted issues of STS credentials"
                },
                "wsFederationAudienceUris": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: List of uris representing valid audiences"
                },
                "wsFederationAutoCreate": {
                    "type": "boolean",
                    "description": "WS_FEDERATION Type: true to create users automatically when needed, false to require manual creation"
                },
                "wsFederationDefaultUserGroups": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: Comma delimited list of user groups with which to associate users"
                },
                "wsFederationPrimaryDomainCode": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: The code of a domain with which to associate users"
                },
                "wsFederationLoginRedirects": {
                    "type": "string",
                    "description": "WS_FEDERATION Type: JSON defining redirect URLs according to the login code and mode"
                },
                "apolloApiUrlBase": {
                    "type": "string",
                    "description": "APOLLO Type: The api URL of the Apollo instance"
                },
                "apolloPublicUrl": {
                    "type": "string",
                    "description": "APOLLO Type: The public URL of the Apollo instance"
                },
                "apolloClientDomainMap": {
                    "type": "string",
                    "example": "2f904cc2-dbad-4087-ba96-ece874ccea35=b5af2a72-6cec-41a6-85c7-a1dd4d894e64",
                    "description": "APOLLO Type: a comma delimited list of client=domain UUIDs"
                },
                "apolloGroupMap": {
                    "type": "string",
                    "description": "APOLLO Type: list of group names with which to associate users"
                },
                "apolloAutoCreate": {
                    "type": "boolean",
                    "description": "APOLLO Type: true to auto-create users in Amelia when necessary, false to require manual creation"
                },
                "apolloAmeliaUserEmail": {
                    "type": "string",
                    "description": "APOLLO Type: The Apollo user email to use in querying"
                },
                "apolloAmeliaUserPassword": {
                    "type": "string",
                    "description": "APOLLO Type: The Apollo user password to use in querying"
                }
            }
        },
        "AuthenticationSystemSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthenticationSystemListModel",
                        "originalRef": "AuthenticationSystemListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "AuthorityModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the authority in Amelia"
                }
            },
            "description": "An authority in Amelia"
        },
        "AutomataExecutionCreatedMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "automatonName": {
                    "type": "string",
                    "description": "The name of the automaton being executed"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "emoticon": {
                    "type": "string",
                    "description": "Emoticon name generated by humanization, if any."
                },
                "executionId": {
                    "type": "string",
                    "description": "The primary key of the execution"
                },
                "fqtId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The id of the fqt associated with this execution"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hintText": {
                    "type": "string",
                    "description": "Hint text"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "outboundFormInputCorrelationId": {
                    "type": "string",
                    "description": "Correlates this message with a subsequent FormInputMessage. If exists, this message would be the question for the subsequent form input data."
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "responsePoolContext": {
                    "description": "If this message was generated from a response pool, the response pool context.",
                    "$ref": "#/definitions/ResponsePoolContext",
                    "originalRef": "ResponsePoolContext"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "speechMessageText": {
                    "type": "string",
                    "description": "Message text marked up with speech tags (technology-specific), when speech utterance annotations are available."
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            }
        },
        "AvailableSetting": {
            "type": "object",
            "properties": {
                "defaultValue": {
                    "type": "string",
                    "description": "The default value of this setting, as a string"
                },
                "description": {
                    "type": "string",
                    "description": "A longer description of the setting"
                },
                "id": {
                    "type": "string",
                    "description": "The setting id"
                },
                "name": {
                    "type": "string",
                    "description": "The setting name"
                },
                "shortDescription": {
                    "type": "string",
                    "description": "A short description of the setting"
                }
            }
        },
        "AvailableSettingSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AvailableSetting",
                        "originalRef": "AvailableSetting"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "AvatarImageModel": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "the action to take for this image type upon saving the enclosing avatar.",
                    "enum": [
                        "NO_OP",
                        "DELETE_EXISTING",
                        "CONFIRM_PENDING"
                    ]
                },
                "currentImageUrl": {
                    "type": "string",
                    "description": "the url of the currently active image"
                },
                "imageType": {
                    "type": "string",
                    "description": "the type of the image",
                    "enum": [
                        "backgroundLight",
                        "backgroundDark",
                        "nameTag"
                    ]
                },
                "pendingImageUrl": {
                    "type": "string",
                    "description": "the url of an image that has been uploaded but not confirmed"
                }
            }
        },
        "AvatarListModel": {
            "type": "object",
            "properties": {
                "avatarType": {
                    "type": "string",
                    "description": "The type of the avatar in Amelia",
                    "enum": [
                        "Quantum",
                        "Uneeq"
                    ]
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the avatar in Amelia"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the avatar in Amelia"
                }
            }
        },
        "AvatarSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AvatarListModel",
                        "originalRef": "AvatarListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "AvatarSettingModel": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the setting"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the setting"
                }
            }
        },
        "AvatarVoiceListModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The primary key of the voice in Amelia"
                },
                "language": {
                    "type": "string",
                    "description": "The Amelia language code this voice supports"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the avatar in Amelia"
                },
                "provider": {
                    "type": "string",
                    "description": "The provider of this voice"
                }
            }
        },
        "AvatarVoiceSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AvatarVoiceListModel",
                        "originalRef": "AvatarVoiceListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "BadRequestResponse": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Not Found",
                    "description": "An optional message providing more information about the response"
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "example": 400
                }
            }
        },
        "BaseMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "Not used directly, parent indicating any of the specific messageTypes"
        },
        "BotExecutionRequestMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "botAttributes": {
                    "type": "object",
                    "description": "Bot attributes"
                },
                "botName": {
                    "type": "string",
                    "description": "Bot name"
                },
                "botTimeOut": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Bot timeout"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "Execution request message from Amelia to inform UI to start the bot."
        },
        "BpnExecutionEvent": {
            "type": "object",
            "required": [
                "eventId",
                "name"
            ],
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "A unique ID for this event (instance)"
                },
                "name": {
                    "type": "string",
                    "description": "The name/type of this event"
                }
            },
            "description": "A BPN event of actions happen with a process or task."
        },
        "BpnExecutionEventMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "event",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "event": {
                    "description": "The associated event.",
                    "$ref": "#/definitions/BpnExecutionEvent",
                    "originalRef": "BpnExecutionEvent"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A BPN event message sent when various actions happen with a process."
        },
        "BpnKickoffMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "processName": {
                    "type": "string",
                    "description": "The name of the BPN process to start"
                },
                "processVariables": {
                    "type": "object",
                    "description": "The initial variables for the process",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                },
                "shouldEcho": {
                    "type": "boolean",
                    "description": "true if the message should echo back to the client, false otherwise, defaults to true"
                }
            },
            "description": "A message instructing Amelia to kick off a BPN process in the middle of a conversation"
        },
        "BpnLiteEdge": {
            "type": "object",
            "required": [
                "definitionId",
                "frequency",
                "id",
                "name",
                "sourceDefinitionId",
                "sourceId",
                "targetDefinitionId",
                "targetId",
                "waypoints"
            ],
            "properties": {
                "definitionId": {
                    "type": "string",
                    "description": "Edge definition ID"
                },
                "frequency": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Frequency"
                },
                "id": {
                    "type": "string",
                    "description": "Synthetic edge ID"
                },
                "name": {
                    "type": "string",
                    "description": "Edge name"
                },
                "sourceDefinitionId": {
                    "type": "string",
                    "description": "Source vertex definition ID"
                },
                "sourceId": {
                    "type": "string",
                    "description": "Source vertex ID"
                },
                "targetDefinitionId": {
                    "type": "string",
                    "description": "Target vertex definition ID"
                },
                "targetId": {
                    "type": "string",
                    "description": "Target vertex ID"
                },
                "waypoints": {
                    "type": "array",
                    "description": "Edge waypoints",
                    "items": {
                        "$ref": "#/definitions/LiteWaypoint",
                        "originalRef": "LiteWaypoint"
                    }
                }
            },
            "description": "Lite BPN graph edge."
        },
        "BpnLiteGraph": {
            "type": "object",
            "required": [
                "edges",
                "modelType",
                "name",
                "processDefinitionId",
                "vertices"
            ],
            "properties": {
                "edges": {
                    "type": "array",
                    "description": "Edges",
                    "items": {
                        "$ref": "#/definitions/BpnLiteEdge",
                        "originalRef": "BpnLiteEdge"
                    }
                },
                "modelType": {
                    "type": "string",
                    "description": "Model type"
                },
                "name": {
                    "type": "string",
                    "description": "Graph or process name"
                },
                "processDefinitionId": {
                    "type": "string",
                    "description": "Process definition ID"
                },
                "vertices": {
                    "type": "array",
                    "description": "Vertices",
                    "items": {
                        "$ref": "#/definitions/BpnLiteVertex",
                        "originalRef": "BpnLiteVertex"
                    }
                }
            },
            "description": "Simplified, lighter, and flat BPN graph."
        },
        "BpnLiteVertex": {
            "type": "object",
            "required": [
                "abscissa",
                "activation",
                "definitionId",
                "frequency",
                "height",
                "id",
                "name",
                "ordinate",
                "type",
                "width"
            ],
            "properties": {
                "abscissa": {
                    "type": "number",
                    "format": "double",
                    "description": "The x coordinate of the vertex"
                },
                "activation": {
                    "type": "number",
                    "format": "double",
                    "description": "Activation level (stochastic BPNs)"
                },
                "defaultFlowDefinitionId": {
                    "type": "string",
                    "description": "Default flow definition ID"
                },
                "defaultFlowId": {
                    "type": "string",
                    "description": "Default flow ID"
                },
                "definitionId": {
                    "type": "string",
                    "description": "Vertex definition ID"
                },
                "frequency": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Frequency"
                },
                "height": {
                    "type": "number",
                    "format": "double",
                    "description": "Vertex height"
                },
                "id": {
                    "type": "string",
                    "description": "Synthetic vertex ID"
                },
                "name": {
                    "type": "string",
                    "description": "Vertex name"
                },
                "ordinate": {
                    "type": "number",
                    "format": "double",
                    "description": "The y coordinate of the vertex"
                },
                "type": {
                    "type": "string",
                    "description": "Vertex type (flattened)"
                },
                "width": {
                    "type": "number",
                    "format": "double",
                    "description": "Vertex width"
                }
            },
            "description": "Lite BPN graph vertex."
        },
        "BpnModel": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A text description of the model"
                },
                "domainId": {
                    "type": "string",
                    "description": "The UUID of the domain in which this model resides"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the bpn model"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bpn model"
                },
                "parentPathId": {
                    "type": "string",
                    "description": "The UUID of the parent of this model, if any"
                },
                "revisionId": {
                    "type": "string",
                    "description": "auto-generated revision ID of this model."
                },
                "revisionXml": {
                    "type": "string",
                    "description": "The XML document describing this bpn model"
                },
                "status": {
                    "type": "string",
                    "description": "The current save/deployed status of this model"
                },
                "type": {
                    "type": "string",
                    "description": "The type of this bpn model",
                    "enum": [
                        "DETERMINISTIC",
                        "STOCHASTIC",
                        "HEADLESS"
                    ]
                }
            }
        },
        "BpnRevisionTaskAnnotationModel": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UtteranceAnnotationModel",
                        "originalRef": "UtteranceAnnotationModel"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "BpnTreeNode": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "description": "The list of child nodes of this BpnTreeNode",
                    "items": {
                        "$ref": "#/definitions/BpnTreeNode",
                        "originalRef": "BpnTreeNode"
                    }
                },
                "domainId": {
                    "type": "string",
                    "description": "The unique identifier of the domain in which this BpnTreeNode belongs"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of this BpnTreeNode"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this BpnTreeNode"
                },
                "parentPathId": {
                    "type": "string",
                    "description": "The primary key of the parent element of this BpnTreeNode"
                },
                "type": {
                    "type": "string",
                    "description": "The type of this BpnTreeNode"
                }
            }
        },
        "BpnValidationModel": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "modelName": {
                    "type": "string",
                    "description": "The name of deploying BPN model"
                },
                "results": {
                    "type": "array",
                    "description": "A list of the validation rules broken that prevented deployment, if any",
                    "items": {
                        "$ref": "#/definitions/BpnValidationRuleResult",
                        "originalRef": "BpnValidationRuleResult"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the request, PASS for success, all other values indicate failure"
                },
                "success": {
                    "type": "boolean",
                    "description": "Whether the action succeeded or failed"
                }
            },
            "description": "The results of validating a BPN for deployment"
        },
        "BpnValidationRuleResult": {
            "type": "object",
            "required": [
                "ruleName"
            ],
            "properties": {
                "affectedResourceInfoList": {
                    "type": "array",
                    "description": "The resources inside the BPN that violated this rule",
                    "items": {
                        "$ref": "#/definitions/AffectedResourceInfo",
                        "originalRef": "AffectedResourceInfo"
                    }
                },
                "ruleName": {
                    "type": "string",
                    "description": "The name of the rule"
                }
            },
            "description": "A validation rule and its violation"
        },
        "CardMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "code": {
                    "type": "string",
                    "description": "Unique code of the card"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the card"
                },
                "payload": {
                    "type": "string",
                    "description": "Payload"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message containing card information"
        },
        "ChangeUserLanguageMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "language": {
                    "type": "string",
                    "description": "Language tag for the language being requested for the preferred language and the current session."
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "Not used directly, parent indicating any of the specific messageTypes"
        },
        "ClassifierModelBaseModel": {
            "type": "object",
            "properties": {
                "classifierType": {
                    "type": "string",
                    "description": "Function of this classifier model in Amelia",
                    "enum": [
                        "TEXT_CLASSIFIER",
                        "TEXT_TAGGER",
                        "SPAN_CLASSIFIER",
                        "SPANLESS_SLOT_EXTRACTOR"
                    ]
                },
                "domainId": {
                    "type": "string",
                    "description": "Unique identifier for the domain associated with this classifier model"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for this classifier model"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name for this classifier model"
                }
            }
        },
        "ClassifierModelListModel": {
            "type": "object",
            "properties": {
                "classifierType": {
                    "type": "string",
                    "description": "Function of this classifier model in Amelia",
                    "enum": [
                        "TEXT_CLASSIFIER",
                        "TEXT_TAGGER",
                        "SPAN_CLASSIFIER",
                        "SPANLESS_SLOT_EXTRACTOR"
                    ]
                },
                "domainId": {
                    "type": "string",
                    "description": "Unique identifier for the domain associated with this classifier model"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for this classifier model"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name for this classifier model"
                },
                "revisions": {
                    "type": "array",
                    "description": "the revisions of this model",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/ClassifierModelRevisionModel",
                        "originalRef": "ClassifierModelRevisionModel"
                    }
                }
            }
        },
        "ClassifierModelRevisionModel": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "The algorithm used in this revision",
                    "readOnly": true
                },
                "classifierModel": {
                    "description": "Parent classifier model for this revision",
                    "$ref": "#/definitions/ClassifierModelBaseModel",
                    "originalRef": "ClassifierModelBaseModel"
                },
                "corpusMetaData": {
                    "description": "The corpus data for this revision",
                    "readOnly": true,
                    "$ref": "#/definitions/CorpusMetaData",
                    "originalRef": "CorpusMetaData"
                },
                "evaluations": {
                    "type": "array",
                    "description": "List of evaluations performed during training",
                    "items": {
                        "$ref": "#/definitions/ModelEvaluationModel",
                        "originalRef": "ModelEvaluationModel"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for this classifier model revision"
                },
                "name": {
                    "type": "string",
                    "description": "Human readable name for this classifier model revision"
                },
                "revisionNumber": {
                    "description": "The major/minor number of this revision",
                    "readOnly": true,
                    "$ref": "#/definitions/RevisionNumber",
                    "originalRef": "RevisionNumber"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the revision",
                    "readOnly": true
                },
                "trainingSummary": {
                    "type": "string",
                    "description": "The summary of training on this revision",
                    "readOnly": true
                }
            }
        },
        "ClassifierModelSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ClassifierModelListModel",
                        "originalRef": "ClassifierModelListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "CloseConversationParams": {
            "type": "object",
            "properties": {
                "skipPreCloseSurvey": {
                    "type": "boolean",
                    "description": "true to skip any pre close survey this conversation may otherwise trigger, defaults to false"
                }
            }
        },
        "CmObjectMetadataDto": {
            "type": "object",
            "properties": {
                "bucketId": {
                    "type": "string",
                    "description": "Bucket ID."
                },
                "bucketName": {
                    "type": "string",
                    "description": "Bucket name."
                },
                "contentDisposition": {
                    "type": "string",
                    "description": "Content disposition."
                },
                "contentLength": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Content length in bytes."
                },
                "contentType": {
                    "type": "string",
                    "description": "Content type (aka, mime or media type)."
                },
                "httpContentDisposition": {
                    "type": "string",
                    "description": "Content disposition according to <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1\">RFC 2616</a>."
                },
                "objectId": {
                    "type": "string",
                    "description": "Object metadata ID."
                },
                "objectName": {
                    "type": "string",
                    "description": "Object name, usually a filename."
                },
                "scope": {
                    "type": "string",
                    "description": "Scope to which this object is associated."
                },
                "url": {
                    "type": "string",
                    "description": "URL to get direct access to the object."
                }
            },
            "description": "Metadata associated with a file upload."
        },
        "CmObjectToDisplay": {
            "type": "object",
            "required": [
                "bucketName",
                "correlationId",
                "objectId",
                "sequence",
                "total"
            ],
            "properties": {
                "aspectRatio": {
                    "type": "string",
                    "enum": [
                        "PRESENT_AUDIO_VIDEO_ASPECT_RATIO_AUTO",
                        "PRESENT_AUDIO_VIDEO_ASPECT_RATIO_4_3",
                        "PRESENT_AUDIO_VIDEO_ASPECT_RATIO_16_9",
                        "PRESENT_AUDIO_VIDEO_ASPECT_RATIO_21_9",
                        "PRESENT_AUDIO_VIDEO_ASPECT_RATIO_14_10",
                        "PRESENT_AUDIO_VIDEO_ASPECT_RATIO_19_10"
                    ]
                },
                "bucketName": {
                    "type": "string",
                    "description": "Name of the bucket where the file lives"
                },
                "contentType": {
                    "type": "string",
                    "description": " The content type of the resource being presented."
                },
                "correlationId": {
                    "type": "string",
                    "description": "Correlation ID for grouping resources being presented"
                },
                "description": {
                    "type": "string",
                    "description": "Description, optional, (alt text)"
                },
                "displayFileName": {
                    "type": "string",
                    "description": "Display the resource name details under the resource when presented",
                    "enum": [
                        "YES",
                        "NO"
                    ]
                },
                "displayFileSize": {
                    "type": "string",
                    "enum": [
                        "YES",
                        "NO"
                    ]
                },
                "displayResourceDetails": {
                    "type": "string",
                    "description": "Deprecated. Use 'displayFileName' and 'displayFileSize' instead",
                    "enum": [
                        "YES",
                        "NO"
                    ]
                },
                "documentStyle": {
                    "type": "string",
                    "description": "Style config for documents (default = INHERIT)",
                    "enum": [
                        "ORIGINAL",
                        "INHERIT"
                    ]
                },
                "download": {
                    "type": "string",
                    "description": "Download configuration (default = NO)",
                    "enum": [
                        "DOWNLOAD_YES",
                        "DOWNLOAD_NO"
                    ]
                },
                "filename": {
                    "type": "string",
                    "description": "The name of the file"
                },
                "label": {
                    "type": "string",
                    "description": "Deprecated. Use 'title' instead"
                },
                "masterMetadataFileName": {
                    "type": "string",
                    "description": "The name of the file"
                },
                "muted": {
                    "type": "string",
                    "enum": [
                        "AUDIO_VIDEO_MUTED_YES",
                        "AUDIO_VIDEO_MUTED_NO"
                    ]
                },
                "objectId": {
                    "type": "string",
                    "description": "The identifier in the cm server"
                },
                "previewStyle": {
                    "type": "string",
                    "description": "Display mode (default = DisplayMode#INLINE)",
                    "enum": [
                        "NO_PREVIEW",
                        "INLINE_ONLY",
                        "INLINE_AND_POPUP",
                        "ATTACHMENT"
                    ]
                },
                "processInstanceId": {
                    "type": "string",
                    "description": "The ID of the running process instance that generated this present message"
                },
                "resourceSourceLocation": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Sequence number of grouping resource being presented"
                },
                "title": {
                    "type": "string",
                    "description": "Title"
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Total number of grouping resources being presented"
                }
            }
        },
        "CmObjectToRequest": {
            "type": "object",
            "required": [
                "fileExtensions",
                "maxSize"
            ],
            "properties": {
                "fileExtensions": {
                    "type": "array",
                    "description": "The list of supported file extensions for this upload",
                    "items": {
                        "type": "string"
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The maximum size that may be uploaded, in bytes"
                }
            }
        },
        "CompositeEntityFieldModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Composite entity field code"
                },
                "name": {
                    "type": "string",
                    "description": "Composite entity field name"
                },
                "slotId": {
                    "type": "string"
                },
                "slotInfoId": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "description": "Extracted fields for a composite entity",
                    "items": {
                        "$ref": "#/definitions/NormalizedEntityModel",
                        "originalRef": "NormalizedEntityModel"
                    }
                }
            }
        },
        "ConfusionMatrixModel": {
            "type": "object",
            "properties": {
                "columns": {
                    "type": "array",
                    "description": "List of column (prediction) labels for this confusion matrix",
                    "items": {
                        "type": "string"
                    }
                },
                "rows": {
                    "type": "array",
                    "description": "List of rows corresponding to actual labels and their number of misclassifications by predicted label",
                    "items": {
                        "$ref": "#/definitions/ConfusionMatrixRow",
                        "originalRef": "ConfusionMatrixRow"
                    }
                }
            }
        },
        "ConfusionMatrixRow": {
            "type": "object",
            "properties": {
                "header": {
                    "type": "string",
                    "description": "Gold label for the current row of a confusion matrix"
                },
                "values": {
                    "type": "array",
                    "description": "Count of times the corresponding label by column index was predicted where the current row's actual label was the correct label",
                    "items": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            }
        },
        "ContentBucketModel": {
            "type": "object",
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket"
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain in which this bucket exists"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the bucket"
                }
            }
        },
        "ContentMaskModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique id of content mask"
                },
                "match": {
                    "type": "string",
                    "description": "The regex pattern used to match"
                },
                "replace": {
                    "type": "string",
                    "description": "The text used as mask, some characters may be  encoded by Amelia for browser safety"
                }
            }
        },
        "ContentResourceMetadata": {
            "type": "object",
            "properties": {
                "bucketId": {
                    "type": "string",
                    "description": "The primary key of the bucket that contains this resource"
                },
                "cmObject": {
                    "type": "string",
                    "format": "byte",
                    "description": "The binary content of the resource",
                    "readOnly": true
                },
                "contentLength": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The length of the content of this resource"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content type of this resource"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of this resource",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of this resource"
                }
            }
        },
        "ContextualRecommendationModel": {
            "type": "object",
            "properties": {
                "contexts": {
                    "type": "array",
                    "description": "The different contexts this recommendation appears in",
                    "items": {
                        "$ref": "#/definitions/RecommendationContextModel",
                        "originalRef": "RecommendationContextModel"
                    }
                },
                "recommendationCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of times this recommendation has been used by people."
                },
                "score": {
                    "type": "number",
                    "format": "float",
                    "description": "The similarity score of the current context with this recommendation"
                },
                "text": {
                    "type": "string",
                    "description": "The recommendation text"
                }
            }
        },
        "ConversationClosedMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message send when Amelia considers the conversation closed"
        },
        "ConversationClosedMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                },
                "skipPreCloseSurvey": {
                    "type": "boolean",
                    "description": "whether to skip any configured pre-close survey on the domain"
                }
            },
            "description": "Not used directly, parent indicating any of the specific messageTypes"
        },
        "ConversationDomainModel": {
            "type": "object",
            "required": [
                "code",
                "enabled",
                "id",
                "name",
                "parentCode"
            ],
            "properties": {
                "hidden": {
                    "type": "boolean",
                    "description": "An indicator to a UI that this domain is available, but, should not be presented to a user as a UI option."
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the domain"
                },
                "localeDisplayName": {
                    "type": "string",
                    "description": "Display name from the domain's locale."
                },
                "localeLanguageTag": {
                    "type": "string",
                    "description": "Language tag of the domain's locale."
                },
                "parentCode": {
                    "type": "string",
                    "description": "The code if this domain's parent, if any",
                    "readOnly": true
                },
                "requireLogin": {
                    "type": "boolean",
                    "description": "Whether this domain will require authentication before starting a conversation."
                },
                "virtualHostIds": {
                    "type": "array",
                    "description": "a set of primary keys of virtualHosts in which this domain will participate",
                    "items": {
                        "type": "string"
                    }
                },
                "code": {
                    "type": "string",
                    "description": "The unique code of the domain"
                },
                "name": {
                    "type": "string",
                    "description": "The human readable name of the domain"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the domain is currently active for use"
                }
            }
        },
        "ConversationExportCheck": {
            "type": "object",
            "properties": {
                "exportCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "the number of conversations that would be exported.  If greater than the maxAllowed, only the most recent conversations up to the maxAllowed will be exported"
                },
                "isValid": {
                    "type": "boolean",
                    "description": "true if this export request would result in a valid export, false otherwise"
                },
                "maxAllowed": {
                    "type": "integer",
                    "format": "int32",
                    "description": "the maximum number of conversations that can be present in a valid export"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "ConversationSessionResponse": {
            "type": "object",
            "required": [
                "conversationId",
                "sessionId",
                "sessionMode"
            ],
            "properties": {
                "conversationId": {
                    "type": "string",
                    "description": "The id of this conversation"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique sessionId for this conversation.  Must be used for all subsequent interactions with this conversation"
                },
                "sessionMode": {
                    "type": "string",
                    "description": "The sessionMode of this conversationSession",
                    "enum": [
                        "USER",
                        "AGENT",
                        "OBSERVER"
                    ]
                }
            },
            "description": "Response representing a conversation"
        },
        "ConversationSuspendedMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "Message sent when Amelia has suspended a conversation"
        },
        "ConversationTaskDetails": {
            "type": "object",
            "properties": {
                "agentId": {
                    "type": "string",
                    "description": "Id of the agent."
                },
                "agentName": {
                    "type": "string",
                    "description": "Name of the agent."
                },
                "conversationId": {
                    "type": "string",
                    "description": "Id of the conversation"
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Created time of conversation task."
                },
                "executedIntents": {
                    "type": "array",
                    "description": "Details of intent that are executed",
                    "items": {
                        "$ref": "#/definitions/IntentDetail",
                        "originalRef": "IntentDetail"
                    }
                },
                "finished": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Finished time of created task"
                },
                "userId": {
                    "type": "string",
                    "description": "Id of the user."
                }
            },
            "description": "Conversation Task Details of the user"
        },
        "CoreIntentUtteranceModel": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "dataTagsSelected": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "intentInfoId": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "CorpusMetaData": {
            "type": "object",
            "properties": {
                "goals": {
                    "type": "array",
                    "description": "The goals in this corpus",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "noOfGoals": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of goals in this corpus",
                    "readOnly": true
                },
                "noOfSlots": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of slots in this corpus",
                    "readOnly": true
                },
                "noOfUtterances": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of utterances in this corpus",
                    "readOnly": true
                },
                "slots": {
                    "type": "array",
                    "description": "The slots in this corpus",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CqaPredictionModel": {
            "type": "object",
            "properties": {
                "ambiguityPresence": {
                    "type": "string",
                    "description": "CQA debug message explaining why/why not CQA was triggered."
                },
                "bestIntents": {
                    "type": "array",
                    "description": "Top 2 intents predicted that may be candidates for clarification (CQA).",
                    "items": {
                        "$ref": "#/definitions/IntentAndScoreModel",
                        "originalRef": "IntentAndScoreModel"
                    }
                },
                "inDomainScore": {
                    "type": "array",
                    "description": "Probability that utterance is in-domain. Utterance should be in-domain to trigger CQA.",
                    "items": {
                        "type": "number",
                        "format": "double"
                    }
                }
            }
        },
        "CreateAdminDomainModel": {
            "type": "object",
            "required": [
                "code",
                "enabled",
                "id",
                "name",
                "parentCode"
            ],
            "properties": {
                "addDefaultVirtualHost": {
                    "type": "boolean",
                    "description": "if true, the default virtual host will be added to the virtualHostIds list,regardless of what is submitted.  Defaults to true"
                },
                "agentTranslationEnabled": {
                    "type": "boolean",
                    "description": "Whether or not this conversations will attempt to auto-translate agent messages not in the domain's native language"
                },
                "aiOpsClientCode": {
                    "type": "string",
                    "description": "AI Ops client code associated with this domain"
                },
                "allowAnonymousUsers": {
                    "type": "boolean",
                    "description": "Whether or not this domain allows anonymous users to participate in conversations"
                },
                "allowAnonymousView": {
                    "type": "boolean",
                    "description": "Whether this domain is visible to anonymous users.  May still require them to be authenticatedto have an actual conversation"
                },
                "allowConversations": {
                    "type": "boolean",
                    "description": "Whether or not this domain supports conversations"
                },
                "allowNpsCollection": {
                    "type": "boolean",
                    "description": "Allow Amelia to take feedback from user when a bpn context ends, defaults to true"
                },
                "allowSwitchIn": {
                    "type": "boolean",
                    "description": "If true, this domain will allow user to switch to domain during conversation context switching"
                },
                "allowSwitchOut": {
                    "type": "boolean",
                    "description": "If true, this domain will allow user to switch out of domain during conversation context switching"
                },
                "ameliaUserId": {
                    "type": "string",
                    "description": "The unique identifier of the user of this domain, if any"
                },
                "anonymizeTranscriptUser": {
                    "type": "boolean",
                    "description": "Whether to anonymize transcripts"
                },
                "anonymousFirstNameOverride": {
                    "type": "string"
                },
                "anonymousLastNameOverride": {
                    "type": "string"
                },
                "anonymousUserCreationDomain": {
                    "type": "boolean"
                },
                "anonymousUserGroupId": {
                    "type": "string",
                    "description": "Anonymous users will receive the authorities on this domain from this group if specified"
                },
                "authenticationPolicyId": {
                    "type": "string",
                    "description": "The UUID of the authenticationPolicy that governs this domain"
                },
                "autoCreateUserGroupId": {
                    "type": "string"
                },
                "avatarId": {
                    "type": "string",
                    "description": "The primary key of an avatar of the same type as specified in avatarType"
                },
                "avatarType": {
                    "type": "string",
                    "description": "A valid avatar setting for this domain.",
                    "enum": [
                        "None",
                        "Uneeq",
                        "Quantum"
                    ]
                },
                "avatarVoice": {
                    "type": "string",
                    "description": "The default voice used when the avatar speaks in this domain"
                },
                "conversationSummaryCleanupDaysRetained": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of days of data to retain in the database after the cleanup summary job completes"
                },
                "customTranslationSettings": {
                    "type": "array",
                    "description": "Optional custom translation settings for this domain",
                    "items": {
                        "$ref": "#/definitions/TranslationSettingModel",
                        "originalRef": "TranslationSettingModel"
                    }
                },
                "defaultEscalationQueueId": {
                    "type": "string",
                    "description": "The UUID of an escalation queue to handle conversation escalations in this domain"
                },
                "domainBeanMappings": {
                    "type": "array",
                    "description": "A list of mappings, from one bean to another.  Each key needs to be unique",
                    "items": {
                        "$ref": "#/definitions/DomainBeanMappingModel",
                        "originalRef": "DomainBeanMappingModel"
                    }
                },
                "domainTemplateCode": {
                    "type": "string",
                    "description": "Template assigned while creating a Domain"
                },
                "enableAllSystemResponders": {
                    "type": "boolean",
                    "description": "If true, all system responders will be enabled and the list of subsystemResponderIds  will be ignored and all available responders added; if false, subsystemResponderIds should be provided. Defaults to true"
                },
                "ftHeaderImageId": {
                    "type": "string",
                    "description": "Face time header id"
                },
                "greetingBpnId": {
                    "type": "string",
                    "description": "If configured, the BPN to automatically run at the start of a conversation in this domain"
                },
                "greetingGoalId": {
                    "type": "string",
                    "description": "If configured, the intent to automatically run at the start of a conversation in this domain"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the domain"
                },
                "imageEnabled": {
                    "type": "boolean"
                },
                "inboundContentMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContentMaskModel",
                        "originalRef": "ContentMaskModel"
                    }
                },
                "integrationApiKey": {
                    "type": "string",
                    "description": "An api key any integration host must possess to run integrations for this domain.  If empty, domain will inherit from its parent"
                },
                "languageDetectionFilters": {
                    "type": "array",
                    "description": "The set of languageDetection filters for this domain",
                    "items": {
                        "$ref": "#/definitions/DomainLanguageDetectionModel",
                        "originalRef": "DomainLanguageDetectionModel"
                    }
                },
                "localeTag": {
                    "type": "string",
                    "description": "The language and locale of the domain"
                },
                "maintainDetectedLanguage": {
                    "type": "boolean",
                    "description": "Whether when translation is detected if the detected language should persist for future messages in the conversation"
                },
                "oneRpaInstanceId": {
                    "type": "string",
                    "description": "UUID of the OneRpa Instance connected to this domain"
                },
                "oneStoreInstanceId": {
                    "type": "string",
                    "description": "UUID of the 1Store instance connected to this domain"
                },
                "orchestratorConfigId": {
                    "type": "string",
                    "description": "Orchestrator configuration Id associated to Domain"
                },
                "orchestratorUserId": {
                    "type": "string",
                    "description": "User Id used for all operation in Amelia Orchestrator"
                },
                "parentCode": {
                    "type": "string",
                    "description": "The code if this domain's parent, if any",
                    "readOnly": true
                },
                "parentId": {
                    "type": "string",
                    "description": "The unique identifier of the parent domain, if any"
                },
                "preCloseBpnId": {
                    "type": "string",
                    "description": "If configured, the BPN to run right before a conversation is closed"
                },
                "preCloseSurveyBpnId": {
                    "type": "string",
                    "description": "If configured, a survey BPN to run right before a conversation is closed, before pre-close BPN"
                },
                "preEscalationBpnId": {
                    "type": "string",
                    "description": "If configured, the BPN to run when a conversation is escalated.  Can be used to gather other information from the user or even prevent escalation"
                },
                "runPreEscalationBpnOnTransfer": {
                    "type": "boolean"
                },
                "runTheWorkflowEnabled": {
                    "type": "boolean",
                    "description": "Whether to allow 'run the workflow' to kickoff BPNs"
                },
                "settings": {
                    "type": "array",
                    "description": "Advanced domain settings",
                    "items": {
                        "$ref": "#/definitions/DomainSettingModel",
                        "originalRef": "DomainSettingModel"
                    }
                },
                "stickyTranslationEnabled": {
                    "type": "boolean",
                    "description": "Whether or not this conversations translation is set to sticky translation. When this is set to true, translation will use the sticky language for translation rather than auto-detection."
                },
                "stickyTranslationLanguage": {
                    "type": "string",
                    "description": "When stick translation is enabled, this is the language the conversation will be translated to and from."
                },
                "subsystemResponderIds": {
                    "type": "array",
                    "description": "The UUID of subsystemResponders set to run on this domain",
                    "items": {
                        "type": "string"
                    }
                },
                "timeZoneId": {
                    "type": "string",
                    "description": "The id of the default time zone of this domain"
                },
                "tings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DomainSettingModel",
                        "originalRef": "DomainSettingModel"
                    }
                },
                "transcriptContentMasks": {
                    "type": "array",
                    "description": "The content masks used to mask sensitive information in the conversation transcripts export",
                    "items": {
                        "$ref": "#/definitions/ContentMaskModel",
                        "originalRef": "ContentMaskModel"
                    }
                },
                "uneeqEnabled": {
                    "type": "boolean",
                    "description": "Deprecated.  Kept only for backwards compatibility.  See avatarType and avatarId"
                },
                "uneeqLanguageSource": {
                    "type": "string",
                    "description": "The name of a configured uneeq language source for a domain. If null or empty, will use the default uneeq language source for this instance."
                },
                "userTranslationEnabled": {
                    "type": "boolean",
                    "description": "Whether or not this conversations will attempt to auto-translate user messages not in the domain's native language"
                },
                "version": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                },
                "virtualHostIds": {
                    "type": "array",
                    "description": "a set of primary keys of virtualHosts in which this domain will participate",
                    "items": {
                        "type": "string"
                    }
                },
                "webGlEnabled": {
                    "type": "boolean",
                    "description": "Deprecated.  Kept only for backwards compatibility.  See avatarType and avatarId"
                },
                "webPlayerEnabled": {
                    "type": "boolean"
                },
                "code": {
                    "type": "string",
                    "description": "The unique code of the domain"
                },
                "name": {
                    "type": "string",
                    "description": "The human readable name of the domain"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the domain is currently active for use"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "A flag suggesting it not display in UI widgets"
                }
            },
            "description": "A convenience version of AdminDomainModel for use in updating, to include the optional enableAllSystemResponders and addDefaultVirtualHost properties"
        },
        "CustomAttributesMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "customAttributes": {
                    "type": "object",
                    "description": "Custom Attributes associated to conversation."
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message is sent from Amelia to send all custom attributes associated to conversation"
        },
        "CyclicNodeModel": {
            "type": "object",
            "properties": {
                "edge": {
                    "type": "string",
                    "description": "The name of this edge"
                },
                "value": {
                    "type": "object",
                    "description": "The value of this node"
                }
            },
            "description": "Edge and value of a node"
        },
        "DatumModel": {
            "type": "object",
            "properties": {
                "datumModelList": {
                    "type": "array",
                    "description": "Individual fields of a composite datum",
                    "items": {
                        "$ref": "#/definitions/DatumModel",
                        "originalRef": "DatumModel"
                    }
                },
                "datumType": {
                    "type": "string",
                    "description": "Datum type, e.g. PERSON, or DATE"
                },
                "description": {
                    "type": "string",
                    "description": "Human-readable description of this datum"
                },
                "end": {
                    "description": "Represents the end of the range for a range datum",
                    "$ref": "#/definitions/DatumModel",
                    "originalRef": "DatumModel"
                },
                "label": {
                    "type": "string",
                    "description": "Human-readable label for datum"
                },
                "negated": {
                    "type": "boolean",
                    "description": "Extracted fields for a composite entity"
                },
                "start": {
                    "description": "Represents the start of the range for a range datum",
                    "$ref": "#/definitions/DatumModel",
                    "originalRef": "DatumModel"
                },
                "text": {
                    "type": "string",
                    "description": "Text of extracted datum"
                }
            }
        },
        "DeferredResult«List«MessageFromAmelia»»": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "object"
                },
                "setOrExpired": {
                    "type": "boolean"
                }
            }
        },
        "DeployBpnModelCommand": {
            "type": "object",
            "required": [
                "failOnErrors",
                "failOnWarnings"
            ],
            "properties": {
                "failOnErrors": {
                    "type": "boolean",
                    "description": "If true, fail on errors, deploy if all messages are warning or lower"
                },
                "failOnWarnings": {
                    "type": "boolean",
                    "description": "If true, fail on errors or warnings, deploy if all messages are info or lower"
                },
                "ignoreRulesCodes": {
                    "type": "array",
                    "description": "Any violations of rules codes in this list will not be stop deployment, regardless of their presence in either the warnings or errors lists",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "description": "To deploy a given bpn process"
        },
        "DeployIntegrationFlowCommand": {
            "type": "object",
            "properties": {
                "clusterIds": {
                    "type": "array",
                    "description": "A list of primary keys of clusters which should receive this command, no longer useed",
                    "items": {
                        "type": "string"
                    }
                },
                "confirm": {
                    "type": "boolean",
                    "description": "include confirm true to issue the deployment command and override warnings"
                },
                "hostIds": {
                    "type": "array",
                    "description": "A list of primary keys of hosts which should receive this command, no longer userd",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the integration flow to deploy"
                }
            },
            "description": "To deploy a given integration flow"
        },
        "DeployModel": {
            "type": "object",
            "required": [
                "success"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "On failure, a top-level, non-validation error message, if any"
                },
                "success": {
                    "type": "boolean",
                    "description": "true if the deployment succeeded, false otherwise"
                },
                "validationModel": {
                    "description": "The results of the attempt to validate the bpn for deployment",
                    "$ref": "#/definitions/BpnValidationModel",
                    "originalRef": "BpnValidationModel"
                }
            },
            "description": "The response to a request to deploy a bpn"
        },
        "DocumentElementMetadata": {
            "type": "object",
            "properties": {
                "levelDepth": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Depth Level"
                },
                "levelFormat": {
                    "type": "string",
                    "description": "Format Level"
                },
                "levelText": {
                    "type": "string",
                    "description": "Text Level"
                }
            }
        },
        "DocumentListModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for this document"
                },
                "name": {
                    "type": "string",
                    "description": "A human-readable identifying name for this document"
                }
            }
        },
        "DocumentModel": {
            "type": "object",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Target domain for this document"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for this document"
                },
                "name": {
                    "type": "string",
                    "description": "A human-readable identifying name for this document"
                }
            }
        },
        "DocumentRevisionListModel": {
            "type": "object",
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "The creator of this revision"
                },
                "documentId": {
                    "type": "string",
                    "description": "The unique identifier of the document of which this a revision"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for this document revision"
                },
                "metadata": {
                    "description": "The metadata associated with this revision",
                    "$ref": "#/definitions/DocumentRevisionMetadata",
                    "originalRef": "DocumentRevisionMetadata"
                },
                "modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When this revision was last modified"
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "The user who last modified this revision"
                },
                "name": {
                    "type": "string",
                    "description": "A human-readable identifying name for this document"
                }
            }
        },
        "DocumentRevisionMetadata": {
            "type": "object",
            "properties": {
                "goals": {
                    "type": "array",
                    "description": "Metadata about the goals for this document revision",
                    "items": {
                        "$ref": "#/definitions/GoalMetaData",
                        "originalRef": "GoalMetaData"
                    }
                },
                "noOfGoals": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of goals for this document revision"
                },
                "noOfSlots": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of slots for this document revision"
                },
                "noOfUtterances": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of utterances for this document revision"
                },
                "slots": {
                    "type": "array",
                    "description": "Metadata about the slot for this document revision",
                    "items": {
                        "$ref": "#/definitions/SlotMetaData",
                        "originalRef": "SlotMetaData"
                    }
                }
            }
        },
        "DocumentRevisionModel": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "array",
                    "description": "List of utterance-level annotations in this document",
                    "items": {
                        "$ref": "#/definitions/UtteranceAnnotation",
                        "originalRef": "UtteranceAnnotation"
                    }
                },
                "document": {
                    "description": "The parent document of this revision",
                    "$ref": "#/definitions/DocumentModel",
                    "originalRef": "DocumentModel"
                },
                "documentRevisionNumber": {
                    "description": "Revision number for this document (a new revision is created upon each update)",
                    "$ref": "#/definitions/RevisionNumber",
                    "originalRef": "RevisionNumber"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for this document revision"
                },
                "name": {
                    "type": "string",
                    "description": "An identifying name for this document revision"
                },
                "revisionStatus": {
                    "type": "string",
                    "description": "Revision status of this document"
                }
            }
        },
        "DocumentRevisionSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DocumentRevisionListModel",
                        "originalRef": "DocumentRevisionListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DocumentSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DocumentListModel",
                        "originalRef": "DocumentListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DomainBeanMappingModel": {
            "type": "object",
            "properties": {
                "defaultName": {
                    "type": "string",
                    "description": "The original name of the mapping"
                },
                "overrideName": {
                    "type": "string",
                    "description": "The value with which to override the name"
                }
            }
        },
        "DomainChangeMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "emoticon": {
                    "type": "string",
                    "description": "Emoticon name generated by humanization, if any."
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hintText": {
                    "type": "string",
                    "description": "Hint text"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "newDomainId": {
                    "type": "string",
                    "description": "The primary key of the new domain"
                },
                "outboundFormInputCorrelationId": {
                    "type": "string",
                    "description": "Correlates this message with a subsequent FormInputMessage. If exists, this message would be the question for the subsequent form input data."
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "responsePoolContext": {
                    "description": "If this message was generated from a response pool, the response pool context.",
                    "$ref": "#/definitions/ResponsePoolContext",
                    "originalRef": "ResponsePoolContext"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "speechMessageText": {
                    "type": "string",
                    "description": "Message text marked up with speech tags (technology-specific), when speech utterance annotations are available."
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent when Amelia sends a notice of domain change"
        },
        "DomainLanguageDetectionModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The primary key of this language detection filter instance"
                },
                "match": {
                    "type": "string",
                    "description": "The regular expression used to match to a language"
                }
            }
        },
        "DomainPredictionModel": {
            "type": "object",
            "properties": {
                "domain": {
                    "description": "The predicted domain",
                    "$ref": "#/definitions/AdminDomainListModel",
                    "originalRef": "AdminDomainListModel"
                },
                "score": {
                    "type": "number",
                    "format": "double",
                    "description": "The score of the prediction"
                }
            }
        },
        "DomainSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AdminDomainListModel",
                        "originalRef": "AdminDomainListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DomainSettingModel": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The setting name"
                },
                "value": {
                    "type": "string",
                    "description": "The setting value"
                }
            }
        },
        "DomainTemplateSettingModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Code of the template"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the template"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the template"
                }
            }
        },
        "DownloadResourceResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "format": "byte",
                    "description": "Actual file contents"
                },
                "contentDisposition": {
                    "type": "string",
                    "description": "Content disposition response header"
                },
                "contentLength": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Content length"
                },
                "contentType": {
                    "type": "string",
                    "description": "Content type"
                }
            }
        },
        "EchoMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message echoing inbound utterances back to the user after processing"
        },
        "EffectiveAuthorityModel": {
            "type": "object",
            "properties": {
                "authority": {
                    "type": "string",
                    "description": "The authority code being granted"
                },
                "domainName": {
                    "type": "string",
                    "description": "The name of domain in which this authority is granted, or empty if global"
                },
                "global": {
                    "type": "boolean",
                    "description": "True if this grant is global, false if it belongs to a specific domain"
                },
                "groupName": {
                    "type": "string",
                    "description": "The name of the User Group granting this authority"
                }
            }
        },
        "EffectiveAuthoritySearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EffectiveAuthorityModel",
                        "originalRef": "EffectiveAuthorityModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "EntityDurationSummaryModel": {
            "type": "object",
            "properties": {
                "abandoned": {
                    "type": "integer",
                    "format": "int64",
                    "description": "the number of abandoned conversations"
                },
                "agentAbandoned": {
                    "type": "integer",
                    "format": "int64",
                    "description": "the number of conversations abandoned by an agent"
                },
                "agentHandled": {
                    "type": "integer",
                    "format": "int64",
                    "description": "the number of conversations handled by an agent"
                },
                "ameliaAbandoned": {
                    "type": "integer",
                    "format": "int64",
                    "description": "the number of conversations abandoned by Amelia"
                },
                "ameliaHandled": {
                    "type": "integer",
                    "format": "int64",
                    "description": "the number of conversations handled by Amelia"
                },
                "avgAnswerSpeed": {
                    "type": "string",
                    "description": "the average answer speed of an escalation"
                },
                "avgHandleTime": {
                    "type": "string",
                    "description": "the average handle time of an escalation"
                },
                "end": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the end of this summary window"
                },
                "escalateAbandoned": {
                    "type": "integer",
                    "format": "int64",
                    "description": "the number of escalations abandoned"
                },
                "escalated": {
                    "type": "integer",
                    "format": "int64",
                    "description": "the number of conversations escalated"
                },
                "maxAnswerSpeed": {
                    "type": "string",
                    "description": "the maximum answer speed of an escalation"
                },
                "maxConcurrent": {
                    "type": "integer",
                    "format": "int64",
                    "description": "the maximum number of concurrent conversations"
                },
                "maxHandleTime": {
                    "type": "string",
                    "description": "the maximum handle time of an escalation"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the domain"
                },
                "slaViolations": {
                    "type": "integer",
                    "format": "int64",
                    "description": "the number of sla violations"
                },
                "start": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the start of this summary window"
                },
                "summaryType": {
                    "type": "string",
                    "description": "the type of summary metric being calculated",
                    "enum": [
                        "DOMAIN",
                        "AGENT",
                        "ESCALATION_QUEUE",
                        "BPN_MODEL_NAME",
                        "BPN_ROOT_PATH"
                    ]
                },
                "timeZone": {
                    "type": "string",
                    "description": "the time zone of this summary window"
                },
                "total": {
                    "type": "integer",
                    "format": "int64",
                    "description": "the total number of conversations"
                }
            }
        },
        "EntityListModel": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "true if active, false if disabled"
                },
                "code": {
                    "type": "string",
                    "description": "Entity code"
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Instant this entity was created"
                },
                "createdBy": {
                    "type": "string",
                    "description": "User that created this entity"
                },
                "datumType": {
                    "type": "string",
                    "description": "Datum type used for built-in normalization and extraction"
                },
                "description": {
                    "type": "string",
                    "description": "Entity description"
                },
                "hasParent": {
                    "type": "boolean",
                    "description": "Indicates whether this entity is a role entity and has a corresponding parent entity."
                },
                "id": {
                    "type": "string",
                    "description": "Entity primary key used for administrative functions such as training"
                },
                "modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Instant this entity was last modified"
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "User that last modified this entity"
                },
                "name": {
                    "type": "string",
                    "description": "Entity name"
                },
                "slotId": {
                    "type": "string",
                    "description": "Entity definition key"
                }
            }
        },
        "EntityModel": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "description": "Child entity IDs",
                    "items": {
                        "type": "string"
                    }
                },
                "code": {
                    "type": "string",
                    "description": "Entity code"
                },
                "compositeFieldGroups": {
                    "type": "array",
                    "description": "List of composite entity field groups for this entity (only applicable with COMPOSITE datumType)",
                    "items": {
                        "$ref": "#/definitions/SlotFieldGroupModel",
                        "originalRef": "SlotFieldGroupModel"
                    }
                },
                "compositeFields": {
                    "type": "array",
                    "description": "List of composite entity fields for this entity (only applicable with COMPOSITE datumType)",
                    "items": {
                        "$ref": "#/definitions/SlotFieldModel",
                        "originalRef": "SlotFieldModel"
                    }
                },
                "contextScoped": {
                    "type": "boolean",
                    "description": "Indicates whether instances of this entity should be scoped to their original contexts."
                },
                "datumType": {
                    "type": "string",
                    "example": "CURRENCY",
                    "description": "Datum type used for built-in extractors and normalizer"
                },
                "description": {
                    "type": "string",
                    "description": "Description of entity"
                },
                "domain": {
                    "type": "string",
                    "description": "Entity domain primary key"
                },
                "entityId": {
                    "type": "string",
                    "description": "Entity primary key"
                },
                "id": {
                    "type": "string"
                },
                "intentScoped": {
                    "type": "boolean",
                    "description": "Indicates whether this entity should be scoped to intents for extraction."
                },
                "intents": {
                    "type": "array",
                    "description": "List of codes for intents this entity is scoped to for extraction.",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name of entity"
                },
                "normalizer": {
                    "description": "Entity custom normalizer (only used with CUSTOM_DATUM datumType)",
                    "$ref": "#/definitions/EntityNormalizerModel",
                    "originalRef": "EntityNormalizerModel"
                },
                "normalizerParams": {
                    "description": "Entity-specific normalization parameters used to, for example, configure default units for datums",
                    "$ref": "#/definitions/NormalizerParams",
                    "originalRef": "NormalizerParams"
                },
                "overlaps": {
                    "type": "boolean",
                    "description": "If true, this entity is allowed to overlap with other entities of the same type within an utterance."
                },
                "parent": {
                    "type": "string",
                    "description": "Parent slot ID"
                },
                "role": {
                    "type": "boolean",
                    "description": "Boolean indicating whether this is a child entity."
                },
                "roleType": {
                    "type": "string",
                    "description": "Role of an entity based on the context",
                    "enum": [
                        "NONE",
                        "START",
                        "END",
                        "PARTICIPANT"
                    ]
                },
                "spanless": {
                    "type": "boolean",
                    "description": "Boolean indicating whether this is a spanless entity."
                },
                "status": {
                    "type": "string",
                    "description": "The status of this entity",
                    "enum": [
                        "ACTIVE",
                        "DISABLED"
                    ]
                },
                "trainable": {
                    "type": "boolean",
                    "description": "Indicates whether the composite entity is trainable or not. "
                }
            }
        },
        "EntityModelSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EntityListModel",
                        "originalRef": "EntityListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "EntityNormalizerModel": {
            "type": "object",
            "properties": {
                "fallback": {
                    "type": "string",
                    "description": "Fallback string normalized to when fallbackType strategy is PROVIDED"
                },
                "fallbackType": {
                    "type": "string",
                    "description": "Fallback strategy when unable to normalize a span of text",
                    "enum": [
                        "NONE",
                        "PROVIDED",
                        "ORIGINAL"
                    ]
                },
                "gazetteerType": {
                    "type": "string",
                    "description": "Gazetteer/lookup table matching strategy (ued with GAZETTEER lookupType)",
                    "enum": [
                        "Gazetteer",
                        "RegexGazetteer",
                        "ApproximateGazetteer"
                    ]
                },
                "grammarId": {
                    "type": "string",
                    "description": "Primary key of grammar used for normalization (used with GRAMMAR lookupType)"
                },
                "id": {
                    "type": "string",
                    "description": "Entity normalizer primary key"
                },
                "inputCol": {
                    "type": "string",
                    "description": "Primary key of input column, values of which are matched against input text"
                },
                "lookupType": {
                    "type": "string",
                    "description": "General strategy for mapping un-normalized text to normalized forms",
                    "enum": [
                        "GAZETTEER",
                        "GRAMMAR"
                    ]
                },
                "normalizerType": {
                    "type": "string",
                    "description": "Entity normalizer type",
                    "enum": [
                        "NORMALIZE",
                        "EXTRACT_AND_NORMALIZE",
                        "EXTRACT"
                    ]
                },
                "outputCol": {
                    "type": "string",
                    "description": "Primary key of output column for normalized values"
                },
                "stringFunctions": {
                    "type": "array",
                    "description": "String functions applied to lookup table and inputs prior to lookup",
                    "items": {
                        "type": "string",
                        "enum": [
                            "LowerCase",
                            "NormalizeUnicode",
                            "IgnoreDigits"
                        ]
                    }
                },
                "tableName": {
                    "type": "string",
                    "description": "Unique name of table used for lookup"
                }
            }
        },
        "EntityPrediction": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Entity code, uniquely identifying it within a given domain"
                },
                "datumText": {
                    "type": "string",
                    "description": "Datum text, such as original text if entity came from a span"
                },
                "datumType": {
                    "type": "string",
                    "description": "Datum type of this entity"
                },
                "datumValue": {
                    "type": "string",
                    "description": "Formatted datum value, using the default formatter for the datum type"
                },
                "fields": {
                    "type": "array",
                    "description": "Composite entity fields (sub-entities)",
                    "items": {
                        "$ref": "#/definitions/EntityPrediction",
                        "originalRef": "EntityPrediction"
                    }
                },
                "inScope": {
                    "type": "boolean",
                    "description": "Indicates whether this entity is scoped to the current context's intent"
                },
                "negated": {
                    "type": "boolean",
                    "description": "Indicates whether this entity was identified as negated"
                },
                "slotId": {
                    "type": "string",
                    "description": "ID of corresponding slot for this entity prediction"
                }
            },
            "description": "Entity prediction results / metadata."
        },
        "EntityQuestionModel": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "array",
                    "description": "Annotations",
                    "items": {
                        "$ref": "#/definitions/UtteranceAnnotationModel",
                        "originalRef": "UtteranceAnnotationModel"
                    }
                },
                "entityId": {
                    "type": "string",
                    "description": "Entity primary key"
                },
                "id": {
                    "type": "string",
                    "description": "Entity question primary key"
                },
                "slotId": {
                    "type": "string",
                    "description": "Slot primary key"
                },
                "text": {
                    "type": "string",
                    "description": "Question text"
                }
            }
        },
        "EntityUtteranceModel": {
            "type": "object",
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": "Entity primary key"
                },
                "id": {
                    "type": "string",
                    "description": "Entity utterance primary key"
                },
                "text": {
                    "type": "string",
                    "description": "Entity utterance text"
                },
                "value": {
                    "type": "string",
                    "description": "Entity utterance label"
                }
            }
        },
        "EscalationAnnotationMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message to show auto detected intents and entities in user ui to agent"
        },
        "EscalationKickoffMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "escalationAttributes": {
                    "type": "object",
                    "description": "Escalation attributes",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "escalationQueue": {
                    "type": "string",
                    "description": "Escalation queue name"
                },
                "escalationReason": {
                    "type": "string",
                    "description": "Escalation reason"
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "A message instructing Amelia to kick off escalation to Agent."
        },
        "EscalationQueueListModel": {
            "type": "object",
            "properties": {
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain of this queue"
                },
                "domainName": {
                    "type": "string",
                    "description": "The name of the domain of this queue"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this queue is enabled or not"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the queue"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the queue"
                }
            }
        },
        "EscalationQueueModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The code of this queue"
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain to which this queue belongs"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this queue is enabled or not"
                },
                "escalationTimeout": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The escalation notification timeout, in seconds"
                },
                "handleTimeSla": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The handle time SLA, in seconds"
                },
                "handleTimeWarning": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The warning time SLA that an escalation should be handled, in seconds"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of this escalation queue"
                },
                "lastInteractionTimeSla": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The agent interaction time SLA, in seconds"
                },
                "lastInteractionTimeWarning": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The warning time SLA that an agent should respond to a user, in seconds"
                },
                "maxConsecutiveTimeouts": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The maximum number of consecutive timeouts"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this queue"
                },
                "pickupTimeSla": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The pickup time SLA, in seconds"
                },
                "pickupTimeWarning": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The warning time SLA that a pickup is needed, in seconds"
                },
                "preEscalationBpnId": {
                    "type": "string",
                    "description": "The primary key of the BPN to run when a conversation is escalated to this queue"
                },
                "runPreEscalationBpnOnTransfer": {
                    "type": "boolean",
                    "description": "Whether to run the pre-escalation BPN when a conversation is transferred to this queue"
                },
                "supervisorGroupId": {
                    "type": "string",
                    "description": "The primary key of the user group that can manage agents/teams in this queue"
                },
                "teams": {
                    "type": "array",
                    "description": "The escalation teams associated with this queue",
                    "items": {
                        "$ref": "#/definitions/EscalationTeamListModel",
                        "originalRef": "EscalationTeamListModel"
                    }
                },
                "userIdleTime": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The time after an agent utterance that a user will be marked as idle, in seconds"
                }
            }
        },
        "EscalationQueueSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EscalationQueueListModel",
                        "originalRef": "EscalationQueueListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "EscalationStartedMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType",
                "queue",
                "reason"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "escalationAttributes": {
                    "type": "object",
                    "description": "Additional attributes for the escalation, typically supplied by a pre-escalation BPN.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "queue": {
                    "type": "string",
                    "description": "The queue of the escalation"
                },
                "reason": {
                    "type": "string",
                    "description": "The reason for the escalation"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "responsePoolContext": {
                    "description": "If this message was generated from a response pool, the context of the response pool.",
                    "$ref": "#/definitions/ResponsePoolContext",
                    "originalRef": "ResponsePoolContext"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent when Amelia starts to escalation a conversation"
        },
        "EscalationTeamListModel": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this team is enabled or not"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the team"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team"
                }
            }
        },
        "EscalationTeamMemberModel": {
            "type": "object",
            "properties": {
                "maxAgentActiveChats": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Maximum active chats for the agent."
                },
                "userId": {
                    "type": "string",
                    "description": "Primary ID of the user."
                }
            }
        },
        "EscalationTeamModel": {
            "type": "object",
            "properties": {
                "amembers": {
                    "type": "array",
                    "description": "Team member models of users who are assigned to this team",
                    "items": {
                        "$ref": "#/definitions/EscalationTeamMemberModel",
                        "originalRef": "EscalationTeamMemberModel"
                    }
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the single domain this team can service"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this team is enabled or not"
                },
                "escalateFri": {
                    "type": "boolean",
                    "description": "if in a custom schedule, whether to accept escalations on Friday"
                },
                "escalateMon": {
                    "type": "boolean",
                    "description": "if in a custom schedule, whether to accept escalations on Monday"
                },
                "escalateSat": {
                    "type": "boolean",
                    "description": "if in a custom schedule, whether to accept escalations on Saturday"
                },
                "escalateSun": {
                    "type": "boolean",
                    "description": "if in a custom schedule, whether to accept escalations on Sunday"
                },
                "escalateThu": {
                    "type": "boolean",
                    "description": "if in a custom schedule, whether to accept escalations on Thursday"
                },
                "escalateTue": {
                    "type": "boolean",
                    "description": "if in a custom schedule, whether to accept escalations on Tuesday"
                },
                "escalateWed": {
                    "type": "boolean",
                    "description": "if in a custom schedule, whether to accept escalations on Wednesday"
                },
                "friEnd": {
                    "description": "The end of the escalation shift on Friday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "friStart": {
                    "description": "The beginning of the escalation shift on Friday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "global": {
                    "type": "boolean",
                    "description": "Whether this team is globally available to service queues or not"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of this escalation team"
                },
                "members": {
                    "type": "array",
                    "description": "The primary keys of users who are assigned to this team",
                    "items": {
                        "type": "string"
                    }
                },
                "monEnd": {
                    "description": "The end of the escalation shift on Monday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "monStart": {
                    "description": "The beginning of the escalation shift on Monday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this team"
                },
                "queues": {
                    "type": "array",
                    "description": "The primary keys of queues to which this escalation team responds",
                    "items": {
                        "type": "string"
                    }
                },
                "satEnd": {
                    "description": "The end of the escalation shift on Saturday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "satStart": {
                    "description": "The beginning of the escalation shift on Saturday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "sunEnd": {
                    "description": "The end of the escalation shift on Sunday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "sunStart": {
                    "description": "The beginning of the escalation shift on Sunday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "thuEnd": {
                    "description": "The end of the escalation shift on Thursday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "thuStart": {
                    "description": "The beginning of the escalation shift on Thursday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "timeZoneId": {
                    "type": "string",
                    "description": "the time zone under which this team operates"
                },
                "tueEnd": {
                    "description": "The end of the escalation shift on Tuesday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "tueStart": {
                    "description": "The beginning of the escalation shift on Tuesday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "useCustomSchedule": {
                    "type": "boolean",
                    "description": "true if using a custom schedule, false otherwise"
                },
                "wedEnd": {
                    "description": "The end of the escalation shift on Wednesday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                },
                "wedStart": {
                    "description": "The beginning of the escalation shift on Wednesday",
                    "$ref": "#/definitions/LocalTime",
                    "originalRef": "LocalTime"
                }
            }
        },
        "EscalationTeamSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EscalationTeamListModel",
                        "originalRef": "EscalationTeamListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "EvalStatsModel": {
            "type": "object",
            "properties": {
                "rows": {
                    "type": "array",
                    "description": "Per-label evaluation statistics",
                    "items": {
                        "$ref": "#/definitions/EvalStatsRow",
                        "originalRef": "EvalStatsRow"
                    }
                },
                "summary": {
                    "description": "Summary of evaluations statistics micro-averaged across all labels",
                    "$ref": "#/definitions/EvalStatsRow",
                    "originalRef": "EvalStatsRow"
                }
            }
        },
        "EvalStatsRow": {
            "type": "object",
            "properties": {
                "correct": {
                    "type": "integer",
                    "format": "int32",
                    "description": "True positives (TP): The number of times this label was correctly predicted"
                },
                "f1": {
                    "type": "number",
                    "format": "double",
                    "description": "The F1 score for this label"
                },
                "gold": {
                    "type": "integer",
                    "format": "int32",
                    "description": "True positives plus false negatives (TP + FN): The number of instances with this label"
                },
                "label": {
                    "type": "string",
                    "description": "The label for this per-label evaluation statistics row"
                },
                "precision": {
                    "type": "number",
                    "format": "double",
                    "description": "The precision for this label"
                },
                "recall": {
                    "type": "number",
                    "format": "double",
                    "description": "The recall for this label"
                },
                "system": {
                    "type": "integer",
                    "format": "int32",
                    "description": "True positives plus false positives (TP + FP): the number of instances that were predicted as having this label"
                }
            }
        },
        "EventData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name of this data point",
                    "readOnly": true
                },
                "value": {
                    "type": "string",
                    "description": "the value of this data point",
                    "readOnly": true
                }
            }
        },
        "ExecuteIntegrationFlowRequest": {
            "type": "object",
            "required": [
                "domainCode",
                "serviceId"
            ],
            "properties": {
                "callerName": {
                    "type": "string",
                    "description": "An name that will be passed to the service and included in log messages"
                },
                "delayMs": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Optional delay in milliseconds of message routing to integration services"
                },
                "domainCode": {
                    "type": "string",
                    "description": "The code of the domain in which the flow resides"
                },
                "executionGroup": {
                    "type": "string",
                    "description": "The execution group to route this request; if omitted, Amelia will use the default configured group. If specified, must be valid on the Amelia instance being contacted"
                },
                "logThreshold": {
                    "type": "string",
                    "description": "The threshold of logging messages to return in the response, defaults to WARN",
                    "enum": [
                        "TRACE",
                        "DEBUG",
                        "INFO",
                        "WARN",
                        "ERROR",
                        "OFF"
                    ]
                },
                "serviceId": {
                    "type": "string",
                    "description": "The code of the flow of the service to execute"
                },
                "variables": {
                    "type": "object",
                    "description": "A map of variables to pass to the flow during execution.  Each key must be a string; the value  can be any object that can be passed as json, but the client is responsible for submitting variables that can be properly serialized/deserialized, and for handling them in the flow execution"
                }
            }
        },
        "ExecuteIntegrationFlowResponse": {
            "type": "object",
            "properties": {
                "integrationHostId": {
                    "type": "string",
                    "description": "The primary key of the integration host that handled the integration service call"
                },
                "messages": {
                    "type": "array",
                    "description": "The log messages output from the integration service call",
                    "items": {
                        "$ref": "#/definitions/RemoteLogStruct",
                        "originalRef": "RemoteLogStruct"
                    }
                },
                "outputErrors": {
                    "type": "object",
                    "description": "The errors output from the integration service call"
                },
                "outputVariables": {
                    "type": "object",
                    "description": "The variables output from the integration service call"
                },
                "requestId": {
                    "type": "string",
                    "description": "The requestId for the integration service call"
                }
            }
        },
        "ExportEntitiesJsonCommand": {
            "type": "object",
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "True to export all intents in a domain, false otherwise"
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain whose intents you wish to export"
                },
                "entities": {
                    "type": "array",
                    "description": "True the primary keys of entities you wish to export.  Ignored if all = true",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ExportEntitiesTsvCommand": {
            "type": "object",
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "True to export all intents in a domain, false otherwise"
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain whose intents you wish to export"
                },
                "entities": {
                    "type": "array",
                    "description": "True the primary keys of entities you wish to export.  Ignored if all = true",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ExportIntentsTsvCommand": {
            "type": "object",
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "True to export all intents in a domain, false otherwise"
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain whose intents you wish to export"
                },
                "intents": {
                    "type": "array",
                    "description": "True the primary keys of intents you wish to export.  Ignored if all = true",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FaqPredictionModel": {
            "type": "object",
            "properties": {
                "currentPrediction": {
                    "type": "string",
                    "description": "Returns the predicted FAQ (if any) and reason for selection."
                },
                "predictionList": {
                    "type": "array",
                    "description": "Returns a list of matched FAQ Question/Answer pairs with entailment and similarity scores.",
                    "items": {
                        "$ref": "#/definitions/FaqPredictionResultModel",
                        "originalRef": "FaqPredictionResultModel"
                    }
                }
            }
        },
        "FaqPredictionResultModel": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string",
                    "description": "Response generated by Amelia via FAQ."
                },
                "entailmentScore": {
                    "type": "number",
                    "format": "float",
                    "description": "Entailment score between question and answer."
                },
                "matched": {
                    "type": "boolean",
                    "description": "Whether the question matched the answer enough to reach the cutoff threshold value."
                },
                "paragramSimilarity": {
                    "type": "number",
                    "format": "double",
                    "description": "Paragram Similarity score between question and answer."
                },
                "question": {
                    "type": "string",
                    "description": "Question asked by the user"
                }
            }
        },
        "FeatureExtractorModel": {
            "type": "object",
            "required": [
                "checkForNegation",
                "extractorType",
                "fallbackType",
                "gazetteerType",
                "resource",
                "stringFunctions"
            ],
            "properties": {
                "checkForNegation": {
                    "type": "boolean",
                    "description": "Boolean that checks the context of the feature for negation, and differentiates negated contexts of this feature from non-negated contexts"
                },
                "extractorType": {
                    "type": "string",
                    "description": "Extractor function type",
                    "enum": [
                        "Form",
                        "Lemma",
                        "Gazetteer",
                        "Fallback",
                        "Prediction"
                    ]
                },
                "fallbackType": {
                    "type": "string",
                    "description": "Extractor function type applied as a fallback for non-matching gazetteer functions",
                    "enum": [
                        "Form",
                        "Lemma"
                    ]
                },
                "gazetteerType": {
                    "type": "string",
                    "description": "Gazetteer type used by Gazetteer and Fallback extractor types",
                    "enum": [
                        "Gazetteer",
                        "RegexGazetteer",
                        "ApproximateGazetteer"
                    ]
                },
                "resource": {
                    "description": "Resource used by this feature extractor, such as a table mapping",
                    "$ref": "#/definitions/FeatureResourceModel",
                    "originalRef": "FeatureResourceModel"
                },
                "stringFunctions": {
                    "type": "array",
                    "description": "List of string functions applied to the result of the feature extractor function",
                    "items": {
                        "type": "string",
                        "enum": [
                            "IgnoreDigits",
                            "LowerCase",
                            "NormalizeDigits",
                            "NormalizeUnicode",
                            "NormalizeWords",
                            "Prefix",
                            "Suffix"
                        ]
                    }
                }
            }
        },
        "FeatureModel": {
            "type": "object",
            "required": [
                "context",
                "name"
            ],
            "properties": {
                "context": {
                    "type": "string",
                    "description": "Context type to apply extractor over",
                    "enum": [
                        "Unigrams",
                        "Bigrams",
                        "Semantic Bigrams",
                        "Syntactic Bigrams",
                        "Subjects",
                        "Objects"
                    ]
                },
                "extractor": {
                    "description": "Extractor model, a function applied over each context for this feature extractor",
                    "$ref": "#/definitions/FeatureExtractorModel",
                    "originalRef": "FeatureExtractorModel"
                },
                "name": {
                    "type": "string",
                    "description": "Identifying and differentiating name of feature extractor"
                },
                "offsets": {
                    "type": "array",
                    "description": "List of offsets used for collocation context type (only used in entity taggers)",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            }
        },
        "FeaturePipelineModel": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "array",
                    "description": "Feature extractors used during feature extraction",
                    "items": {
                        "$ref": "#/definitions/FeatureModel",
                        "originalRef": "FeatureModel"
                    }
                },
                "processors": {
                    "type": "array",
                    "description": "Pre-processor models applied prior to feature extraction",
                    "items": {
                        "$ref": "#/definitions/FeaturePreprocessorModel",
                        "originalRef": "FeaturePreprocessorModel"
                    }
                }
            }
        },
        "FeaturePreprocessorModel": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "fullPunctuationRegex": {
                    "type": "string",
                    "description": "Regular expression applied to the 'entire' utterance for removing punctuation"
                },
                "name": {
                    "type": "string",
                    "description": "Identifying and differentiating name of preprocessor"
                },
                "punctuationRegex": {
                    "type": "string",
                    "description": "Regular expression applied to end of utterance for removing punctuation"
                },
                "replaceWords": {
                    "type": "string",
                    "description": "Comma-separated list of words to be replaced. Used for whitelisting coref mentions."
                },
                "stopWords": {
                    "type": "string",
                    "description": "Comma-separated list of stopwords removed before computing features"
                },
                "type": {
                    "type": "string",
                    "description": "Types of preprocessors",
                    "enum": [
                        "PunctuationFilter",
                        "StopwordFilter",
                        "FullPunctuationFilter",
                        "ReplaceMentions"
                    ]
                }
            },
            "description": "Json to represent features of the utterance that are removed before being passed as input to the model. For ex, \"PunctuationFilter\" type, \"punctuationRegex\" field is [[!\"#$%&'()*+,-./:;<=>@^_`{|}~\\[\\]\\\\]+]."
        },
        "FeatureResourceModel": {
            "type": "object",
            "required": [
                "keyColumn",
                "mappingColumn",
                "tableName"
            ],
            "properties": {
                "keyColumn": {
                    "type": "string",
                    "description": "Name of key column in table used when mapping inputs to values"
                },
                "mappingColumn": {
                    "type": "string",
                    "description": "Name of value column in table for resulting mapping after a key is matched"
                },
                "tableName": {
                    "type": "string",
                    "description": "Name of table references by this feature resource"
                }
            }
        },
        "File": {
            "type": "object",
            "properties": {
                "absolute": {
                    "type": "boolean"
                },
                "absoluteFile": {
                    "$ref": "#/definitions/File",
                    "originalRef": "File"
                },
                "absolutePath": {
                    "type": "string"
                },
                "canonicalFile": {
                    "$ref": "#/definitions/File",
                    "originalRef": "File"
                },
                "canonicalPath": {
                    "type": "string"
                },
                "directory": {
                    "type": "boolean"
                },
                "executable": {
                    "type": "boolean"
                },
                "file": {
                    "type": "boolean"
                },
                "freeSpace": {
                    "type": "integer",
                    "format": "int64"
                },
                "hidden": {
                    "type": "boolean"
                },
                "lastModified": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "parent": {
                    "type": "string"
                },
                "parentFile": {
                    "$ref": "#/definitions/File",
                    "originalRef": "File"
                },
                "path": {
                    "type": "string"
                },
                "readable": {
                    "type": "boolean"
                },
                "totalSpace": {
                    "type": "integer",
                    "format": "int64"
                },
                "usableSpace": {
                    "type": "integer",
                    "format": "int64"
                },
                "writable": {
                    "type": "boolean"
                }
            }
        },
        "ForbiddenHostException": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable",
                    "originalRef": "Throwable"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement",
                        "originalRef": "StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable",
                        "originalRef": "Throwable"
                    }
                }
            }
        },
        "ForceLogoutCommand": {
            "type": "object",
            "required": [
                "adminPassword",
                "adminUsername",
                "emailToLogout"
            ],
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "description": "The rest gateway local password of the rest user who can perform this action"
                },
                "adminUsername": {
                    "type": "string",
                    "description": "The rest gateway local username of the rest user who can perform this action"
                },
                "emailToLogout": {
                    "type": "string",
                    "description": "The email of a user at the same Amelia instance of the administrator's current session"
                }
            }
        },
        "FormInputMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "formInputData",
                "id",
                "messageType"
            ],
            "properties": {
                "allowIntentDetectionInFormInput": {
                    "type": "boolean",
                    "description": "Enable/disable the intent detection on form input selection."
                },
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "formInputData": {
                    "type": "string",
                    "description": "The form message, as specified by the BPN.  In most cases, the String will be of a JSON object, but the BPN author is free to utilize other formats.  Client code is responsible for interpreting the String as needed."
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hintText": {
                    "type": "string",
                    "description": "Hint text for the form"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "outboundFormInputCorrelationId": {
                    "type": "string",
                    "description": "Correlates this message with a previous TextMessage, if exists, this is the form data for the question asked in the TextMessage"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent when a BPN requests a form input, with a specific payload the client must utilize  to construct the input or input widgets"
        },
        "GoalMetaData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of this Goal"
                },
                "utteranceCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of utterances associated with this goal"
                }
            }
        },
        "HourlyConversationSummary": {
            "type": "object",
            "properties": {
                "agentAbandoned": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of conversations taken by an Agent and abandoned"
                },
                "agentHandled": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of conversations handled by an Agent"
                },
                "ameliaAbandoned": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of conversations taken by Amelia and abandoned"
                },
                "ameliaHandled": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of conversations handled by Amelia"
                },
                "escalateAbandoned": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of conversations escalated and abandoned"
                },
                "hour": {
                    "type": "string",
                    "description": "The hour of this summary"
                },
                "total": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The total number of conversations"
                }
            }
        },
        "HyperaResolutionMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "resolution": {
                    "description": "Request and route selected for resolving HyperA Escalation",
                    "$ref": "#/definitions/Resolution",
                    "originalRef": "Resolution"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "A message sent when agent resolves a HyperA Escalation"
        },
        "IdNameCodeModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "InboundDetailClickMessageToAmelia": {
            "type": "object",
            "properties": {
                "answerId": {
                    "type": "string",
                    "description": "Identifier of the response"
                },
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "outboundMessageId": {
                    "type": "string",
                    "description": "Identifier of the outbound message"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "A message on checking detail of a response by a user"
        },
        "InputStream": {
            "type": "object"
        },
        "IntegrationAssetListModel": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the asset"
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain to which this flow belongs"
                },
                "domainName": {
                    "type": "string",
                    "description": "The name of the domain to which this flow belongs"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the integration flow"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the integration flow"
                }
            }
        },
        "IntegrationAssetSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IntegrationAssetListModel",
                        "originalRef": "IntegrationAssetListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "IntegrationClusterModel": {
            "type": "object",
            "properties": {
                "confirm": {
                    "type": "boolean",
                    "description": "If present and true on submission, will perform deployment/undeployment requests as host memberships are changed"
                },
                "description": {
                    "type": "string",
                    "description": "A description of this Integration Cluster in Amelia"
                },
                "hosts": {
                    "type": "array",
                    "description": "The hosts that comprise this cluster",
                    "items": {
                        "$ref": "#/definitions/IntegrationHostListModel",
                        "originalRef": "IntegrationHostListModel"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Integration Cluster in Amelia"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Integration Cluster in Amelia"
                },
                "pendingConfirmDeploys": {
                    "type": "array",
                    "description": "In response to a create or update command, added hosts will have cluster flows deployed on them.  Requires a submission with confirm = true to adjust the host membership and deploy these flows",
                    "items": {
                        "$ref": "#/definitions/IntegrationStatusModel",
                        "originalRef": "IntegrationStatusModel"
                    }
                },
                "pendingConfirmUndeploys": {
                    "type": "array",
                    "description": "In response to a create or update command, removed hosts will have their flows undeployed.  Requires a submission with confirm = true to adjust the host membership and undeploy these flows",
                    "items": {
                        "$ref": "#/definitions/IntegrationStatusModel",
                        "originalRef": "IntegrationStatusModel"
                    }
                }
            }
        },
        "IntegrationCommandResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "A message accompanying the request"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the request"
                }
            }
        },
        "IntegrationEvent": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "description": "additional data associated with the event",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/EventData",
                        "originalRef": "EventData"
                    }
                },
                "domainCode": {
                    "type": "string",
                    "description": "the code of the domain to which this event belongs",
                    "readOnly": true
                },
                "eventDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the time of the event",
                    "readOnly": true
                },
                "flowCode": {
                    "type": "string",
                    "description": "the code of the flow to which this event belongs",
                    "readOnly": true
                },
                "hostname": {
                    "type": "string",
                    "description": "the name of the host which this event belongs",
                    "readOnly": true
                },
                "id": {
                    "type": "string"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "the ip address of the host which this event belongs",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "the name/type of this event",
                    "readOnly": true
                },
                "principal": {
                    "type": "string",
                    "description": "the actor that originated this event",
                    "readOnly": true
                }
            }
        },
        "IntegrationEventSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IntegrationEvent",
                        "originalRef": "IntegrationEvent"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "IntegrationFlowListModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The immutable code of the integration flow"
                },
                "deployedRevisionNumber": {
                    "description": "The revision that is deployed, if any",
                    "$ref": "#/definitions/RevisionNumber",
                    "originalRef": "RevisionNumber"
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain to which this flow belongs"
                },
                "domainName": {
                    "type": "string",
                    "description": "The name of the domain to which this flow belongs"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the integration flow"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the integration flow"
                },
                "revisionId": {
                    "type": "string",
                    "description": "The primary key of the current revision number of the integration flow"
                },
                "revisionNumber": {
                    "description": "The current revision number of the integration flow",
                    "$ref": "#/definitions/RevisionNumber",
                    "originalRef": "RevisionNumber"
                }
            }
        },
        "IntegrationFlowModel": {
            "type": "object",
            "properties": {
                "assets": {
                    "type": "array",
                    "description": "The assets in use by this integration flow",
                    "items": {
                        "$ref": "#/definitions/IntegrationFlowModelAssetEditModel",
                        "originalRef": "IntegrationFlowModelAssetEditModel"
                    }
                },
                "autoDeployExecutionGroups": {
                    "type": "string",
                    "description": "The comma-delimited list of any execution groups to which this flow should auto deploy"
                },
                "code": {
                    "type": "string",
                    "description": "The immutable code of the integration flow"
                },
                "deployedRevisionNumber": {
                    "description": "The revision of this integration flow that is deployed, if any",
                    "readOnly": true,
                    "$ref": "#/definitions/RevisionNumber",
                    "originalRef": "RevisionNumber"
                },
                "description": {
                    "type": "string",
                    "description": "The description of this integration flow"
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain to which this flow belongs, immutable after creation"
                },
                "domainName": {
                    "type": "string",
                    "description": "The name of the domain to which this flow belongs",
                    "readOnly": true
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the integration flow"
                },
                "mainContext": {
                    "type": "string",
                    "description": "The xml defining this integration flow"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the integration flow"
                },
                "properties": {
                    "type": "array",
                    "description": "The properties belonging to this integration flow; the contents of the FLOW integration property set",
                    "items": {
                        "$ref": "#/definitions/IntegrationModelPropertyEditValue",
                        "originalRef": "IntegrationModelPropertyEditValue"
                    }
                },
                "propertySets": {
                    "type": "array",
                    "description": "The property sets in use by this integration flow",
                    "items": {
                        "$ref": "#/definitions/IntegrationFlowPropertySetListModel",
                        "originalRef": "IntegrationFlowPropertySetListModel"
                    }
                },
                "revisionNumber": {
                    "description": "The current revision number of the integration flow",
                    "$ref": "#/definitions/RevisionNumber",
                    "originalRef": "RevisionNumber"
                }
            }
        },
        "IntegrationFlowModelAssetEditModel": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "the content type of this asset"
                },
                "domainId": {
                    "type": "string",
                    "description": "the primary key of the domain to which this asset belongs"
                },
                "domainName": {
                    "type": "string",
                    "description": "the name of the domain to which this asset belongs"
                },
                "id": {
                    "type": "string",
                    "description": "the primary key of this asset"
                },
                "name": {
                    "type": "string",
                    "description": "the name of this asset"
                }
            }
        },
        "IntegrationFlowPropertySetListModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "the primary key of this property set"
                },
                "integrationPropertySetId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "the name of this property set"
                },
                "propertySetType": {
                    "type": "string",
                    "description": "The types of this property set, either FLOW or DOMAIN"
                }
            }
        },
        "IntegrationFlowSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IntegrationFlowListModel",
                        "originalRef": "IntegrationFlowListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "IntegrationHostListModel": {
            "type": "object",
            "properties": {
                "deleted": {
                    "type": "boolean",
                    "description": "True if the host is deleted and unable for use; false otherwise"
                },
                "host": {
                    "type": "string",
                    "description": "The host, in a name or address reachable by Amelia, of this Integration Host"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Integration Host in Amelia"
                },
                "integrationClusterId": {
                    "type": "string",
                    "description": "The primary key of a cluster to which this Host belongs"
                },
                "integrationClusterName": {
                    "type": "string",
                    "description": "The name of a cluster to which this Host belongs"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Integration Host in Amelia"
                },
                "port": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The port on which this host responds to administrative requests"
                }
            }
        },
        "IntegrationHostModel": {
            "type": "object",
            "properties": {
                "confirm": {
                    "type": "boolean",
                    "description": "add confirm as true on submission to confirm changes and pending deploy/undeployments"
                },
                "deleted": {
                    "type": "boolean",
                    "description": "True if the host is deleted and unable for use; false otherwise"
                },
                "description": {
                    "type": "string",
                    "description": "A description of this Integration Host in Amelia"
                },
                "host": {
                    "type": "string",
                    "description": "The host, in a name or address reachable by Amelia, of this Integration Host"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Integration Host in Amelia"
                },
                "integrationClusterId": {
                    "type": "string",
                    "description": "The primary key of a cluster to which this Host belongs"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Integration Host in Amelia"
                },
                "pendingConfirmDeploys": {
                    "type": "array",
                    "description": "In response to a command that changes cluster membership, flows will be deployed.  Requires a submission with confirm = true to adjust the host membership and deploy these flows",
                    "items": {
                        "$ref": "#/definitions/IntegrationFlowListModel",
                        "originalRef": "IntegrationFlowListModel"
                    }
                },
                "pendingConfirmUndeploys": {
                    "type": "array",
                    "description": "In response to a command that changes cluster membership, flows will be undeployed.  Requires a submission with confirm = true to adjust the host membership and undeploy these flows",
                    "items": {
                        "$ref": "#/definitions/IntegrationFlowListModel",
                        "originalRef": "IntegrationFlowListModel"
                    }
                },
                "port": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The port on which this host responds to administrative requests"
                }
            }
        },
        "IntegrationMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "integrationMessageData",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "integrationMessageData": {
                    "type": "string",
                    "description": "The integration message, as specified by the BPN.  In most cases, the String will be of a JSON object, but the BPN author is free to utilize other formats.  Client code is responsible for  interpreting the String as needed."
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent when Amelia requests an integration message, with a payload a client can parse  to construct a more customized UI widget, if desired"
        },
        "IntegrationModelPropertyEditValue": {
            "type": "object",
            "properties": {
                "encrypted": {
                    "type": "boolean",
                    "description": "true if the property should be encrypted upon submission; if already encrypted, and do not wish to change, leave as the encryption mask of four asterisks"
                },
                "name": {
                    "type": "string",
                    "description": "the name of this property"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Property; if encrypted, and do not wish to change, leave as the encryption mask of four asterisks"
                }
            }
        },
        "IntegrationPropertySetListModel": {
            "type": "object",
            "properties": {
                "domainName": {
                    "type": "string",
                    "description": "The name of the domain in which this property set resides"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Integration Property Set in Amelia"
                },
                "integrationPropertySetId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "the name of this property set"
                },
                "propertySetType": {
                    "type": "string",
                    "description": "The type of the Property Set",
                    "enum": [
                        "FLOW",
                        "DOMAIN"
                    ]
                }
            }
        },
        "IntegrationPropertySetModel": {
            "type": "object",
            "properties": {
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain in which this property set resides"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Integration Property Set in Amelia"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IntegrationPropertySetPropertyEditModel",
                        "originalRef": "IntegrationPropertySetPropertyEditModel"
                    }
                },
                "propertySetType": {
                    "type": "string",
                    "description": "The type of the Property Set",
                    "enum": [
                        "FLOW",
                        "DOMAIN"
                    ]
                }
            }
        },
        "IntegrationPropertySetPropertyEditModel": {
            "type": "object",
            "properties": {
                "encrypted": {
                    "type": "boolean",
                    "description": "true if the property should be encrypted upon submission; if already encrypted, and do not wish to change, leave as the encryption mask of four asterisks"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Integration Property Set Property in Amelia"
                },
                "name": {
                    "type": "string",
                    "description": "The name key of the Integration Property Set Property"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Property; if encrypted, and do not wish to change, leave as the encryption mask of four asterisks"
                }
            }
        },
        "IntegrationPropertySetSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IntegrationPropertySetListModel",
                        "originalRef": "IntegrationPropertySetListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "IntegrationStatusModel": {
            "type": "object",
            "properties": {
                "flowCode": {
                    "type": "string",
                    "description": "The immutable code of the integration flow"
                },
                "flowId": {
                    "type": "string",
                    "description": "The primary key of the Integration Flow in Amelia"
                },
                "hostId": {
                    "type": "string",
                    "description": "The primary key of the Integration Host in Amelia"
                },
                "hostName": {
                    "type": "string",
                    "description": "The name of the Integration Host in Amelia"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Status reference in Amelia"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of this flow on this host",
                    "enum": [
                        "PENDING",
                        "FAILED",
                        "RUNNING",
                        "CLOSED",
                        "UNKNOWN"
                    ]
                }
            }
        },
        "IntentAndScoreModel": {
            "type": "object",
            "properties": {
                "intent": {
                    "type": "string",
                    "description": "Intent code"
                },
                "score": {
                    "type": "number",
                    "format": "double",
                    "description": "Intent score, confidence, probability"
                }
            }
        },
        "IntentDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Code of the Intent."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Intent"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Intent."
                }
            },
            "description": "Details of Intent"
        },
        "IntentInfoModel": {
            "type": "object",
            "properties": {
                "classifierModelRevisionId": {
                    "type": "string",
                    "description": "The primary key of the classifier model revision for this intent"
                },
                "domainId": {
                    "type": "string"
                },
                "goal": {
                    "$ref": "#/definitions/IntentModel",
                    "originalRef": "IntentModel"
                },
                "id": {
                    "type": "string"
                },
                "responses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CoreIntentUtteranceModel",
                        "originalRef": "CoreIntentUtteranceModel"
                    }
                },
                "score": {
                    "type": "number",
                    "format": "double",
                    "description": "The degree of confidence in this intent prediction, between 0 and 1"
                },
                "utterances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CoreIntentUtteranceModel",
                        "originalRef": "CoreIntentUtteranceModel"
                    }
                }
            }
        },
        "IntentKickoffMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "entities": {
                    "type": "object",
                    "description": "The entities to be added",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "intentCode": {
                    "type": "string",
                    "description": "The code of the intent process to start"
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "A message instructing Amelia to kick off a intent process in the middle of a conversation"
        },
        "IntentListModel": {
            "type": "object",
            "properties": {
                "actionPhrase": {
                    "type": "string",
                    "description": "Phrase describing what the user wants to do for this intent. Used to generate choice questions like \"Would you like to X or Y\", where \"X\" and \"Y\" are action phrases for different intents."
                },
                "active": {
                    "type": "boolean",
                    "description": "true if active, false if disabled"
                },
                "allowDeletion": {
                    "type": "boolean",
                    "description": "Hint as to whether the intent allows deletion in the current user context"
                },
                "allowEditSettings": {
                    "type": "boolean",
                    "description": "Hint as to whether the intent allows settings to be edited in the current user context"
                },
                "allowEditUtterances": {
                    "type": "boolean",
                    "description": "Hint as to whether the intent allows utterances to be edited in the current user context"
                },
                "allowMultiIntentInclusion": {
                    "type": "boolean",
                    "description": "Whether multi intents has been allowed or not"
                },
                "builtIn": {
                    "type": "boolean",
                    "description": "Whether this intent is a built-in one or not"
                },
                "code": {
                    "type": "string",
                    "description": "The code for this intent"
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Instant this intent was created"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The user that created this intent"
                },
                "description": {
                    "type": "string",
                    "description": "The description of this intent"
                },
                "goalId": {
                    "type": "string",
                    "description": "The id of the intent definition"
                },
                "id": {
                    "type": "string",
                    "description": "The id used for admin functions such as training"
                },
                "keyPhrases": {
                    "type": "string",
                    "description": "Key phrases used for generating clarifying questions"
                },
                "modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Instant this intent was last modified"
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "The user that last modified this intent"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this intent"
                },
                "setDataTag": {
                    "type": "boolean",
                    "description": "Whether to set data tags for this utterance"
                }
            }
        },
        "IntentModel": {
            "type": "object",
            "properties": {
                "actionPhrase": {
                    "type": "string",
                    "description": "Phrase describing what the user wants to do for this intent. Used to generate choice questions like \"Would you like to X or Y\", where \"X\" and \"Y\" are action phrases for different intents."
                },
                "actionSystemData": {
                    "type": "string",
                    "description": "The name of the BPN for FAQ to invoke, depending on the actionType"
                },
                "actionType": {
                    "type": "string",
                    "description": "The type of action executed by this intent",
                    "enum": [
                        "EXECUTE_BPN",
                        "ANSWER_FAQ",
                        "NONE"
                    ]
                },
                "allowDeletion": {
                    "type": "boolean",
                    "description": "Allow deletion of intent by edit policy"
                },
                "allowEditSettings": {
                    "type": "boolean",
                    "description": "Allow modification of settings for intent by edit policy"
                },
                "allowEditUtterances": {
                    "type": "boolean",
                    "description": "Allow edit of intent utterance using edit policy"
                },
                "allowMultiIntentInclusion": {
                    "type": "boolean",
                    "description": "Allow Preference of single intent over multi intent"
                },
                "code": {
                    "type": "string",
                    "description": "The code of this intent"
                },
                "confirmCancelQuestion": {
                    "type": "string",
                    "description": "On an intent cancellation request, ask this confirmation question."
                },
                "confirmContinueQuestion": {
                    "type": "string",
                    "description": "A question to ask the user before continuing"
                },
                "continuationProcess": {
                    "type": "string",
                    "description": "Execute this process when returning to root context after this intent completes."
                },
                "description": {
                    "type": "string",
                    "description": "A description for this intent"
                },
                "domainId": {
                    "type": "string",
                    "description": "The id of the domain to which this intent belongs"
                },
                "entities": {
                    "type": "array",
                    "description": "A list of entities scoped to this intent.",
                    "items": {
                        "type": "string"
                    }
                },
                "grammarId": {
                    "type": "string",
                    "description": "Optional ID of a grammar used to identify this intent"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the Goal of this intent"
                },
                "intentId": {
                    "type": "string",
                    "description": "The id of the intent"
                },
                "keyPhrases": {
                    "type": "array",
                    "description": "Key phrases used for generating clarifying questions",
                    "items": {
                        "type": "string"
                    }
                },
                "lowConfidenceCqaStatus": {
                    "type": "string",
                    "description": "If the confidence of this intent is low, ask a confirmation question."
                },
                "name": {
                    "type": "string",
                    "description": "The name of this intent"
                },
                "onCancelContextConfirmBehavior": {
                    "type": "string",
                    "description": "Behavior upon cancelling an intent, if/how to ask confirmation",
                    "enum": [
                        "AUTOMATIC",
                        "ALWAYS",
                        "NEVER"
                    ]
                },
                "onNegationAction": {
                    "type": "string",
                    "description": "The action to take upon negating this intent",
                    "enum": [
                        "CONTINUE",
                        "IGNORE",
                        "ALTERNATIVE_INTENT"
                    ]
                },
                "onNegationIntent": {
                    "type": "string",
                    "description": "ID of negating intent"
                },
                "onResumeContextConfirmBehavior": {
                    "type": "string",
                    "description": "On resuming this context, if/how to ask the confirm continue question.",
                    "enum": [
                        "AUTOMATIC",
                        "ALWAYS",
                        "NEVER"
                    ]
                },
                "onSwitchContextAction": {
                    "type": "string",
                    "description": "The action to take upon switching from this intent",
                    "enum": [
                        "SUSPEND",
                        "COMPLETE"
                    ]
                },
                "predictEntities": {
                    "type": "array",
                    "description": "A list of entities to be used by intent during prediction and also resolve ambiguity.",
                    "items": {
                        "type": "string"
                    }
                },
                "setDataTag": {
                    "type": "boolean",
                    "description": "Allows user to add data tags to intent utterances."
                },
                "status": {
                    "type": "string",
                    "description": "The status of this intent",
                    "enum": [
                        "ACTIVE",
                        "DISABLED",
                        "PENDING"
                    ]
                },
                "twoIntentCqaStatus": {
                    "type": "string",
                    "description": "If there is an ambiguity with another intent, trigger CQA"
                }
            }
        },
        "IntentModelSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IntentListModel",
                        "originalRef": "IntentListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "IntentPrediction": {
            "type": "object",
            "properties": {
                "domainScores": {
                    "type": "array",
                    "description": "In-Domain/Out-of-domain binary classifier scores for CQA",
                    "items": {
                        "$ref": "#/definitions/IntentScoreModel",
                        "originalRef": "IntentScoreModel"
                    }
                },
                "intentScores": {
                    "type": "array",
                    "description": "Scores for individual intents",
                    "items": {
                        "$ref": "#/definitions/IntentScoreModel",
                        "originalRef": "IntentScoreModel"
                    }
                },
                "predictedIntent": {
                    "description": "Predicted intent, or null if no intent was predicted",
                    "$ref": "#/definitions/IntentScoreModel",
                    "originalRef": "IntentScoreModel"
                }
            },
            "description": "Intent prediction result, with scores for intent classifier and intent detector"
        },
        "IntentScoreModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Intent code, uniquely identifying it within a given domain"
                },
                "domainId": {
                    "type": "string",
                    "description": "Domain this intent is associated with (may be a parent domain)"
                },
                "goalId": {
                    "type": "string",
                    "description": "ID of corresponding goal, if one exists, for this intent prediction"
                },
                "negated": {
                    "type": "boolean",
                    "description": "Indicates whether this intent was identified as negated"
                },
                "score": {
                    "type": "number",
                    "format": "double",
                    "description": "Score of the intent"
                }
            },
            "description": "NLU settings for a given domain, such as thresholds for intent prediction"
        },
        "IntentUtteranceModel": {
            "type": "object",
            "properties": {
                "dataTagsSelected": {
                    "type": "array",
                    "description": "Dataset tags for training this intent utterance text.",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of this utterance"
                },
                "intentId": {
                    "type": "string",
                    "description": "The primary key of the intent to which this utterance belongs"
                },
                "text": {
                    "type": "string",
                    "description": "The text of this utterance"
                }
            }
        },
        "JoinConversationRequestMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "autoSwitch": {
                    "type": "boolean",
                    "description": "True if the session can auto switch, false otherwise"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionMode": {
                    "type": "string",
                    "description": "The mode of the newly joined session",
                    "enum": [
                        "USER",
                        "AGENT",
                        "OBSERVER"
                    ]
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "started": {
                    "type": "boolean",
                    "description": "True if the session has started, false otherwise"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                },
                "withUserName": {
                    "type": "string",
                    "description": "The username of the joining user"
                }
            },
            "description": "Message sent when there is a request to join a conversation"
        },
        "LicenseModel": {
            "type": "object",
            "properties": {
                "booleanFeatures": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "doubleFeatures": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "expires": {
                    "type": "string",
                    "format": "date-time"
                },
                "generated": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "longFeatures": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "organization": {
                    "type": "string"
                },
                "product": {
                    "type": "string"
                },
                "stringFeatures": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "LicenseViewModel": {
            "type": "object",
            "properties": {
                "license": {
                    "description": "the detail of the license",
                    "readOnly": true,
                    "$ref": "#/definitions/LicenseModel",
                    "originalRef": "LicenseModel"
                },
                "licensed": {
                    "type": "boolean",
                    "description": "true if the license is valid and licensed",
                    "readOnly": true
                }
            }
        },
        "LinkRouteMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "routeAttributes": {
                    "type": "string",
                    "description": "Route attributes."
                },
                "routeId": {
                    "type": "string",
                    "description": "Id of route."
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                },
                "variables": {
                    "type": "string",
                    "description": "Variables."
                }
            },
            "description": "A message from an agent to instruct Amelia to execute the route."
        },
        "LiteWaypoint": {
            "type": "object",
            "description": "Edge waypoint."
        },
        "LocalTime": {
            "type": "object",
            "properties": {
                "hour": {
                    "type": "string",
                    "format": "byte"
                },
                "minute": {
                    "type": "string",
                    "format": "byte"
                },
                "nano": {
                    "type": "integer",
                    "format": "int32"
                },
                "second": {
                    "type": "string",
                    "format": "byte"
                }
            }
        },
        "LocaleModel": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The text description of the Locale"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the Locale"
                }
            }
        },
        "LocaleModelSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LocaleModel",
                        "originalRef": "LocaleModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "LoginCommand": {
            "type": "object",
            "required": [
                "ameliaUrl",
                "password",
                "username"
            ],
            "properties": {
                "ameliaUrl": {
                    "type": "string",
                    "description": "The Amelia URL; if unspecified, will default to /Amelia/ on the same scheme, hostname, and port as the REST gateway"
                },
                "password": {
                    "type": "string",
                    "description": "The password to log in"
                },
                "username": {
                    "type": "string",
                    "description": "The username to log in"
                }
            }
        },
        "LoginResponse": {
            "type": "object",
            "required": [
                "status",
                "token",
                "userModel"
            ],
            "properties": {
                "aiOpsAccessToken": {
                    "type": "string",
                    "example": "_cvy332df",
                    "description": "A token that can be used for Aipos access, if the requesting user has such permissions. Will be null if the user lacks permissions"
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "example": 204
                },
                "token": {
                    "type": "string",
                    "example": "d1b440f8-b039-4283-8558-6c5a814acab8",
                    "description": "A temporary token that must be used in the header of all requests while this session lasts"
                },
                "userModel": {
                    "description": "The details of the user in this conversation session",
                    "$ref": "#/definitions/UserModel",
                    "originalRef": "UserModel"
                }
            }
        },
        "LogoutResponse": {
            "type": "object",
            "required": [
                "status",
                "token"
            ],
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "example": 204
                },
                "token": {
                    "type": "string",
                    "example": "d1b440f8-b039-4283-8558-6c5a814acab8",
                    "description": "The temporary token of the conversation session that was just ended"
                }
            }
        },
        "MacroExecutionMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "macro": {
                    "type": "string",
                    "description": "Macro information."
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "A message from an agent to instruct Amelia to execute the macro."
        },
        "MessageFromAmelia": {
            "type": "object",
            "description": "A parent indicating any of the specific MessageFromAmelia types may be in this place"
        },
        "ModelEvaluationModel": {
            "type": "object",
            "properties": {
                "confusions": {
                    "description": "Confusion matrix over gold vs. predicted values in this evaluation",
                    "$ref": "#/definitions/ConfusionMatrixModel",
                    "originalRef": "ConfusionMatrixModel"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for this model evaluation"
                },
                "misclassifications": {
                    "description": "List of predictions that did not match actual values (misclassifications) for this evaluation",
                    "$ref": "#/definitions/TextPredictionListModel",
                    "originalRef": "TextPredictionListModel"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable identifying name for this evaluation"
                },
                "stats": {
                    "description": "Pre-computed summary statistics for this model evaluation",
                    "$ref": "#/definitions/EvalStatsModel",
                    "originalRef": "EvalStatsModel"
                }
            }
        },
        "ModelTrainerParameters": {
            "type": "object",
            "required": [
                "algorithm",
                "autoAug",
                "crossValidationFolds",
                "domainId",
                "enableCustomFeatures",
                "includeAll",
                "includeEntitiesUtterance",
                "name",
                "numKeyPhrases",
                "revisionName",
                "train",
                "trainOutOfDomain",
                "useEntityFeatures",
                "validate"
            ],
            "properties": {
                "algorithm": {
                    "description": "Algorithm configuration hyperparameters used for training.",
                    "$ref": "#/definitions/TrainingAlgorithmParameters",
                    "originalRef": "TrainingAlgorithmParameters"
                },
                "autoAug": {
                    "type": "boolean",
                    "description": "Boolean indicating whether or not to add default negative examples during intent training"
                },
                "crossValidationFolds": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of cross validation folds to evaluate over during training."
                },
                "domainId": {
                    "type": "string",
                    "description": "Unique identifier for the domain in which to train a model"
                },
                "enableCustomFeatures": {
                    "type": "boolean",
                    "description": "Indicates if featurePipeline (set to true) should be used, or original XML-based features should be used"
                },
                "entities": {
                    "type": "array",
                    "description": "Entity identifiers used for role classifiers or spanless entity training; required for training those classifiers",
                    "items": {
                        "type": "string"
                    }
                },
                "entity": {
                    "type": "string",
                    "description": "Spanless entity ID or parent entity ID for role entities."
                },
                "featurePipeline": {
                    "description": "Custom feature pipeline specification. This is a required field when enableCustomFeatures is true.",
                    "$ref": "#/definitions/FeaturePipelineModel",
                    "originalRef": "FeaturePipelineModel"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PropertyModel",
                        "originalRef": "PropertyModel"
                    }
                },
                "focusedEntityFeatures": {
                    "type": "array",
                    "description": "Specific entities to be used as features during training.",
                    "items": {
                        "type": "string"
                    }
                },
                "includeAll": {
                    "type": "boolean",
                    "description": "Indicates whether all intents or entities should be including for training this model. If true, selectedIntents/selectedSlots should be empty and training/validation documents are optional"
                },
                "includeEntitiesUtterance": {
                    "type": "boolean",
                    "description": "Include entity utterances for domain classifier training."
                },
                "modelId": {
                    "type": "string",
                    "description": "Optional id that is used when upgrading an existing model."
                },
                "modelRevisionId": {
                    "type": "string",
                    "description": "ID for new classifier model revision upon training parameter updates.",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "Human readable name for the classifier model to train"
                },
                "numKeyPhrases": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of key phrases to extract during training (or 0 to not extract phrases)"
                },
                "revisionName": {
                    "type": "string",
                    "description": "Name of the specific classifier revision to be trained"
                },
                "selectedDomains": {
                    "type": "array",
                    "description": "Selected domains to include for training.",
                    "items": {
                        "type": "string"
                    }
                },
                "selectedIntents": {
                    "type": "array",
                    "description": "List of intents to include during training.",
                    "items": {
                        "type": "string"
                    }
                },
                "selectedSlots": {
                    "type": "array",
                    "description": "List of entities to include during training",
                    "items": {
                        "type": "string"
                    }
                },
                "train": {
                    "type": "boolean",
                    "description": "Indicates whether to kick off training from this model, or just update the revision"
                },
                "trainOutOfDomain": {
                    "type": "boolean",
                    "description": "If false, filter out negative examples and only train model on positive examples"
                },
                "trainingDocumentRevisions": {
                    "type": "array",
                    "description": "List of training document revision unique identifiers",
                    "items": {
                        "type": "string"
                    }
                },
                "useDatasetTags": {
                    "type": "boolean",
                    "description": "Use dataset tags to separate datasets during training."
                },
                "useEntityFeatures": {
                    "type": "boolean",
                    "description": "Use entity features during training."
                },
                "validate": {
                    "type": "boolean",
                    "description": "Indicates whether or not to apply validation."
                },
                "validationDocumentRevisions": {
                    "type": "array",
                    "description": "List of validation document revision unique identifiers",
                    "items": {
                        "type": "string"
                    }
                },
                "validationResponse": {
                    "description": "Validation response prior to training, if validate is enabled.",
                    "readOnly": true,
                    "$ref": "#/definitions/TrainingValidationResponse",
                    "originalRef": "TrainingValidationResponse"
                }
            }
        },
        "NewConversationCommand": {
            "type": "object",
            "required": [
                "deliveryMode",
                "domain"
            ],
            "properties": {
                "deliveryMode": {
                    "type": "string",
                    "description": "The mode by which the client will received messages from Amelia",
                    "enum": [
                        "WEBHOOK",
                        "POLLING"
                    ]
                },
                "domain": {
                    "type": "string",
                    "description": "The code of an Amelia Domain in which to have this conversation"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "A valid, reachable URL to which all messages from Amelia will be posted, required if deliveryMode is WEBHOOK"
                },
                "secret": {
                    "type": "string",
                    "description": "A per-conversation secret; if specified, it will be added to the header of all webhook posts for this conversation"
                },
                "anonymous": {
                    "type": "boolean",
                    "description": "Override whether the conversation should be anonymous.  By default, an anonymous conversation iscreated if the ApiSession is anonymous.  If, however, one specifies anonymous when actually authenticated an anonymous conversation will be created"
                },
                "autoStartup": {
                    "type": "boolean",
                    "description": "If true, the conversation will begin and messages will be published immediately.  If false,  a call to the start conversation method will be required.  Useful in envrionments where you want a pause or  manual control over the timing of receipt of the earlier messages.  Defaults to true"
                },
                "channel": {
                    "type": "string",
                    "description": "Channel for this conversation.  Default is 'rest_gateway'."
                },
                "clientTimestamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Epoch millis as reported by the client"
                },
                "email": {
                    "type": "string",
                    "example": "otheruser@otherdomain.com",
                    "description": "Allows overriding the conversation user.  Note, the authenticated user must have authority  to do this on the Amelia side"
                },
                "externalUid": {
                    "type": "string",
                    "description": "Allows overriding the conversation user.  Note, the authenticated user must have authority  to do this on the Amelia side"
                },
                "firstName": {
                    "type": "string",
                    "description": "Allows overriding the conversation user first name.  Note, the authenticated user must have  authority to do this on the Amelia side"
                },
                "fqtId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Allow passing fqtId to be pushed to conversation. This stores the track of automata execution"
                },
                "initialAttributes": {
                    "type": "object",
                    "description": "A map of additional attributes to pass to the conversation",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "initialBpnVariables": {
                    "type": "object",
                    "description": "A map of additional bpn variables with which to start the conversation",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "initialEntities": {
                    "type": "object",
                    "description": "Allows entities passed to be used in triggering the initial intent. The entities should be prior present, otherwise it will be ignored.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "initialIntent": {
                    "type": "string",
                    "description": "Allows passed intent to trigger at start of conversation"
                },
                "lastName": {
                    "type": "string",
                    "description": "Allows overriding the conversation user last name.  Note, the authenticated user must have  authority to do this on the Amelia side"
                },
                "receiveDebugMessages": {
                    "type": "boolean",
                    "description": "if true, this conversation will receive debug messages the user may be eligible to receive. If false, it will not.  If omitted, the conversation will use the configured settings of the rest gateway instance"
                },
                "sessionLocale": {
                    "type": "string",
                    "description": "An optional locale in which the conversation should begin.  If omitted, will default to the settings of the domain, or of the user."
                },
                "timeZone": {
                    "type": "string",
                    "description": "A valid timeZone code, e.g. PST"
                },
                "userId": {
                    "type": "string",
                    "description": "Allows overriding the conversation user.  Note, the authenticated user must have authority  to do this on the Amelia side"
                }
            },
            "description": "Command to submit to begin a new conversation"
        },
        "NluConfigurationModel": {
            "type": "object",
            "properties": {
                "agentViewConfiguration": {
                    "type": "string",
                    "description": "Agent View Configuration"
                },
                "agentViewEnableAutoLearning": {
                    "type": "boolean",
                    "description": "Flag to allow auto-learning for agent view."
                },
                "agentViewSaveConversations": {
                    "type": "boolean",
                    "description": "Flag to allow saving Agent view conversations."
                },
                "allowMisclassificationAnnotation": {
                    "type": "boolean",
                    "description": "Flag to allow showing prediction to user with authority."
                },
                "allowOntOutOfDomain": {
                    "type": "boolean",
                    "description": "Allow Ont to filter out of domain."
                },
                "ambiguityThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold on difference in confidence scores between two intents to consider them to be ambiguous."
                },
                "autoTraining": {
                    "type": "boolean",
                    "description": "Enable automatic training of models in this domain"
                },
                "autoTrainingBertKnowledgeIngest": {
                    "type": "boolean",
                    "description": "Auto train an bert model when importing by knowledge ingestion."
                },
                "autoTrainingKnowledgeIngest": {
                    "type": "boolean",
                    "description": "Enable auto training when importing by knowledge ingestion."
                },
                "clusteringThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Utterance Similarity Threshold for clutser membership in fast community detection."
                },
                "contextSimilarityThreshold": {
                    "type": "number",
                    "format": "float",
                    "description": "Threshold for context similarity"
                },
                "domainActionPhrase": {
                    "type": "string",
                    "description": "Action phrase for domain. Used in Domain level CQA"
                },
                "domainAmbiguityThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold on difference in confidence scores between two domain to consider them to be ambiguous."
                },
                "domainCqaThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold for cqa top domain."
                },
                "domainPhrases": {
                    "type": "array",
                    "description": "Domain related keywords and phrases. Used in Domain level CQA",
                    "items": {
                        "type": "string"
                    }
                },
                "domainThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Default threshold on scores for switching domains in this domain."
                },
                "enableAutoCreateSrl": {
                    "type": "boolean",
                    "description": "Allow auto create SRL."
                },
                "enableConditionalExecution": {
                    "type": "boolean",
                    "description": "Flag to enable Conditional Execution"
                },
                "enableContextualAnswerPolarity": {
                    "type": "boolean",
                    "description": "Allow context to determine answer polarity in response."
                },
                "enableCouplerParsing": {
                    "type": "boolean",
                    "description": "Flag to enable Coupler Parsing"
                },
                "enableCqa": {
                    "type": "boolean",
                    "description": "Enable clarifying questions."
                },
                "enableDomainCqa": {
                    "type": "boolean",
                    "description": "Enable clarifying questions for domain."
                },
                "enableEntityCqa": {
                    "type": "boolean",
                    "description": "Enable Entity CQA."
                },
                "enableEntityFiltering": {
                    "type": "boolean",
                    "description": "Enable filtering entity base on similarity."
                },
                "enableIntentCqa": {
                    "type": "boolean",
                    "description": "Enable clarifying questions for intent."
                },
                "enableLearnEntitiesEdit": {
                    "type": "boolean",
                    "description": "Enable modification of learned entities by agent."
                },
                "enableLearnIntentsEdit": {
                    "type": "boolean",
                    "description": "Enable modification of learned intents by agent."
                },
                "enableSemanticClustering": {
                    "type": "boolean",
                    "description": "Clustering using semantic match."
                },
                "enableSequentialExecution": {
                    "type": "boolean",
                    "description": "Flag to enable Sequential Execution"
                },
                "entityFilteringThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold to filter out entity based on semantic similarity."
                },
                "inDomainThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold for the binary CQA intent classifier predicting in-domain used in CQA."
                },
                "intentAmbiguityThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold on difference in confidence scores between two intents to consider them to be ambiguous."
                },
                "intentCqaThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold for cqa top domain."
                },
                "intentOverOntPreferredThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold to prefer intent from the classifier model when Ont mappings doesn't exists."
                },
                "intentThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Default threshold on scores for predicting intents in this domain."
                },
                "learnEntities": {
                    "type": "boolean",
                    "description": "Enable entity learning."
                },
                "learnIntents": {
                    "type": "boolean",
                    "description": "Enable intent learning."
                },
                "lowConfidenceIntentThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold for single highest intent used in CQA."
                },
                "minimumCommunitySize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Minimum community size for a valid cluster in fast community detection."
                },
                "misclassifiedAnnotationThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold beyond below which utterance are eligible for annotation manually."
                },
                "ontologicalIntentDetection": {
                    "type": "boolean",
                    "description": "Allow Ont intent detection."
                },
                "outOfDomainThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold for out-of-domain classifier used in CQA."
                },
                "preferSingleOverMultiIntent": {
                    "type": "boolean",
                    "description": "Allow Preference of single intent over multi intent"
                },
                "semanticClusteringThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold for Semantic match while clustering."
                },
                "sentenceSimilarityThreshold": {
                    "type": "number",
                    "format": "float",
                    "description": "Threshold for sentence similarity"
                },
                "testCqaThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold for the cqa test."
                },
                "testIntentThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold for the intent nlu test."
                }
            }
        },
        "NluCouplerModel": {
            "type": "object",
            "properties": {
                "lemma": {
                    "type": "string",
                    "description": "Lemma associated with this segment"
                },
                "predictions": {
                    "description": "Individual predictions for this utterance",
                    "$ref": "#/definitions/NluPredictionModel",
                    "originalRef": "NluPredictionModel"
                },
                "segmentType": {
                    "type": "string",
                    "description": "Type of coupler",
                    "enum": [
                        "CONDITIONAL",
                        "CONSEQUENCE",
                        "NONE",
                        "ALTERNATIVE",
                        "FIRST_ACTION",
                        "SECOND_ACTION",
                        "THIRD_ACTION"
                    ]
                },
                "sequenceId": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Sequence id for ordering the segments"
                },
                "utterance": {
                    "type": "string",
                    "description": "Utterance associated with this coupler"
                }
            }
        },
        "NluPredictionModel": {
            "type": "object",
            "properties": {
                "cqa": {
                    "description": "Clarifying questions (CQA) output/metadata",
                    "$ref": "#/definitions/CqaPredictionModel",
                    "originalRef": "CqaPredictionModel"
                },
                "domainPredictions": {
                    "type": "array",
                    "description": "A list of domains and scores for this prediction",
                    "items": {
                        "$ref": "#/definitions/DomainPredictionModel",
                        "originalRef": "DomainPredictionModel"
                    }
                },
                "entities": {
                    "type": "array",
                    "description": "Predicted entities for the submitted input utterance",
                    "items": {
                        "$ref": "#/definitions/NormalizedEntityModel",
                        "originalRef": "NormalizedEntityModel"
                    }
                },
                "faqPredictions": {
                    "description": "FAQ predictions for the input utterance",
                    "$ref": "#/definitions/FaqPredictionModel",
                    "originalRef": "FaqPredictionModel"
                },
                "intents": {
                    "type": "array",
                    "description": "All intents with corresponding scores",
                    "items": {
                        "$ref": "#/definitions/IntentInfoModel",
                        "originalRef": "IntentInfoModel"
                    }
                },
                "originalText": {
                    "type": "string",
                    "description": "The original submitted text for this prediction"
                },
                "predictedIntent": {
                    "description": "The predicted intent for the input utterance",
                    "$ref": "#/definitions/IntentInfoModel",
                    "originalRef": "IntentInfoModel"
                },
                "segments": {
                    "type": "array",
                    "description": "The predicted couplers for the input utterance",
                    "items": {
                        "$ref": "#/definitions/NluCouplerModel",
                        "originalRef": "NluCouplerModel"
                    }
                },
                "systemPredictions": {
                    "description": "Built-in (general, not domain-specific) classifier predictions relevant to conversational logic",
                    "$ref": "#/definitions/SystemPredictionModel",
                    "originalRef": "SystemPredictionModel"
                },
                "threshold": {
                    "type": "number",
                    "format": "double",
                    "description": "The threshold of the prediction"
                }
            }
        },
        "NluSettings": {
            "type": "object",
            "properties": {
                "cqaIntentThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "CQA intent threshold. Intent scores must be above this threshold to trigger CQA."
                },
                "inDomainThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "In-domain threshold. The intent detector will consider an intent to be in-domain if its score is above this threshold (only applicable when using CQA + binary intent detector)."
                },
                "intentAmbiguityThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Intent ambiguity threshold. If the difference between the top two intents' scores is less than this, and CQA is enabled, CQA will engage."
                },
                "intentPredictionThreshold": {
                    "type": "number",
                    "format": "double",
                    "description": "Threshold for intent prediction. An intent's score must be at or above this value to be predicted."
                }
            },
            "description": "NLU settings for a given domain, such as thresholds for intent prediction"
        },
        "NluSummaryMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "entities": {
                    "type": "array",
                    "description": "List of entity predictions",
                    "items": {
                        "$ref": "#/definitions/EntityPrediction",
                        "originalRef": "EntityPrediction"
                    }
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "intent": {
                    "description": "Intent prediction metadata",
                    "$ref": "#/definitions/IntentPrediction",
                    "originalRef": "IntentPrediction"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "settings": {
                    "description": "Domain-specific NLU settings, such as thresholds for intent detection",
                    "$ref": "#/definitions/NluSettings",
                    "originalRef": "NluSettings"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "Message that shows intent/entity predictions and metadata for a user's utterance"
        },
        "NormalizedEntityModel": {
            "type": "object",
            "properties": {
                "classifierModelRevisionId": {
                    "type": "string",
                    "description": "The primary key of the classifier model revision for this intent"
                },
                "code": {
                    "type": "string",
                    "description": "Entity code"
                },
                "datum": {
                    "description": "Extracted datum, the normalized output of this entity extraction",
                    "$ref": "#/definitions/DatumModel",
                    "originalRef": "DatumModel"
                },
                "fields": {
                    "type": "array",
                    "description": "Extracted fields for a composite entity",
                    "items": {
                        "$ref": "#/definitions/CompositeEntityFieldModel",
                        "originalRef": "CompositeEntityFieldModel"
                    }
                },
                "formattedText": {
                    "type": "string",
                    "description": "Default formatter output for the datum normalized for this extracted entity"
                },
                "name": {
                    "type": "string",
                    "description": "Entity name"
                },
                "negated": {
                    "type": "boolean",
                    "description": "Indicates whether the input entity was negated"
                },
                "score": {
                    "type": "number",
                    "format": "double",
                    "description": "The degree of confidence in this intent prediction, between 0 and 1"
                },
                "slotId": {
                    "type": "string"
                },
                "slotInfoId": {
                    "type": "string"
                }
            }
        },
        "NormalizerParams": {
            "type": "object"
        },
        "NotificationEventMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "notificationAttributes": {
                    "type": "object",
                    "description": "Notification attributes"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                },
                "signal": {
                    "type": "string",
                    "description": "Signal"
                }
            },
            "description": "Notification message sent to amelia by agent to resume conversation"
        },
        "NpsAnalyticsCategoryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "description": "Nps analytics data",
                    "items": {
                        "$ref": "#/definitions/NpsNodeModel",
                        "originalRef": "NpsNodeModel"
                    }
                }
            },
            "description": "Analytics data a single list of category and subcategory data"
        },
        "NpsAnalyticsEdgePlotResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "description": "Nps analytics data",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/CyclicNodeModel",
                            "originalRef": "CyclicNodeModel"
                        }
                    }
                },
                "edges": {
                    "type": "array",
                    "description": "The names of edges relevant to the plot data",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "description": "Analytics data with multiple data lists and a list of edges"
        },
        "NpsAnalyticsMultiPlotResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "description": "Sentient history data, keyed by series name and with an x/y number plot series",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/PlotNodeModel«Number,Number»",
                            "originalRef": "PlotNodeModel«Number,Number»"
                        }
                    }
                }
            },
            "description": "Analytics data with multiple data lists"
        },
        "NpsAnalyticsSinglePlotResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "description": "Nps analytics data",
                    "items": {
                        "$ref": "#/definitions/PlotNodeModel«Number,Number»",
                        "originalRef": "PlotNodeModel«Number,Number»"
                    }
                }
            },
            "description": "Analytics data with a single data list"
        },
        "NpsCollectionMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent to initiate feedback collection from a user."
        },
        "NpsCollectionMessageToAmelia": {
            "type": "object",
            "properties": {
                "answerId": {
                    "type": "string",
                    "description": "Identifier of the response"
                },
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "feedback": {
                    "type": "number",
                    "format": "double",
                    "description": "User feedback: -1 for negative, 0 for neutral, 1 for positive, defaults to 0"
                },
                "feedbackText": {
                    "type": "string",
                    "description": "Feedback received from the user"
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "outboundMessageId": {
                    "type": "string",
                    "description": "Identifier of the outbound message"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "A message collecting feedback from the user"
        },
        "NpsNodeModel": {
            "type": "object",
            "properties": {
                "detractors": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of detractors of this category"
                },
                "mainCategory": {
                    "type": "string",
                    "description": "The category of this node"
                },
                "nps": {
                    "type": "object",
                    "description": "The nps value of this node"
                },
                "promoters": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of promoters of this category"
                },
                "subCategories": {
                    "type": "array",
                    "description": "The subcategories that inform this category",
                    "items": {
                        "$ref": "#/definitions/PlotNodeModel«Number,string»",
                        "originalRef": "PlotNodeModel«Number,string»"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The calculated total of this node"
                }
            },
            "description": "Node with category and optional subcategory information"
        },
        "Number": {
            "type": "object"
        },
        "ObserveCommand": {
            "type": "object",
            "required": [
                "deliveryMode"
            ],
            "properties": {
                "deliveryMode": {
                    "type": "string",
                    "description": "The mode by which the client will received messages from Amelia",
                    "enum": [
                        "WEBHOOK",
                        "POLLING"
                    ]
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "A valid, reachable URL to which all messages from Amelia will be posted, required if deliveryMode is WEBHOOK"
                },
                "secret": {
                    "type": "string",
                    "description": "A per-conversation secret; if specified, it will be added to the header of all webhook posts for this conversation"
                },
                "channel": {
                    "type": "string",
                    "description": "Channel for this agent's session.  Default is 'rest_gateway'."
                },
                "clientTimestamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Epoch millis as reported by the client"
                },
                "conversationId": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "example": "otheruser@otherdomain.com",
                    "description": "Allows overriding the conversation user.  Note, the authenticated user must have authority  to do this on the Amelia side"
                },
                "externalUid": {
                    "type": "string",
                    "description": "Allows overriding the conversation user.  Note, the authenticated user must have authority  to do this on the Amelia side"
                },
                "firstName": {
                    "type": "string",
                    "description": "Allows for overriding the first name of the conversation user.   Note, the authenticated user  must have authority to do this on the Amelia side"
                },
                "lastName": {
                    "type": "string",
                    "description": "Allows for overriding the last name of the conversation user.   Note, the authenticated user  must have authority to do this on the Amelia side"
                },
                "receiveDebugMessages": {
                    "type": "boolean",
                    "description": "if true, this conversation will receive debug messages the user may be eligible to receive. If false, it will not.  If omitted, the conversation will use the configured settings of the rest gateway instance"
                },
                "sessionLocale": {
                    "type": "string",
                    "description": "An optional locale in which the conversation should be observed.  If omitted, will default to the settings of the domain, or of the user."
                },
                "timeZone": {
                    "type": "string",
                    "description": "A valid timeZone code, e.g. PST"
                },
                "userId": {
                    "type": "string",
                    "description": "Allows overriding the conversation user.  Note, the authenticated user must have authority  to do this on the Amelia side"
                }
            },
            "description": "Command to observe a conversation"
        },
        "OneRpaBotExecutionMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "emoticon": {
                    "type": "string",
                    "description": "Emoticon name generated by humanization, if any."
                },
                "executionId": {
                    "type": "string",
                    "description": "The referring key when rpa execution message is received"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hintText": {
                    "type": "string",
                    "description": "Hint text"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "outboundFormInputCorrelationId": {
                    "type": "string",
                    "description": "Correlates this message with a subsequent FormInputMessage. If exists, this message would be the question for the subsequent form input data."
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "responsePoolContext": {
                    "description": "If this message was generated from a response pool, the response pool context.",
                    "$ref": "#/definitions/ResponsePoolContext",
                    "originalRef": "ResponsePoolContext"
                },
                "rpaName": {
                    "type": "string",
                    "description": "The bot name."
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "speechMessageText": {
                    "type": "string",
                    "description": "Message text marked up with speech tags (technology-specific), when speech utterance annotations are available."
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent for bot execution."
        },
        "OneRpaInstanceListModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The primary key of the OneRpa Instance in Amelia"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the OneRpa Instance"
                },
                "publicUrl": {
                    "type": "string",
                    "description": "The public URL of the OneRpa Instance"
                }
            }
        },
        "OneRpaInstanceModel": {
            "type": "object",
            "required": [
                "apiUrlBase",
                "apiUserEmail",
                "apiUserPassword",
                "id",
                "mqPassword",
                "mqUri",
                "mqUser",
                "name",
                "publicUrl"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The primary key of the OneRpa Instance"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the OneRpa Instance"
                },
                "apiUrlBase": {
                    "type": "string",
                    "description": "The API URL of the OneRpa Instance"
                },
                "publicUrl": {
                    "type": "string",
                    "description": "The public URL of the OneRpa Instance"
                },
                "apiUserEmail": {
                    "type": "string",
                    "description": "The email address of the API user of the OneRpa Instance"
                },
                "apiUserPassword": {
                    "type": "string",
                    "description": "The password of the API user of the OneRpa Instance"
                },
                "changeApiUserPassword": {
                    "type": "boolean",
                    "description": "true if changing the password of the API user, false if not"
                },
                "mqUri": {
                    "type": "string",
                    "description": "The URI of the MQ service"
                },
                "mqUser": {
                    "type": "string",
                    "description": "The username of the MQ user"
                },
                "mqPassword": {
                    "type": "string",
                    "description": "The password of the MQ user"
                },
                "changeMqPassword": {
                    "type": "boolean",
                    "description": "true if changing the password of the MQ user, false if not"
                }
            }
        },
        "OneRpaSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OneRpaInstanceListModel",
                        "originalRef": "OneRpaInstanceListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "OneStoreInstanceListModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Primary key of the OneStore Instance in Amelia"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the OneStore Instance"
                },
                "publicUrl": {
                    "type": "string",
                    "description": "The public URL of the OneStore Instance"
                }
            }
        },
        "OneStoreInstanceModel": {
            "type": "object",
            "required": [
                "apiUrlBase",
                "apiUserEmail",
                "apiUserPassword",
                "id",
                "name",
                "publicUrl"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id for 1Store Instance"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the 1Store Instance"
                },
                "apiUrlBase": {
                    "type": "string",
                    "description": "API URL of the 1Store Instance"
                },
                "publicUrl": {
                    "type": "string",
                    "description": "Public URL of the 1Store Instance"
                },
                "apiUserEmail": {
                    "type": "string",
                    "description": "Email address of the API user of the 1Store Instance"
                },
                "apiUserPassword": {
                    "type": "string",
                    "description": "Password of the API user of the 1Store Instance"
                },
                "changeApiUserPassword": {
                    "type": "boolean",
                    "description": "True if changing the password of the API user, false if not"
                },
                "registrationKey": {
                    "type": "string",
                    "description": "Unique identified for 1Store managed instance, it is used by 1Store to distinguish all request received from Amelia"
                },
                "changeRegistrationKey": {
                    "type": "boolean",
                    "description": "True if changing the registration key for 1Store instance, else false."
                }
            }
        },
        "OneStoreSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OneStoreInstanceListModel",
                        "originalRef": "OneStoreInstanceListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "OntActionListModel": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The creation date of this action"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The creator of this action"
                },
                "id": {
                    "type": "string",
                    "description": "the primary key of the action"
                },
                "modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last modified date of this action"
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "The last modifier of this action"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the action"
                },
                "ontCreationType": {
                    "type": "string",
                    "description": "the creation type of the action"
                }
            }
        },
        "OntActionModel": {
            "type": "object",
            "required": [
                "domainId",
                "name",
                "ontCreationType"
            ],
            "properties": {
                "children": {
                    "type": "array",
                    "description": "Ont action children",
                    "items": {
                        "type": "string"
                    }
                },
                "domainId": {
                    "type": "string",
                    "description": "Unique identifier for the domain of ontAction."
                },
                "id": {
                    "type": "string",
                    "description": "The identifier of the ont action"
                },
                "name": {
                    "type": "string",
                    "description": "Ont Action name"
                },
                "ontCreationType": {
                    "type": "string",
                    "description": "Source of creation for the object",
                    "enum": [
                        "ONTOLOGY_FILE_UPLOAD",
                        "SCHEMA_JSONLD_FILE_UPLOAD",
                        "INTENT_FILE_UPLOAD",
                        "UTTERANCE_INPUT",
                        "LEARNING",
                        "TRANSCRIPT",
                        "MANUAL"
                    ]
                },
                "ontType": {
                    "type": "string",
                    "description": "Ontology type",
                    "enum": [
                        "USER",
                        "DOMAIN",
                        "BACKEND"
                    ]
                },
                "parents": {
                    "type": "array",
                    "description": "Ont action parents",
                    "items": {
                        "type": "string"
                    }
                },
                "synonyms": {
                    "type": "array",
                    "description": "List of synonyms for ont action",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "OntActionSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OntActionListModel",
                        "originalRef": "OntActionListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "OntIntentMappingListModel": {
            "type": "object",
            "properties": {
                "domainId": {
                    "type": "string",
                    "description": "the domain id where this mapping resides"
                },
                "id": {
                    "type": "string",
                    "description": "the primary key of the intent mapping"
                },
                "intent": {
                    "description": "the intent mapped in the mapping",
                    "$ref": "#/definitions/IdNameCodeModel",
                    "originalRef": "IdNameCodeModel"
                },
                "lat": {
                    "type": "string",
                    "description": "Lexical answer type"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the intent mapping"
                },
                "ontAction": {
                    "description": "ont action mapped in the mapping",
                    "$ref": "#/definitions/OntActionListModel",
                    "originalRef": "OntActionListModel"
                },
                "ontCreationType": {
                    "type": "string",
                    "description": "Ontology creation type"
                },
                "ontObject": {
                    "type": "array",
                    "description": "List of ont object mapped",
                    "items": {
                        "$ref": "#/definitions/OntObjectListModel",
                        "originalRef": "OntObjectListModel"
                    }
                }
            }
        },
        "OntIntentMappingModel": {
            "type": "object",
            "required": [
                "domainId",
                "intent",
                "ontAction",
                "ontObjects",
                "parameters"
            ],
            "properties": {
                "domainId": {
                    "type": "string",
                    "description": "Unique identifier for the domain of ontAction."
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the ont intent mapping"
                },
                "intent": {
                    "type": "string",
                    "description": "ID of the intent to which action and object is mapped"
                },
                "lat": {
                    "type": "string",
                    "description": "Lexical Answer Type for this mapping",
                    "enum": [
                        "AMOUNT/QUANTITY",
                        "CAUSE/PURPOSE",
                        "CURRENCY",
                        "CUSTOM_DATUM",
                        "DATE",
                        "LOCATION",
                        "MANNER",
                        "NUMBER",
                        "PERSON",
                        "TIME",
                        "NONE",
                        "BOOLEAN"
                    ]
                },
                "ontAction": {
                    "type": "string",
                    "description": "ID of ont action used for this mapping"
                },
                "ontObjects": {
                    "type": "array",
                    "description": "Set of ont objects IDs for this mapping",
                    "items": {
                        "type": "string"
                    }
                },
                "parameters": {
                    "type": "array",
                    "description": "Set of ont objects grouped",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "OntIntentMappingSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OntIntentMappingListModel",
                        "originalRef": "OntIntentMappingListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "OntObjectEntityModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The code of the entity"
                },
                "entityId": {
                    "type": "string",
                    "description": "The id of the entity"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the entity"
                }
            }
        },
        "OntObjectListModel": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "description": "Attributes of this object",
                    "items": {
                        "type": "string"
                    }
                },
                "children": {
                    "type": "array",
                    "description": "Child objects of this object",
                    "items": {
                        "$ref": "#/definitions/OntObjectListModel",
                        "originalRef": "OntObjectListModel"
                    }
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The creation date of this object"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The creator of this object"
                },
                "entities": {
                    "type": "array",
                    "description": "Entities of this object",
                    "items": {
                        "$ref": "#/definitions/OntObjectEntityModel",
                        "originalRef": "OntObjectEntityModel"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "the primary key of the object"
                },
                "modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last modified date of this object"
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "The last modifier of this object"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the object"
                },
                "ontCreationType": {
                    "type": "string",
                    "description": "The creation type of this object"
                },
                "ontObjectType": {
                    "type": "string",
                    "description": "the type of the object",
                    "enum": [
                        "ROOT",
                        "INTERNAL",
                        "LEAF"
                    ]
                },
                "properties": {
                    "type": "array",
                    "description": "Properties of this object",
                    "items": {
                        "$ref": "#/definitions/OntPropertyModel",
                        "originalRef": "OntPropertyModel"
                    }
                }
            }
        },
        "OntObjectModel": {
            "type": "object",
            "required": [
                "domainId",
                "name",
                "ontCreationType"
            ],
            "properties": {
                "attributes": {
                    "type": "array",
                    "description": "List of attributes associated with OntObject",
                    "items": {
                        "type": "string"
                    }
                },
                "children": {
                    "type": "array",
                    "description": "Ont object children",
                    "items": {
                        "type": "string"
                    }
                },
                "domainId": {
                    "type": "string",
                    "description": "Unique identifier for the domain of ontObject."
                },
                "entities": {
                    "type": "array",
                    "description": "List of entities for OntObject",
                    "items": {
                        "$ref": "#/definitions/OntObjectEntityModel",
                        "originalRef": "OntObjectEntityModel"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The identifier of the ont object"
                },
                "name": {
                    "type": "string",
                    "description": "Ont Object name"
                },
                "ontCreationType": {
                    "type": "string",
                    "description": "Source of creation for the object",
                    "enum": [
                        "ONTOLOGY_FILE_UPLOAD",
                        "SCHEMA_JSONLD_FILE_UPLOAD",
                        "INTENT_FILE_UPLOAD",
                        "UTTERANCE_INPUT",
                        "LEARNING",
                        "TRANSCRIPT",
                        "MANUAL"
                    ]
                },
                "ontType": {
                    "type": "string",
                    "description": "Ontology type",
                    "enum": [
                        "USER",
                        "DOMAIN",
                        "BACKEND"
                    ]
                },
                "parents": {
                    "type": "array",
                    "description": "Ont object parents",
                    "items": {
                        "type": "string"
                    }
                },
                "properties": {
                    "type": "array",
                    "description": "List of properties for OntObject",
                    "items": {
                        "$ref": "#/definitions/OntPropertyModel",
                        "originalRef": "OntPropertyModel"
                    }
                },
                "synonyms": {
                    "type": "array",
                    "description": "List of synonyms for ont object",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "OntObjectSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OntObjectListModel",
                        "originalRef": "OntObjectListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "OntPropertyModel": {
            "type": "object",
            "required": [
                "name",
                "object"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the ont mapping"
                },
                "name": {
                    "type": "string",
                    "description": "Property name"
                },
                "object": {
                    "type": "string",
                    "description": "Unique ID of the primary object in a relation"
                },
                "relationType": {
                    "type": "string",
                    "description": "relation type",
                    "enum": [
                        "hasA"
                    ]
                },
                "value": {
                    "type": "string",
                    "description": "Unique ID of the secondary object in a relation"
                }
            }
        },
        "PendingConversationStatusMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                },
                "until": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time until which the conversation has to be put on 'PENDING'"
                }
            },
            "description": "A message to instruct amelia to put the conversation to 'PENDING' state for a certain period of time"
        },
        "PickupCommand": {
            "type": "object",
            "required": [
                "deliveryMode"
            ],
            "properties": {
                "deliveryMode": {
                    "type": "string",
                    "description": "The mode by which the client will received messages from Amelia",
                    "enum": [
                        "WEBHOOK",
                        "POLLING"
                    ]
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "A valid, reachable URL to which all messages from Amelia will be posted, required if deliveryMode is WEBHOOK"
                },
                "secret": {
                    "type": "string",
                    "description": "A per-conversation secret; if specified, it will be added to the header of all webhook posts for this conversation"
                },
                "channel": {
                    "type": "string",
                    "description": "Channel for this agent's session.  Default is 'rest_gateway'."
                },
                "clientTimestamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Epoch millis as reported by the client"
                },
                "conversationId": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "example": "otheruser@otherdomain.com",
                    "description": "Allows overriding the conversation user.  Note, the authenticated user must have authority  to do this on the Amelia side"
                },
                "externalUid": {
                    "type": "string",
                    "description": "Allows overriding the conversation user.  Note, the authenticated user must have authority  to do this on the Amelia side"
                },
                "firstName": {
                    "type": "string",
                    "description": "Allows for overriding the first name of the conversation user.   Note, the authenticated user  must have authority to do this on the Amelia side"
                },
                "lastName": {
                    "type": "string",
                    "description": "Allows for overriding the last name of the conversation user.   Note, the authenticated user  must have authority to do this on the Amelia side"
                },
                "receiveDebugMessages": {
                    "type": "boolean",
                    "description": "if true, this conversation will receive debug messages the user may be eligible to receive. If false, it will not.  If omitted, the conversation will use the configured settings of the rest gateway instance"
                },
                "sessionLocale": {
                    "type": "string",
                    "description": "An optional locale in which the conversation should be picked up.  If omitted, will default to the settings of the domain, or of the user."
                },
                "timeZone": {
                    "type": "string",
                    "description": "A valid timeZone code, e.g. PST"
                },
                "userId": {
                    "type": "string",
                    "description": "Allows overriding the conversation user.  Note, the authenticated user must have authority  to do this on the Amelia side"
                }
            },
            "description": "Command to pick up a conversation"
        },
        "PlotNodeModel«Number,Number»": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "description": "time-stamp label"
                },
                "x": {
                    "description": "x-axis coordinate",
                    "$ref": "#/definitions/Number",
                    "originalRef": "Number"
                },
                "y": {
                    "description": "y-axis coordinate",
                    "$ref": "#/definitions/Number",
                    "originalRef": "Number"
                }
            },
            "description": "Display each point of a graph."
        },
        "PlotNodeModel«Number,string»": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "description": "time-stamp label"
                },
                "x": {
                    "description": "x-axis coordinate",
                    "$ref": "#/definitions/Number",
                    "originalRef": "Number"
                },
                "y": {
                    "type": "string",
                    "description": "y-axis coordinate"
                }
            },
            "description": "Display each point of a graph."
        },
        "PredictionCandidate": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The code of the goal of this prediction"
                },
                "domainName": {
                    "type": "string",
                    "description": "The name of the domain of the goal used in this prediction"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of this prediction"
                },
                "score": {
                    "type": "number",
                    "format": "double",
                    "description": "The score of this prediction"
                }
            },
            "description": "A candidate evaluated in a prediction"
        },
        "PredictionScoreMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "prediction": {
                    "description": "The prediction summary",
                    "$ref": "#/definitions/UtterancePrediction",
                    "originalRef": "UtterancePrediction"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "Message to show the prediction score in ui while chatting"
        },
        "PresentMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "resourceToPresent": {
                    "description": "The resource to display, along with hints on how to display it",
                    "$ref": "#/definitions/CmObjectToDisplay",
                    "originalRef": "CmObjectToDisplay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent by Amelia to request a particular piece of content be displayed"
        },
        "ProcessAbortedEvent": {
            "type": "object",
            "required": [
                "eventId",
                "name",
                "processInstance",
                "reason"
            ],
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "A unique ID for this event (instance)"
                },
                "name": {
                    "type": "string",
                    "description": "The name/type of this event"
                },
                "processInstance": {
                    "description": "Process instance information",
                    "$ref": "#/definitions/ProcessInstanceSummary",
                    "originalRef": "ProcessInstanceSummary"
                },
                "reason": {
                    "type": "string",
                    "description": "Abortion reason"
                }
            },
            "description": "When a running or suspended process instance gets aborted."
        },
        "ProcessCompletedEvent": {
            "type": "object",
            "required": [
                "eventId",
                "name",
                "processInstance"
            ],
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "A unique ID for this event (instance)"
                },
                "name": {
                    "type": "string",
                    "description": "The name/type of this event"
                },
                "processInstance": {
                    "description": "Process instance information",
                    "$ref": "#/definitions/ProcessInstanceSummary",
                    "originalRef": "ProcessInstanceSummary"
                }
            },
            "description": "When a running process instance is finished and will not longer be subject to change."
        },
        "ProcessInstanceSummary": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "modelId",
                "modelName",
                "modelRevisionId",
                "modelRevisionNumber",
                "processDefinitionId",
                "processInstanceId",
                "sequence",
                "status"
            ],
            "properties": {
                "contextId": {
                    "type": "string",
                    "description": "Context identifier"
                },
                "conversationId": {
                    "type": "string",
                    "description": "Conversation identifier"
                },
                "definitionInstances": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of times this process instance's definition was instantiated"
                },
                "modelId": {
                    "type": "string",
                    "description": "Model identifier"
                },
                "modelInstances": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of times this process model was instantiated"
                },
                "modelName": {
                    "type": "string",
                    "description": "Model name"
                },
                "modelRevisionId": {
                    "type": "string",
                    "description": "Model revision identifier"
                },
                "modelRevisionNumber": {
                    "description": "Model revision number",
                    "$ref": "#/definitions/RevisionNumber",
                    "originalRef": "RevisionNumber"
                },
                "parentInstanceId": {
                    "type": "string",
                    "description": "Parent process instance identifier"
                },
                "processDefinitionId": {
                    "type": "string",
                    "description": "Process definition identifier"
                },
                "processInstanceId": {
                    "type": "string",
                    "description": "Process instance identifier"
                },
                "sequence": {
                    "type": "string",
                    "description": "Process instance sequence number"
                },
                "status": {
                    "type": "string",
                    "description": "Process instance status"
                }
            },
            "description": "Basic information about a process instance and related entities, including parent process instances and subprocesses, but excluding their graphical representation."
        },
        "ProcessResumeMessageToAmelia": {
            "type": "object",
            "required": [
                "retryCurrentTask"
            ],
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "retryCurrentTask": {
                    "type": "boolean",
                    "description": "Retry current task when value is true, defaults to false"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                },
                "taskAttributes": {
                    "type": "object",
                    "description": "Attributes to resume bpn"
                }
            },
            "description": "Bpn resume message to resume the bpn by executing previous task again."
        },
        "ProcessResumedEvent": {
            "type": "object",
            "required": [
                "eventId",
                "graph",
                "name",
                "processInstance"
            ],
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "A unique ID for this event (instance)"
                },
                "graph": {
                    "description": "Lightweight BPN graph",
                    "$ref": "#/definitions/BpnLiteGraph",
                    "originalRef": "BpnLiteGraph"
                },
                "name": {
                    "type": "string",
                    "description": "The name/type of this event"
                },
                "processInstance": {
                    "description": "Process instance information",
                    "$ref": "#/definitions/ProcessInstanceSummary",
                    "originalRef": "ProcessInstanceSummary"
                }
            },
            "description": "When a suspended process instance gets resumed."
        },
        "ProcessStartedEvent": {
            "type": "object",
            "required": [
                "eventId",
                "graph",
                "name",
                "processInstance"
            ],
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "A unique ID for this event (instance)"
                },
                "graph": {
                    "description": "Lightweight BPN graph",
                    "$ref": "#/definitions/BpnLiteGraph",
                    "originalRef": "BpnLiteGraph"
                },
                "name": {
                    "type": "string",
                    "description": "The name/type of this event"
                },
                "processInstance": {
                    "description": "Process instance information",
                    "$ref": "#/definitions/ProcessInstanceSummary",
                    "originalRef": "ProcessInstanceSummary"
                }
            },
            "description": "When the process instance is about to start, but its first task has not been executed."
        },
        "ProcessSuspendedEvent": {
            "type": "object",
            "required": [
                "eventId",
                "name",
                "processInstance",
                "reason"
            ],
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "A unique ID for this event (instance)"
                },
                "name": {
                    "type": "string",
                    "description": "The name/type of this event"
                },
                "processInstance": {
                    "description": "Process instance information",
                    "$ref": "#/definitions/ProcessInstanceSummary",
                    "originalRef": "ProcessInstanceSummary"
                },
                "reason": {
                    "type": "string",
                    "description": "Suspension reason"
                }
            },
            "description": "When a running process instance gets suspended."
        },
        "PropertyModel": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Hyperparmeter key"
                },
                "value": {
                    "type": "string",
                    "description": "Hyperparmeter value"
                }
            }
        },
        "PushExistingConversationToAgentCommand": {
            "type": "object",
            "properties": {
                "agentEmail": {
                    "type": "string",
                    "example": "otheruser@otherdomain.com",
                    "description": "Push the conversation to this agent (alternative to agentId)"
                },
                "agentExternalUid": {
                    "type": "string",
                    "description": "Push the conversation to this agent (alternative to agentId and agentEmail"
                },
                "agentId": {
                    "type": "string",
                    "description": "Push the conversation to this agent"
                },
                "autoSwitch": {
                    "type": "boolean",
                    "description": "Request that the user's UI switch to this conversation immediately"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the conversation topic"
                },
                "gatewayIntegrationId": {
                    "type": "string",
                    "description": "If this conversation should be pushed through a gateway, the integration id for the connected endpoint."
                },
                "pushAttributes": {
                    "type": "object",
                    "description": "If this conversation should be pushed through a gateway, extra attributes specific to the endpoint handling the request.",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "description": "Command to push an existing conversation to an Agent"
        },
        "PushNewConversationWithAgentCommand": {
            "type": "object",
            "required": [
                "deliveryMode",
                "domain"
            ],
            "properties": {
                "deliveryMode": {
                    "type": "string",
                    "description": "The mode by which the client will received messages from Amelia",
                    "enum": [
                        "WEBHOOK",
                        "POLLING"
                    ]
                },
                "domain": {
                    "type": "string",
                    "description": "The code of an Amelia Domain in which to have this conversation"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "A valid, reachable URL to which all messages from Amelia will be posted, required if deliveryMode is WEBHOOK"
                },
                "secret": {
                    "type": "string",
                    "description": "A per-conversation secret; if specified, it will be added to the header of all webhook posts for this conversation"
                },
                "agentClientTimestamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Epoch millis as reported by the agent's client"
                },
                "agentEmail": {
                    "type": "string",
                    "example": "otheruser@otherdomain.com",
                    "description": "The agent for this conversation (alternative to agentId)"
                },
                "agentExternalUid": {
                    "type": "string",
                    "description": "The agent for this conversation (alternative to userId and userEmail"
                },
                "agentId": {
                    "type": "string",
                    "description": "The agent for this conversation"
                },
                "agentTimeZone": {
                    "type": "string",
                    "description": "A valid timeZone code, e.g. PST"
                },
                "autoSwitch": {
                    "type": "boolean",
                    "description": "Request that the user's UI switch to this conversation immediately"
                },
                "channel": {
                    "type": "string",
                    "description": "Channel for this agent's session.  Default is 'rest_gateway'."
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the conversation topic"
                },
                "fqtId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Allow passing fqtId to be pushed to conversation. This stores the track of automata execution"
                },
                "gatewayIntegrationId": {
                    "type": "string",
                    "description": "If this conversation should be pushed through a gateway, the integration id for the connected endpoint."
                },
                "initialAttributes": {
                    "type": "object",
                    "description": "A map of additional attributes to pass to the conversation",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "initialBpnVariables": {
                    "type": "object",
                    "description": "A map of additional bpn variables with which to start the conversation",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "initialEntities": {
                    "type": "object",
                    "description": "Allows entities passed to be used in triggering the initial intent. The entities should be prior present, otherwise it will be ignored.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "initialIntent": {
                    "type": "string",
                    "description": "Allows passed intent to trigger at start of conversation"
                },
                "pushAttributes": {
                    "type": "object",
                    "description": "If this conversation should be pushed through a gateway, extra attributes specific to the endpoint handling the request.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "receiveDebugMessages": {
                    "type": "boolean",
                    "description": "if true, this conversation will receive debug messages the user may be eligible to receive. If false, it will not.  If omitted, the conversation will use the configured settings of the rest gateway instance"
                },
                "userEmail": {
                    "type": "string",
                    "example": "otheruser@otherdomain.com",
                    "description": "Push the conversation to this user (alternative to userId)"
                },
                "userExternalUid": {
                    "type": "string",
                    "description": "Push the conversation to this user (alternative to userId and userEmail"
                },
                "userId": {
                    "type": "string",
                    "description": "Push the conversation to this user"
                }
            }
        },
        "PushNewConversationWithAmeliaCommand": {
            "type": "object",
            "required": [
                "domain"
            ],
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The code of an Amelia Domain in which to have this conversation"
                },
                "autoSwitch": {
                    "type": "boolean",
                    "description": "Request that the user's UI switch to this conversation immediately"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the conversation topic"
                },
                "fqtId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Allow passing fqtId to be pushed to conversation. This stores the track of automata execution"
                },
                "gatewayIntegrationId": {
                    "type": "string",
                    "description": "If this conversation should be pushed through a gateway, the integration id for the connected endpoint."
                },
                "initialAttributes": {
                    "type": "object",
                    "description": "A map of additional attributes to pass to the conversation",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "initialBpnVariables": {
                    "type": "object",
                    "description": "A map of additional bpn variables with which to start the conversation",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "initialEntities": {
                    "type": "object",
                    "description": "Allows entities passed to be used in triggering the initial intent. The entities should be prior present, otherwise it will be ignored.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "initialIntent": {
                    "type": "string",
                    "description": "Allows passed intent to trigger at start of conversation"
                },
                "pushAttributes": {
                    "type": "object",
                    "description": "If this conversation should be pushed through a gateway, extra attributes specific to the endpoint handling the request.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "userEmail": {
                    "type": "string",
                    "example": "otheruser@otherdomain.com",
                    "description": "Push the conversation to this user (alternative to userId)"
                },
                "userExternalUid": {
                    "type": "string",
                    "description": "Push the conversation to this user (alternative to userId and userEmail"
                },
                "userId": {
                    "type": "string",
                    "description": "Push the conversation to this user"
                }
            }
        },
        "PushNotificationApiRequestModel": {
            "type": "object",
            "required": [
                "message",
                "pushAttributes"
            ],
            "properties": {
                "message": {
                    "type": "object",
                    "description": "Message to be sent. The format is specified in the pushAttributes, for example text or json"
                },
                "pushAttributes": {
                    "type": "object",
                    "description": "Attributes specific to the endpoint handling the request",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "PushNotificationApiResponseModel": {
            "type": "object",
            "required": [
                "success"
            ],
            "properties": {
                "result": {
                    "type": "string",
                    "description": "Descriptive outcome of the API request"
                },
                "success": {
                    "type": "boolean",
                    "description": "Pass or fail indicator for the request"
                }
            }
        },
        "QueueSummary": {
            "type": "object",
            "properties": {
                "abandoned": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of abandoned conversations in the past period"
                },
                "avgAnswerSpeed": {
                    "type": "string",
                    "description": "The average escalation answer speed in the past period"
                },
                "avgHandleTime": {
                    "type": "string",
                    "description": "The average handle time in the past period"
                },
                "awayAgents": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of agents marked away"
                },
                "busyAgents": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of agents in busy state"
                },
                "currentConversations": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of current conversations"
                },
                "currentSupervisorSuppressEscalations": {
                    "type": "boolean",
                    "description": "true if the current supervisor viewing this summary is an agent and suppressing escalations for this queue, false if the current supervisor is an agent but not suppressing, and null otherwise"
                },
                "maxAnswerSpeed": {
                    "type": "string",
                    "description": "The longest escalation answer speed in the past period"
                },
                "maxConcurrent": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The maximum number of concurrent conversations in the past period"
                },
                "maxHandleTime": {
                    "type": "string",
                    "description": "The longest handle time in the past period"
                },
                "offlineAgents": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of agents currently offline"
                },
                "queueCode": {
                    "type": "string",
                    "description": "The code of the queue in Amelia"
                },
                "queueId": {
                    "type": "string",
                    "description": "The primary key of the queue in Amelia"
                },
                "queueName": {
                    "type": "string",
                    "description": "The name of the queue in Amelia"
                },
                "readyAgents": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of agents in ready state to take a conversation"
                },
                "silentAgents": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of agents marked silent for this queue"
                },
                "slaViolations": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of sla violations in the past period"
                },
                "totalConversations": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The total number of conversations in the past period"
                }
            }
        },
        "RecommendationContextModel": {
            "type": "object",
            "properties": {
                "context": {
                    "type": "array",
                    "description": "The context or the list of utterances in which this recommendation has appeared.",
                    "items": {
                        "$ref": "#/definitions/AgentViewInstanceAnnotation",
                        "originalRef": "AgentViewInstanceAnnotation"
                    }
                },
                "recommendationCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of times this recommendation has been used by people."
                },
                "recommendationId": {
                    "type": "string",
                    "description": "Recommendation Id"
                },
                "score": {
                    "type": "number",
                    "format": "float",
                    "description": "The similarity score of the current context with this recommendation"
                }
            }
        },
        "RecommendationsMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "recommendations": {
                    "description": "Recommendations made from Amelia",
                    "$ref": "#/definitions/RecommendationsModel",
                    "originalRef": "RecommendationsModel"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message to show recommendations from Amelia for an agent to use"
        },
        "RecommendationsModel": {
            "type": "object",
            "properties": {
                "contextual": {
                    "type": "array",
                    "description": "Contextual Recommendations",
                    "items": {
                        "$ref": "#/definitions/ContextualRecommendationModel",
                        "originalRef": "ContextualRecommendationModel"
                    }
                },
                "faqs": {
                    "type": "array",
                    "description": "Recommendations from FAQs",
                    "items": {
                        "$ref": "#/definitions/FaqPredictionResultModel",
                        "originalRef": "FaqPredictionResultModel"
                    }
                },
                "routes": {
                    "type": "array",
                    "description": "Routes recommendations from Orchestrator",
                    "items": {
                        "$ref": "#/definitions/RouteRecommendation",
                        "originalRef": "RouteRecommendation"
                    }
                },
                "tags": {
                    "type": "array",
                    "description": "List of Tags extracted from utterance",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "RemoteLogStruct": {
            "type": "object",
            "properties": {
                "level": {
                    "type": "string",
                    "description": "The level of the logged message"
                },
                "message": {
                    "type": "string",
                    "description": "The logged message"
                }
            }
        },
        "RemovedApiResponse": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal error",
                    "description": "An optional message providing more information about the response"
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "example": 301
                }
            }
        },
        "RenameBpnModelCommand": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The new name of bpn model process"
                }
            },
            "description": "To rename a given bpn process"
        },
        "ReplayFinishedMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent to indicate that all previous messages have been replayed, and that the user is up to date with the current conversation"
        },
        "RequestMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "cancellable": {
                    "type": "boolean",
                    "description": "True if Amelia thinks this upload request should be cancellable, false if Amelia needs a valid upload to proceed"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hintText": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "mode": {
                    "type": "string",
                    "description": "The type of request",
                    "enum": [
                        "FILE_UPLOAD",
                        "AUDIO_CAPTURE",
                        "PHOTO_CAPTURE"
                    ]
                },
                "multiple": {
                    "type": "boolean",
                    "description": "If the upload request is for multiple files"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "resourceToRequest": {
                    "description": "Details about the resource request",
                    "$ref": "#/definitions/CmObjectToRequest",
                    "originalRef": "CmObjectToRequest"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent when Amelia is requesting a resource or file be uploaded from the user"
        },
        "Resolution": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "string",
                    "description": "HyperA request id"
                },
                "routeId": {
                    "type": "string",
                    "description": "Route selected to resolve HyperA Request"
                }
            },
            "description": "Resolution selected by Agent to resolve HyperA Request Escalation"
        },
        "Resource": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "file": {
                    "$ref": "#/definitions/File",
                    "originalRef": "File"
                },
                "filename": {
                    "type": "string"
                },
                "inputStream": {
                    "$ref": "#/definitions/InputStream",
                    "originalRef": "InputStream"
                },
                "open": {
                    "type": "boolean"
                },
                "readable": {
                    "type": "boolean"
                },
                "uri": {
                    "$ref": "#/definitions/URI",
                    "originalRef": "URI"
                },
                "url": {
                    "$ref": "#/definitions/URL",
                    "originalRef": "URL"
                }
            }
        },
        "ResponseEntity": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object"
                },
                "statusCode": {
                    "type": "string",
                    "enum": [
                        "100 CONTINUE",
                        "101 SWITCHING_PROTOCOLS",
                        "102 PROCESSING",
                        "103 CHECKPOINT",
                        "200 OK",
                        "201 CREATED",
                        "202 ACCEPTED",
                        "203 NON_AUTHORITATIVE_INFORMATION",
                        "204 NO_CONTENT",
                        "205 RESET_CONTENT",
                        "206 PARTIAL_CONTENT",
                        "207 MULTI_STATUS",
                        "208 ALREADY_REPORTED",
                        "226 IM_USED",
                        "300 MULTIPLE_CHOICES",
                        "301 MOVED_PERMANENTLY",
                        "302 FOUND",
                        "302 MOVED_TEMPORARILY",
                        "303 SEE_OTHER",
                        "304 NOT_MODIFIED",
                        "305 USE_PROXY",
                        "307 TEMPORARY_REDIRECT",
                        "308 PERMANENT_REDIRECT",
                        "400 BAD_REQUEST",
                        "401 UNAUTHORIZED",
                        "402 PAYMENT_REQUIRED",
                        "403 FORBIDDEN",
                        "404 NOT_FOUND",
                        "405 METHOD_NOT_ALLOWED",
                        "406 NOT_ACCEPTABLE",
                        "407 PROXY_AUTHENTICATION_REQUIRED",
                        "408 REQUEST_TIMEOUT",
                        "409 CONFLICT",
                        "410 GONE",
                        "411 LENGTH_REQUIRED",
                        "412 PRECONDITION_FAILED",
                        "413 PAYLOAD_TOO_LARGE",
                        "413 REQUEST_ENTITY_TOO_LARGE",
                        "414 URI_TOO_LONG",
                        "414 REQUEST_URI_TOO_LONG",
                        "415 UNSUPPORTED_MEDIA_TYPE",
                        "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                        "417 EXPECTATION_FAILED",
                        "418 I_AM_A_TEAPOT",
                        "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                        "420 METHOD_FAILURE",
                        "421 DESTINATION_LOCKED",
                        "422 UNPROCESSABLE_ENTITY",
                        "423 LOCKED",
                        "424 FAILED_DEPENDENCY",
                        "425 TOO_EARLY",
                        "426 UPGRADE_REQUIRED",
                        "428 PRECONDITION_REQUIRED",
                        "429 TOO_MANY_REQUESTS",
                        "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                        "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                        "500 INTERNAL_SERVER_ERROR",
                        "501 NOT_IMPLEMENTED",
                        "502 BAD_GATEWAY",
                        "503 SERVICE_UNAVAILABLE",
                        "504 GATEWAY_TIMEOUT",
                        "505 HTTP_VERSION_NOT_SUPPORTED",
                        "506 VARIANT_ALSO_NEGOTIATES",
                        "507 INSUFFICIENT_STORAGE",
                        "508 LOOP_DETECTED",
                        "509 BANDWIDTH_LIMIT_EXCEEDED",
                        "510 NOT_EXTENDED",
                        "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                },
                "statusCodeValue": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ResponsePoolContext": {
            "type": "object",
            "properties": {
                "identifier": {
                    "$ref": "#/definitions/ResponsePoolIdentifier",
                    "originalRef": "ResponsePoolIdentifier"
                }
            }
        },
        "ResponsePoolEntryModel": {
            "type": "object",
            "required": [
                "locale",
                "responsePoolCode",
                "responsePoolGroupId",
                "responsePoolId",
                "responseTemplate",
                "sequence"
            ],
            "properties": {
                "annotations": {
                    "type": "array",
                    "description": "Utterance Annotations applicable to the response pool entry",
                    "items": {
                        "$ref": "#/definitions/UtteranceAnnotationModel",
                        "originalRef": "UtteranceAnnotationModel"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the response pool entry",
                    "readOnly": true
                },
                "locale": {
                    "type": "string",
                    "description": "the locale code of this entry"
                },
                "responsePoolCode": {
                    "type": "string",
                    "description": "The code of the response pool"
                },
                "responsePoolGroupId": {
                    "type": "string",
                    "description": "The ID of the response pool group"
                },
                "responsePoolId": {
                    "type": "string",
                    "description": "The ID the response pool"
                },
                "responsePoolTagNames": {
                    "type": "array",
                    "description": "the list of tags of this entry",
                    "items": {
                        "type": "string"
                    }
                },
                "responseTemplate": {
                    "type": "string",
                    "description": "the template of this response pool entry"
                },
                "sequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "the sequence number of this entry"
                }
            }
        },
        "ResponsePoolIdentifier": {
            "type": "object",
            "properties": {
                "groupCode": {
                    "type": "string"
                },
                "poolCode": {
                    "type": "string"
                }
            }
        },
        "ResponsePoolProfile": {
            "type": "object",
            "properties": {
                "lenient": {
                    "type": "boolean"
                },
                "tagMatchingOperator": {
                    "type": "string",
                    "enum": [
                        "EXACT",
                        "ALL",
                        "ANY"
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "RevisionNumber": {
            "type": "object",
            "properties": {
                "major": {
                    "type": "integer",
                    "format": "int32"
                },
                "minor": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "RoleListModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique id of the role"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role"
                }
            }
        },
        "RoleModel": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "authorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthorityModel",
                        "originalRef": "AuthorityModel"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the role"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role"
                }
            }
        },
        "RoleSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoleListModel",
                        "originalRef": "RoleListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "RouteLinkedMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "emoticon": {
                    "type": "string",
                    "description": "Emoticon name generated by humanization, if any."
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hintText": {
                    "type": "string",
                    "description": "Hint text"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "outboundFormInputCorrelationId": {
                    "type": "string",
                    "description": "Correlates this message with a subsequent FormInputMessage. If exists, this message would be the question for the subsequent form input data."
                },
                "parentRouteId": {
                    "type": "string",
                    "description": "Id of parent route."
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "responsePoolContext": {
                    "description": "If this message was generated from a response pool, the response pool context.",
                    "$ref": "#/definitions/ResponsePoolContext",
                    "originalRef": "ResponsePoolContext"
                },
                "routeId": {
                    "type": "string",
                    "description": "Id of route."
                },
                "routeLinked": {
                    "type": "string",
                    "description": "Route linked."
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "speechMessageText": {
                    "type": "string",
                    "description": "Message text marked up with speech tags (technology-specific), when speech utterance annotations are available."
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message containing route information."
        },
        "RouteRecommendation": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "description": "Attributes for Route.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "code": {
                    "type": "string",
                    "description": "Route code"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Code of Endpoint."
                },
                "endpointId": {
                    "type": "string",
                    "description": "Endpoint associated to route."
                },
                "endpointName": {
                    "type": "string",
                    "description": "Endpoint Name."
                },
                "id": {
                    "type": "string",
                    "description": "Route Id."
                },
                "name": {
                    "type": "string",
                    "description": "Route name"
                },
                "notes": {
                    "type": "string",
                    "description": "Notes associated to routes."
                },
                "operation": {
                    "type": "string",
                    "description": "Operation associated to route"
                },
                "score": {
                    "type": "number",
                    "format": "double",
                    "description": "Score for recommendation"
                },
                "variables": {
                    "type": "object",
                    "description": "Prefilled variables associated to routes",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "RunAutomatonMessageToAmelia": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Code of the Automaton."
                },
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                },
                "sourceMessageId": {
                    "type": "string",
                    "description": "Source message Id."
                },
                "subject": {
                    "type": "string",
                    "description": "Subject of the Automaton"
                },
                "taskType": {
                    "type": "string",
                    "description": "Task Type of the Automaton."
                },
                "variables": {
                    "type": "string",
                    "description": "Variables."
                }
            },
            "description": "A message from an agent to instruct Amelia to execute the Automaton."
        },
        "SayResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The status code of the response"
                }
            }
        },
        "ScriptFolder": {
            "type": "object",
            "properties": {
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain in Amelia to which this folder belongs"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Script Folder in Amelia"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Script Folder in Amelia"
                },
                "parentPathId": {
                    "type": "string",
                    "description": "The primary key of the parent containing folder, or null if it is top level"
                }
            }
        },
        "ScriptModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The script contents"
                },
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain to which this Script belongs"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the Script in Amelia"
                },
                "includedScriptsIds": {
                    "type": "array",
                    "description": "The primary keys of scripts to be included along with this Script",
                    "items": {
                        "type": "string"
                    }
                },
                "language": {
                    "type": "string",
                    "description": "The language of the Script"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Script Amelia"
                },
                "parentPathId": {
                    "type": "string",
                    "description": "The primary key of the parent containing folder, or null if it is top level"
                },
                "revisionId": {
                    "type": "string",
                    "description": "The primary key of the revision of this script"
                }
            }
        },
        "ScriptTreeNode": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "description": "The list of child nodes of this ScriptTreeNode",
                    "items": {
                        "$ref": "#/definitions/ScriptTreeNode",
                        "originalRef": "ScriptTreeNode"
                    }
                },
                "domainId": {
                    "type": "string",
                    "description": "The unique identifier of the domain in which this ScriptTreeNode belongs"
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of this ScriptTreeNode"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this ScriptTreeNode"
                },
                "parentPathId": {
                    "type": "string",
                    "description": "The primary key of the parent element of this ScriptTreeNode"
                },
                "type": {
                    "type": "string",
                    "description": "The type of this ScriptTreeNode"
                }
            }
        },
        "ScriptValidationModel": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "validationResponse": {
                    "$ref": "#/definitions/ScriptValidationResponse",
                    "originalRef": "ScriptValidationResponse"
                }
            },
            "description": "The results of check a Script syntax"
        },
        "ScriptValidationResponse": {
            "type": "object",
            "properties": {
                "hasError": {
                    "type": "boolean"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ScriptValidationResult",
                        "originalRef": "ScriptValidationResult"
                    }
                }
            }
        },
        "ScriptValidationResult": {
            "type": "object",
            "properties": {
                "checkType": {
                    "type": "string"
                },
                "column": {
                    "type": "integer",
                    "format": "int32"
                },
                "line": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "reportable": {
                    "type": "boolean"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "SemNetFaqDetailMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "answers": {
                    "type": "array",
                    "description": "SemNet FAQ Predictions along with metadata",
                    "items": {
                        "$ref": "#/definitions/FaqPredictionResultModel",
                        "originalRef": "FaqPredictionResultModel"
                    }
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "emoticon": {
                    "type": "string",
                    "description": "Emoticon name generated by humanization, if any."
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hintText": {
                    "type": "string",
                    "description": "Hint text"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "outboundFormInputCorrelationId": {
                    "type": "string",
                    "description": "Correlates this message with a subsequent FormInputMessage. If exists, this message would be the question for the subsequent form input data."
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "responsePoolContext": {
                    "description": "If this message was generated from a response pool, the response pool context.",
                    "$ref": "#/definitions/ResponsePoolContext",
                    "originalRef": "ResponsePoolContext"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "speechMessageText": {
                    "type": "string",
                    "description": "Message text marked up with speech tags (technology-specific), when speech utterance annotations are available."
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message containing Semnet FAQ Detailed information"
        },
        "SemnetFaqDetail": {
            "type": "object",
            "properties": {
                "docId": {
                    "type": "string",
                    "description": "Document Id"
                },
                "docTitle": {
                    "type": "string",
                    "description": "Document Title"
                },
                "docUrl": {
                    "type": "string",
                    "description": "Document Url"
                },
                "paragraph": {
                    "type": "string",
                    "description": "Paragraph Text"
                },
                "paragraphs": {
                    "type": "array",
                    "description": "List of Paragraphs",
                    "items": {
                        "$ref": "#/definitions/SemnetParagraphDetail",
                        "originalRef": "SemnetParagraphDetail"
                    }
                },
                "sectionHeading": {
                    "type": "string",
                    "description": "Document Section Heading"
                },
                "sectionPageNumber": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Section Page Number"
                }
            }
        },
        "SemnetParagraphDetail": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Document Metadata",
                    "$ref": "#/definitions/DocumentElementMetadata",
                    "originalRef": "DocumentElementMetadata"
                },
                "paragraph": {
                    "type": "string",
                    "description": "Paragraph text"
                }
            }
        },
        "SentientMetricsListModel": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "description": "List of metrics data",
                    "items": {
                        "$ref": "#/definitions/SentientMetricsModel",
                        "originalRef": "SentientMetricsModel"
                    }
                }
            },
            "description": "List model for Sentient Dashboard metrics"
        },
        "SentientMetricsModel": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Abbreviation for the metric"
                },
                "label": {
                    "type": "string",
                    "description": "Time-Stamp label"
                },
                "metric": {
                    "type": "string",
                    "description": "Metric name"
                },
                "toolTips": {
                    "type": "array",
                    "description": "List of handled type for a metric",
                    "items": {
                        "type": "string"
                    }
                },
                "volume": {
                    "description": "Volume for the metric type",
                    "$ref": "#/definitions/Number",
                    "originalRef": "Number"
                }
            },
            "description": "Dashboard metrics to visualize all metrics"
        },
        "SessionClosedMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent when Amelia considers the user session ended"
        },
        "SessionGoneResponse": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "No active session associated with this token",
                    "description": "An optional message providing more information about the response"
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "example": 410
                }
            }
        },
        "SlotFieldGroupModel": {
            "type": "object",
            "properties": {
                "slotFieldGroupId": {
                    "type": "string",
                    "description": "Primary key of composite entity field group"
                },
                "slots": {
                    "type": "array",
                    "description": "List of primary keys of entities contained in this group",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of relation this composite entity group defines",
                    "enum": [
                        "OR",
                        "XOR",
                        "NOR",
                        "NAND",
                        "CONTIGUOUS"
                    ]
                }
            }
        },
        "SlotFieldModel": {
            "type": "object",
            "properties": {
                "defaultValue": {
                    "type": "string",
                    "description": "Default value for optional fields when a value is not provided. This should correspond to text provided by a user for the field, before any normalization."
                },
                "multivalued": {
                    "type": "boolean",
                    "description": "Indicates whether this field can contain more than one value"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Indicates whether this field is optional or required"
                },
                "order": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The order in which this field should appear in text. If '0', the field can appear anywhere in the span. Multiple fields can have the same order, and will be considered interchangeable."
                },
                "positions": {
                    "type": "array",
                    "description": "The positions in which this field can appear in text. If containing '0' or empty, the field can appear anywhere in the span. Multiple fields can have the same order, and will be considered interchangeable.",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "referencedSlot": {
                    "type": "string",
                    "description": "Primary key of entity definition"
                }
            }
        },
        "SlotMetaData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of this slot"
                },
                "utteranceCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of utterances associated with this slot"
                }
            }
        },
        "SlotProperties": {
            "type": "object",
            "properties": {
                "endIndex": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The end index of this entity in the utterance text"
                },
                "slotName": {
                    "type": "string",
                    "description": "The identifying name of this entity"
                },
                "slotValue": {
                    "type": "string",
                    "description": "The value of this entity (spanless entity value, or covered text)"
                },
                "startIndex": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The start index of this entity in the utterance text"
                }
            }
        },
        "SlotQuestionModel": {
            "type": "object",
            "properties": {
                "abstractSlot": {
                    "type": "string"
                },
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UtteranceAnnotationModel",
                        "originalRef": "UtteranceAnnotationModel"
                    }
                },
                "id": {
                    "type": "string"
                },
                "slotInfo": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "StackTraceElement": {
            "type": "object",
            "properties": {
                "classLoaderName": {
                    "type": "string"
                },
                "className": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "lineNumber": {
                    "type": "integer",
                    "format": "int32"
                },
                "methodName": {
                    "type": "string"
                },
                "moduleName": {
                    "type": "string"
                },
                "moduleVersion": {
                    "type": "string"
                },
                "nativeMethod": {
                    "type": "boolean"
                }
            }
        },
        "StatusAndMessageResponse": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal error",
                    "description": "An optional message providing more information about the response"
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "example": 500
                }
            }
        },
        "SttNotRecognizedMessageToAmelia": {
            "type": "object",
            "properties": {
                "completionCauseCode": {
                    "type": "string",
                    "description": "Completion-cause code, in compliance with <a href=\"https://datatracker.ietf.org/doc/html/rfc6787#section-9.4.11\">Completion-Causes</a>."
                },
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "A message typically sent in by the Amelia Voice Gateway when STT is unable to recognize speech."
        },
        "SubsystemResponderSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubsystemResponderTypeListModel",
                        "originalRef": "SubsystemResponderTypeListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "SubsystemResponderTypeListModel": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A more complete description of the SubsystemResponder"
                },
                "enabledByDefault": {
                    "type": "boolean",
                    "description": "Whether this responder is enabled by default"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the responder"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the responder"
                }
            }
        },
        "SystemErrorMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent when Amelia encounters a general system error"
        },
        "SystemPredictionModel": {
            "type": "object",
            "properties": {
                "answerPolarity": {
                    "type": "string",
                    "description": "Determines whether a user's response is a possible answer to a Yes, No, or IDK answer."
                },
                "dialogAct": {
                    "type": "string",
                    "description": "Provides the kind of dialog act of the user's utterance. Ex. Greeting, Thanking, etc."
                },
                "personalSpeechAct": {
                    "type": "string",
                    "description": "Provides the user's current sentiment towards the agent, based on their utterance."
                },
                "problemType": {
                    "type": "string",
                    "description": "Provides a guess at whether the user is expressing a request and is in need of help. When the user expresses a \"Generic Problem\", Amelia may ask an elaborating question. When the user makes a \"Request\" or \"Information Request\" that Amelia doesn\\'t understand, she may escalate."
                },
                "sentiment": {
                    "type": "string",
                    "description": "Provides the overall sentiment of a user's utterance."
                }
            }
        },
        "TabularDataColumnListModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Primary key of this table's column"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name of the column"
                },
                "type": {
                    "type": "string",
                    "description": "Type of column given by the canonical name of the corresponding Java class"
                }
            }
        },
        "TabularDataListModel": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Instant this table was created"
                },
                "createdBy": {
                    "type": "string",
                    "description": "Name of uploader of the tabular data file"
                },
                "delimiter": {
                    "type": "string",
                    "description": "Delimiter used by the original file"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain containing this tabular data"
                },
                "fileSize": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Size of original tabular data file"
                },
                "id": {
                    "type": "string",
                    "description": "Tabular data identifier"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tabular data table"
                },
                "rowCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of rows in the tabular data"
                },
                "textQualifier": {
                    "type": "string",
                    "description": "Text qualifier used by the original file"
                }
            }
        },
        "TabularDataModel": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The instant this tabular data table was created"
                },
                "delimiter": {
                    "type": "string",
                    "description": "The column delimiter of the file, can be a comma, tab, semi-colon, or pipe (the actual character)"
                },
                "domainCode": {
                    "type": "string",
                    "description": "The domain in which the tabular data exists"
                },
                "domainId": {
                    "type": "string",
                    "description": "Domain unique identifier for this tabular data table"
                },
                "file": {
                    "type": "string",
                    "format": "byte",
                    "description": "The binary content of the file",
                    "readOnly": true
                },
                "fileSize": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The size of the file imported"
                },
                "invalidReason": {
                    "type": "string",
                    "description": "Populated if the tabular data was marked as invalid with the reason"
                },
                "numOfColumns": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of columns in the tabular data"
                },
                "preview": {
                    "type": "array",
                    "description": "Rows used for previewing file on the UI",
                    "items": {
                        "type": "string"
                    }
                },
                "rowCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of rows in the tabular data"
                },
                "tableName": {
                    "type": "string",
                    "description": "The name of the tabular data table"
                },
                "tabularDataId": {
                    "type": "string",
                    "description": "Tabular data identifier"
                },
                "textQualifier": {
                    "type": "string",
                    "description": "The column text qualifier, can be single quote, double quote, or an empty string (the actual character)"
                },
                "valid": {
                    "type": "boolean",
                    "description": "Marks if the uploaded file is a valid tabular data input file"
                }
            }
        },
        "TabularDataModelColumnSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TabularDataColumnListModel",
                        "originalRef": "TabularDataColumnListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "TabularDataSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TabularDataListModel",
                        "originalRef": "TabularDataListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "TaskCompletedEvent": {
            "type": "object",
            "required": [
                "eventId",
                "name",
                "path",
                "taskDeltas",
                "taskInstance"
            ],
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "A unique ID for this event (instance)"
                },
                "name": {
                    "type": "string",
                    "description": "The name/type of this event"
                },
                "path": {
                    "type": "array",
                    "description": "Execution path associated with the current process instance",
                    "items": {
                        "$ref": "#/definitions/TransitionSummary",
                        "originalRef": "TransitionSummary"
                    }
                },
                "taskDeltas": {
                    "type": "array",
                    "description": "Task vertex deltas",
                    "items": {
                        "$ref": "#/definitions/TaskVertexDelta",
                        "originalRef": "TaskVertexDelta"
                    }
                },
                "taskInstance": {
                    "description": "Task instance information",
                    "$ref": "#/definitions/TaskInstanceSummary",
                    "originalRef": "TaskInstanceSummary"
                }
            },
            "description": "When a task is completely executed and its instance is no longer going to be changed."
        },
        "TaskCustomPropertyEvent": {
            "type": "object",
            "required": [
                "eventId",
                "name",
                "taskInstance"
            ],
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "A unique ID for this event (instance)"
                },
                "name": {
                    "type": "string",
                    "description": "The name/type of this event"
                },
                "taskInstance": {
                    "description": "Task instance information",
                    "$ref": "#/definitions/TaskInstanceSummary",
                    "originalRef": "TaskInstanceSummary"
                }
            },
            "description": "When a task containing custom properties is ready to be executed."
        },
        "TaskInstanceSummary": {
            "type": "object",
            "required": [
                "hasExpectation",
                "name",
                "processInstanceId",
                "sequence",
                "startTime",
                "taskDefinitionId",
                "taskInstanceId",
                "type",
                "vertex"
            ],
            "properties": {
                "customProperties": {
                    "type": "array",
                    "description": "Custom properties associated with the task",
                    "items": {
                        "$ref": "#/definitions/VariableSummary",
                        "originalRef": "VariableSummary"
                    }
                },
                "duration": {
                    "type": "string",
                    "description": "Task duration in milliseconds, if finished."
                },
                "endTime": {
                    "type": "string",
                    "description": "Task end time (number if milliseconds from the epoch)"
                },
                "expectationDmName": {
                    "type": "string",
                    "description": "Expectation dialog model name"
                },
                "expectedInputType": {
                    "type": "string",
                    "description": "Expected input type (No expectation, Any, Polar)"
                },
                "hasExpectation": {
                    "type": "boolean",
                    "description": "Determines whether the task has an expectation"
                },
                "instances": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Historically, the number of times this task instance's definition was instantiated"
                },
                "name": {
                    "type": "string",
                    "description": "Post-EL-processing task name"
                },
                "processInstanceId": {
                    "type": "string",
                    "description": "Process instance identifier"
                },
                "sequence": {
                    "type": "string",
                    "description": "Task instance sequence number"
                },
                "startTime": {
                    "type": "string",
                    "description": "Task start time (number of milliseconds from the epoch)"
                },
                "taskDefinitionId": {
                    "type": "string",
                    "description": "Task definition identifier"
                },
                "taskInstanceId": {
                    "type": "string",
                    "description": "Task instance identifier"
                },
                "type": {
                    "type": "string",
                    "description": "Task type (ask, say, present, script, manual, set, etc.)"
                },
                "vertex": {
                    "description": "Task vertex",
                    "$ref": "#/definitions/BpnLiteVertex",
                    "originalRef": "BpnLiteVertex"
                }
            },
            "description": "Task instance information about a task instance."
        },
        "TaskSegmentCompletedEvent": {
            "type": "object",
            "required": [
                "eventId",
                "name",
                "path",
                "taskInstance"
            ],
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "A unique ID for this event (instance)"
                },
                "name": {
                    "type": "string",
                    "description": "The name/type of this event"
                },
                "path": {
                    "type": "array",
                    "description": "Execution path associated with the current process instance",
                    "items": {
                        "$ref": "#/definitions/TransitionSummary",
                        "originalRef": "TransitionSummary"
                    }
                },
                "taskInstance": {
                    "description": "Task instance information",
                    "$ref": "#/definitions/TaskInstanceSummary",
                    "originalRef": "TaskInstanceSummary"
                }
            },
            "description": "When a task segment of headless BPN tasks and gateways is executed."
        },
        "TaskStartedEvent": {
            "type": "object",
            "required": [
                "eventId",
                "name",
                "path",
                "taskDeltas",
                "taskInstance"
            ],
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "A unique ID for this event (instance)"
                },
                "name": {
                    "type": "string",
                    "description": "The name/type of this event"
                },
                "path": {
                    "type": "array",
                    "description": "Execution path associated with the current process instance",
                    "items": {
                        "$ref": "#/definitions/TransitionSummary",
                        "originalRef": "TransitionSummary"
                    }
                },
                "taskDeltas": {
                    "type": "array",
                    "description": "Task vertex deltas",
                    "items": {
                        "$ref": "#/definitions/TaskVertexDelta",
                        "originalRef": "TaskVertexDelta"
                    }
                },
                "taskInstance": {
                    "description": "Task instance information",
                    "$ref": "#/definitions/TaskInstanceSummary",
                    "originalRef": "TaskInstanceSummary"
                }
            },
            "description": "When a task is ready to be executed."
        },
        "TaskVertexDelta": {
            "type": "object",
            "required": [
                "activation",
                "name",
                "normalizedActivation",
                "taskDefinitionId",
                "taskId",
                "type"
            ],
            "properties": {
                "activation": {
                    "type": "number",
                    "format": "double",
                    "description": "Activation level, for stochastic BPNs"
                },
                "name": {
                    "type": "string",
                    "description": "Raw task name"
                },
                "normalizedActivation": {
                    "type": "number",
                    "format": "double",
                    "description": "Normalized activation level, for stochastic BPNs"
                },
                "taskDefinitionId": {
                    "type": "string",
                    "description": "Task definition identifier"
                },
                "taskId": {
                    "type": "string",
                    "description": "Task identifier"
                },
                "type": {
                    "type": "string",
                    "description": "Flattened task type"
                }
            },
            "description": "Information that has changed about a BPN task vertex, across user interactions."
        },
        "TextMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "emoticon": {
                    "type": "string",
                    "description": "Emoticon name generated by humanization, if any."
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hintText": {
                    "type": "string",
                    "description": "Hint text"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "outboundFormInputCorrelationId": {
                    "type": "string",
                    "description": "Correlates this message with a subsequent FormInputMessage. If exists, this message would be the question for the subsequent form input data."
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "responsePoolContext": {
                    "description": "If this message was generated from a response pool, the response pool context.",
                    "$ref": "#/definitions/ResponsePoolContext",
                    "originalRef": "ResponsePoolContext"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "speechMessageText": {
                    "type": "string",
                    "description": "Message text marked up with speech tags (technology-specific), when speech utterance annotations are available."
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent when Amelia sends text"
        },
        "TextPredictionListModel": {
            "type": "object",
            "properties": {
                "predictions": {
                    "type": "array",
                    "description": "List of predictions/targets for a given evaluation.",
                    "items": {
                        "$ref": "#/definitions/TextPredictionModel",
                        "originalRef": "TextPredictionModel"
                    }
                }
            }
        },
        "TextPredictionModel": {
            "type": "object",
            "properties": {
                "actual": {
                    "type": "string",
                    "description": "Actual annotated value of target, such as an intent or entity code"
                },
                "context": {
                    "type": "string",
                    "description": "Context of textual target, e.g. the sentence containing a predicted span"
                },
                "predicted": {
                    "type": "string",
                    "description": "Predicted value of target, such as an intent or entity code"
                },
                "text": {
                    "type": "string",
                    "description": "Textual target, e.g. the span of text covered by an entity"
                }
            }
        },
        "Throwable": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/Throwable",
                    "originalRef": "Throwable"
                },
                "localizedMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StackTraceElement",
                        "originalRef": "StackTraceElement"
                    }
                },
                "suppressed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Throwable",
                        "originalRef": "Throwable"
                    }
                }
            }
        },
        "TimeRangeModel": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "the name of the logical group of this time range"
                },
                "id": {
                    "type": "string",
                    "description": "the id of the time range"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the time range"
                }
            }
        },
        "TimeZoneModel": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The text description of the Locale"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the Locale"
                }
            }
        },
        "TimeZoneSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TimeZoneModel",
                        "originalRef": "TimeZoneModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "TrainValidationResult": {
            "type": "object",
            "properties": {
                "severity": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "violationSummary": {
                    "type": "string"
                }
            }
        },
        "TrainingAlgorithmParameters": {
            "type": "object",
            "required": [
                "classifierModelType",
                "classifierType",
                "trainingObjective"
            ],
            "properties": {
                "classifierModelType": {
                    "type": "string",
                    "description": "Classifier algorithm type",
                    "enum": [
                        "LIBLINEAR_CLASSIFIER",
                        "LIBLINEAR_CLASSIFIER_L2R_LR",
                        "LIBLINEAR_TAGGER",
                        "CRFSUITE_TAGGER",
                        "PA_CLASSIFIER",
                        "PA_TAGGER",
                        "DNN_CLASSIFIER",
                        "DNN_TAGGER"
                    ]
                },
                "classifierType": {
                    "type": "string",
                    "description": "Indicates the role of this classifier model in the system",
                    "enum": [
                        "TEXT_CLASSIFIER",
                        "OUT_DOMAIN_TEXT_CLASSIFIER",
                        "TEXT_TAGGER",
                        "SPAN_CLASSIFIER"
                    ]
                },
                "hyperparameters": {
                    "type": "object",
                    "description": "Algorithm hyperparameters",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "trainingObjective": {
                    "type": "string",
                    "description": "Training objective for this model. Indicates whether this model is for training intents (GOAL) or entities (SLOTS)",
                    "enum": [
                        "GOAL",
                        "SLOTS"
                    ]
                }
            }
        },
        "TrainingValidationResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrainValidationResult",
                        "originalRef": "TrainValidationResult"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "TransactionHistory": {
            "type": "object",
            "properties": {
                "headers": {
                    "type": "array",
                    "description": "Headers of the record",
                    "items": {
                        "type": "string"
                    }
                },
                "rows": {
                    "type": "array",
                    "description": "The transaction details",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "TransferToAmeliaMessageToAmelia": {
            "type": "object",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "Not used directly, parent indicating any of the specific messageTypes"
        },
        "TransitionSummary": {
            "type": "object",
            "required": [
                "edgeDefinitionId",
                "edgeId",
                "edgeName",
                "frequency",
                "sourceDefinitionId",
                "sourceFrequency",
                "sourceId",
                "targetDefinitionId",
                "targetFrequency",
                "targetId"
            ],
            "properties": {
                "edgeDefinitionId": {
                    "type": "string",
                    "description": "Edge definition identifier"
                },
                "edgeId": {
                    "type": "string",
                    "description": "Edge identifier (used in BPN model graph)"
                },
                "edgeName": {
                    "type": "string",
                    "description": "Edge name (for debugging purposes only)"
                },
                "frequency": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Frequency of this transition"
                },
                "sourceDefinitionId": {
                    "type": "string",
                    "description": "Source vertex definition identifier"
                },
                "sourceFrequency": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Frequency of the source vertex"
                },
                "sourceId": {
                    "type": "string",
                    "description": "Source vertex identifier"
                },
                "targetDefinitionId": {
                    "type": "string",
                    "description": "Target vertex definition identifier"
                },
                "targetFrequency": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Frequency of the target vertex"
                },
                "targetId": {
                    "type": "string",
                    "description": "Target vertex identifier"
                }
            },
            "description": "Information about a transition (edge) during the execution of a BPN."
        },
        "TranslationSettingModel": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the custom setting"
                },
                "value": {
                    "type": "string",
                    "description": "The string value of the custom setting"
                }
            }
        },
        "URI": {
            "type": "object",
            "properties": {
                "absolute": {
                    "type": "boolean"
                },
                "authority": {
                    "type": "string"
                },
                "fragment": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "opaque": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "format": "int32"
                },
                "query": {
                    "type": "string"
                },
                "rawAuthority": {
                    "type": "string"
                },
                "rawFragment": {
                    "type": "string"
                },
                "rawPath": {
                    "type": "string"
                },
                "rawQuery": {
                    "type": "string"
                },
                "rawSchemeSpecificPart": {
                    "type": "string"
                },
                "rawUserInfo": {
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "schemeSpecificPart": {
                    "type": "string"
                },
                "userInfo": {
                    "type": "string"
                }
            }
        },
        "URL": {
            "type": "object",
            "properties": {
                "authority": {
                    "type": "string"
                },
                "content": {
                    "type": "object"
                },
                "defaultPort": {
                    "type": "integer",
                    "format": "int32"
                },
                "file": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "format": "int32"
                },
                "protocol": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "ref": {
                    "type": "string"
                },
                "userInfo": {
                    "type": "string"
                }
            }
        },
        "UnauthorizedResponse": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Unauthorized",
                    "description": "An optional message providing more information about the response"
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "example": 401
                }
            }
        },
        "UndeployIntegrationFlowCommand": {
            "type": "object",
            "properties": {
                "clusterIds": {
                    "type": "array",
                    "description": "A list of primary keys of clusters which should receive this command, mo longer used",
                    "items": {
                        "type": "string"
                    }
                },
                "confirm": {
                    "type": "boolean",
                    "description": "include confirm true to issue the deployment command and override warnings"
                },
                "hostIds": {
                    "type": "array",
                    "description": "A list of primary keys of hosts which should receive this command, no longer used",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The primary key of the integration flow to undeploy"
                }
            },
            "description": "To undeploy a given integration flow"
        },
        "UndeployResponse": {
            "type": "object",
            "required": [
                "deployed",
                "processId",
                "status",
                "token"
            ],
            "properties": {
                "deployed": {
                    "type": "boolean",
                    "example": true,
                    "description": "whether or not the BPN is deployed"
                },
                "processId": {
                    "type": "string",
                    "description": "The UUID of the deployed process"
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "example": 204
                },
                "token": {
                    "type": "string",
                    "example": "d1b440f8-b039-4283-8558-6c5a814acab8",
                    "description": "A temporary token that must be used in the header of all requests while this session lasts"
                }
            }
        },
        "UnsolicitedUploadMessageToAmelia": {
            "type": "object",
            "properties": {
                "cmObjectMetadataId": {
                    "type": "string",
                    "description": "the primary key in the medata of the uploaded object"
                },
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "A message indicating an upload was solicited"
        },
        "UpdateAdminDomainModel": {
            "type": "object",
            "required": [
                "code",
                "enabled",
                "id",
                "name",
                "parentCode"
            ],
            "properties": {
                "addDefaultVirtualHost": {
                    "type": "boolean",
                    "description": "if true, the default virtual host will be added to the virtualHostIds list,, regardless of what is submitted.  Defaults to true"
                },
                "agentTranslationEnabled": {
                    "type": "boolean",
                    "description": "Whether or not this conversations will attempt to auto-translate agent messages not in the domain's native language"
                },
                "aiOpsClientCode": {
                    "type": "string",
                    "description": "AI Ops client code associated with this domain"
                },
                "allowAnonymousUsers": {
                    "type": "boolean",
                    "description": "Whether or not this domain allows anonymous users to participate in conversations"
                },
                "allowAnonymousView": {
                    "type": "boolean",
                    "description": "Whether this domain is visible to anonymous users.  May still require them to be authenticatedto have an actual conversation"
                },
                "allowConversations": {
                    "type": "boolean",
                    "description": "Whether or not this domain supports conversations"
                },
                "allowNpsCollection": {
                    "type": "boolean",
                    "description": "Allow Amelia to take feedback from user when a bpn context ends, defaults to true"
                },
                "allowSwitchIn": {
                    "type": "boolean",
                    "description": "If true, this domain will allow user to switch to domain during conversation context switching"
                },
                "allowSwitchOut": {
                    "type": "boolean",
                    "description": "If true, this domain will allow user to switch out of domain during conversation context switching"
                },
                "ameliaUserId": {
                    "type": "string",
                    "description": "The unique identifier of the user of this domain, if any"
                },
                "anonymizeTranscriptUser": {
                    "type": "boolean",
                    "description": "Whether to anonymize transcripts"
                },
                "anonymousFirstNameOverride": {
                    "type": "string"
                },
                "anonymousLastNameOverride": {
                    "type": "string"
                },
                "anonymousUserCreationDomain": {
                    "type": "boolean"
                },
                "anonymousUserGroupId": {
                    "type": "string",
                    "description": "Anonymous users will receive the authorities on this domain from this group if specified"
                },
                "authenticationPolicyId": {
                    "type": "string",
                    "description": "The UUID of the authenticationPolicy that governs this domain"
                },
                "autoCreateUserGroupId": {
                    "type": "string"
                },
                "avatarId": {
                    "type": "string",
                    "description": "The primary key of an avatar of the same type as specified in avatarType"
                },
                "avatarType": {
                    "type": "string",
                    "description": "A valid avatar setting for this domain.",
                    "enum": [
                        "None",
                        "Uneeq",
                        "Quantum"
                    ]
                },
                "avatarVoice": {
                    "type": "string",
                    "description": "The default voice used when the avatar speaks in this domain"
                },
                "conversationSummaryCleanupDaysRetained": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of days of data to retain in the database after the cleanup summary job completes"
                },
                "customTranslationSettings": {
                    "type": "array",
                    "description": "Optional custom translation settings for this domain",
                    "items": {
                        "$ref": "#/definitions/TranslationSettingModel",
                        "originalRef": "TranslationSettingModel"
                    }
                },
                "defaultEscalationQueueId": {
                    "type": "string",
                    "description": "The UUID of an escalation queue to handle conversation escalations in this domain"
                },
                "domainBeanMappings": {
                    "type": "array",
                    "description": "A list of mappings, from one bean to another.  Each key needs to be unique",
                    "items": {
                        "$ref": "#/definitions/DomainBeanMappingModel",
                        "originalRef": "DomainBeanMappingModel"
                    }
                },
                "domainTemplateCode": {
                    "type": "string",
                    "description": "Template assigned while creating a Domain"
                },
                "ftHeaderImageId": {
                    "type": "string",
                    "description": "Face time header id"
                },
                "greetingBpnId": {
                    "type": "string",
                    "description": "If configured, the BPN to automatically run at the start of a conversation in this domain"
                },
                "greetingGoalId": {
                    "type": "string",
                    "description": "If configured, the intent to automatically run at the start of a conversation in this domain"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the domain"
                },
                "imageEnabled": {
                    "type": "boolean"
                },
                "inboundContentMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContentMaskModel",
                        "originalRef": "ContentMaskModel"
                    }
                },
                "integrationApiKey": {
                    "type": "string",
                    "description": "An api key any integration host must possess to run integrations for this domain.  If empty, domain will inherit from its parent"
                },
                "languageDetectionFilters": {
                    "type": "array",
                    "description": "The set of languageDetection filters for this domain",
                    "items": {
                        "$ref": "#/definitions/DomainLanguageDetectionModel",
                        "originalRef": "DomainLanguageDetectionModel"
                    }
                },
                "localeTag": {
                    "type": "string",
                    "description": "The language and locale of the domain"
                },
                "maintainDetectedLanguage": {
                    "type": "boolean",
                    "description": "Whether when translation is detected if the detected language should persist for future messages in the conversation"
                },
                "oneRpaInstanceId": {
                    "type": "string",
                    "description": "UUID of the OneRpa Instance connected to this domain"
                },
                "oneStoreInstanceId": {
                    "type": "string",
                    "description": "UUID of the 1Store instance connected to this domain"
                },
                "orchestratorConfigId": {
                    "type": "string",
                    "description": "Orchestrator configuration Id associated to Domain"
                },
                "orchestratorUserId": {
                    "type": "string",
                    "description": "User Id used for all operation in Amelia Orchestrator"
                },
                "parentCode": {
                    "type": "string",
                    "description": "The code if this domain's parent, if any",
                    "readOnly": true
                },
                "parentId": {
                    "type": "string",
                    "description": "The unique identifier of the parent domain, if any"
                },
                "preCloseBpnId": {
                    "type": "string",
                    "description": "If configured, the BPN to run right before a conversation is closed"
                },
                "preCloseSurveyBpnId": {
                    "type": "string",
                    "description": "If configured, a survey BPN to run right before a conversation is closed, before pre-close BPN"
                },
                "preEscalationBpnId": {
                    "type": "string",
                    "description": "If configured, the BPN to run when a conversation is escalated.  Can be used to gather other information from the user or even prevent escalation"
                },
                "runPreEscalationBpnOnTransfer": {
                    "type": "boolean"
                },
                "runTheWorkflowEnabled": {
                    "type": "boolean",
                    "description": "Whether to allow 'run the workflow' to kickoff BPNs"
                },
                "settings": {
                    "type": "array",
                    "description": "Advanced domain settings",
                    "items": {
                        "$ref": "#/definitions/DomainSettingModel",
                        "originalRef": "DomainSettingModel"
                    }
                },
                "stickyTranslationEnabled": {
                    "type": "boolean",
                    "description": "Whether or not this conversations translation is set to sticky translation. When this is set to true, translation will use the sticky language for translation rather than auto-detection."
                },
                "stickyTranslationLanguage": {
                    "type": "string",
                    "description": "When stick translation is enabled, this is the language the conversation will be translated to and from."
                },
                "subsystemResponderIds": {
                    "type": "array",
                    "description": "The UUID of subsystemResponders set to run on this domain",
                    "items": {
                        "type": "string"
                    }
                },
                "timeZoneId": {
                    "type": "string",
                    "description": "The id of the default time zone of this domain"
                },
                "tings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DomainSettingModel",
                        "originalRef": "DomainSettingModel"
                    }
                },
                "transcriptContentMasks": {
                    "type": "array",
                    "description": "The content masks used to mask sensitive information in the conversation transcripts export",
                    "items": {
                        "$ref": "#/definitions/ContentMaskModel",
                        "originalRef": "ContentMaskModel"
                    }
                },
                "uneeqEnabled": {
                    "type": "boolean",
                    "description": "Deprecated.  Kept only for backwards compatibility.  See avatarType and avatarId"
                },
                "uneeqLanguageSource": {
                    "type": "string",
                    "description": "The name of a configured uneeq language source for a domain. If null or empty, will use the default uneeq language source for this instance."
                },
                "userTranslationEnabled": {
                    "type": "boolean",
                    "description": "Whether or not this conversations will attempt to auto-translate user messages not in the domain's native language"
                },
                "version": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                },
                "virtualHostIds": {
                    "type": "array",
                    "description": "a set of primary keys of virtualHosts in which this domain will participate",
                    "items": {
                        "type": "string"
                    }
                },
                "webGlEnabled": {
                    "type": "boolean",
                    "description": "Deprecated.  Kept only for backwards compatibility.  See avatarType and avatarId"
                },
                "webPlayerEnabled": {
                    "type": "boolean"
                },
                "code": {
                    "type": "string",
                    "description": "The unique code of the domain"
                },
                "name": {
                    "type": "string",
                    "description": "The human readable name of the domain"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the domain is currently active for use"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "A flag suggesting it not display in UI widgets"
                }
            },
            "description": "A convenience version of AdminDomainModel for use in updating, to include the optional addDefaultVirtualHost property"
        },
        "UpdateBpnModelCommand": {
            "type": "object",
            "required": [
                "id",
                "revisionXml",
                "type"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the given bpn model process"
                },
                "revisionXml": {
                    "type": "string",
                    "description": "The type of bpn xml for the next revision of this process"
                },
                "type": {
                    "type": "string",
                    "description": "The type of bpn model process",
                    "enum": [
                        "DETERMINISTIC",
                        "STOCHASTIC",
                        "HEADLESS"
                    ]
                }
            },
            "description": "To update the type and xml of a given bpn process"
        },
        "UploadCompletionMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                },
                "uploadCompletionStatus": {
                    "type": "string",
                    "description": "Uploader role (end user or human agent)."
                },
                "uploadedObjectMetadata": {
                    "type": "array",
                    "description": "Metadata associated with the uploaded resource(s), empty list if none.",
                    "items": {
                        "$ref": "#/definitions/CmObjectMetadataDto",
                        "originalRef": "CmObjectMetadataDto"
                    }
                },
                "uploaderRole": {
                    "type": "string",
                    "description": "Uploader role (end user or human agent)."
                }
            },
            "description": "A message sent by Amelia to provide closure to a file upload whether it was requested or not."
        },
        "UserActivityMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "mode": {
                    "type": "string",
                    "description": "Session mode"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                },
                "typing": {
                    "type": "boolean",
                    "description": "Whether the user/agent is typing"
                }
            },
            "description": "A message sent when a user or agent is typing/stops typing."
        },
        "UserActivityMessageToAmelia": {
            "type": "object",
            "required": [
                "typing"
            ],
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                },
                "typing": {
                    "type": "boolean",
                    "description": "User typing indicator"
                }
            },
            "description": "Inbound message informing Amelia that the user is performing an activity."
        },
        "UserAttributeModel": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The attribute name"
                },
                "value": {
                    "type": "string",
                    "description": "The attribute value"
                }
            }
        },
        "UserGroupListModel": {
            "type": "object",
            "properties": {
                "domainId": {
                    "type": "string",
                    "description": "The domain id of the group if not global"
                },
                "domainName": {
                    "type": "string",
                    "description": "The domain name of the group if not global"
                },
                "global": {
                    "type": "boolean",
                    "description": "Whether the group is global"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the group"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group"
                }
            }
        },
        "UserGroupModel": {
            "type": "object",
            "required": [
                "authorities",
                "global",
                "id",
                "memberGroupIds",
                "name",
                "roleIds"
            ],
            "properties": {
                "addedUsers": {
                    "type": "array",
                    "description": "Users to add to the group when editing",
                    "items": {
                        "type": "string"
                    }
                },
                "authorities": {
                    "type": "array",
                    "description": "Extra authorities associated with the group",
                    "items": {
                        "$ref": "#/definitions/AuthorityModel",
                        "originalRef": "AuthorityModel"
                    }
                },
                "deletedUsers": {
                    "type": "array",
                    "description": "Users to remove from the group when editing",
                    "items": {
                        "type": "string"
                    }
                },
                "domainId": {
                    "type": "string",
                    "description": "The domain ID of the group if not global"
                },
                "global": {
                    "type": "boolean",
                    "description": "Whether the group is global"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the group"
                },
                "memberGroupIds": {
                    "type": "array",
                    "description": "Groups included in this group",
                    "items": {
                        "type": "string"
                    }
                },
                "roleIds": {
                    "type": "array",
                    "description": "The roles of the group",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group"
                }
            }
        },
        "UserGroupSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserGroupListModel",
                        "originalRef": "UserGroupListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "UserInformationMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                },
                "userInformation": {
                    "type": "object",
                    "description": "User information that is requested.",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "description": "Shows information about the conversation user."
        },
        "UserModel": {
            "type": "object",
            "properties": {
                "agent": {
                    "type": "boolean",
                    "description": "true if the user is an agent"
                },
                "anonymous": {
                    "type": "boolean",
                    "description": "true if the user is an agent"
                },
                "availability": {
                    "type": "string",
                    "description": "the code of the user's availability, e.g. READY"
                },
                "defaultConversationDomainId": {
                    "type": "string",
                    "description": "The unique primary key of a domain in which the user's conversations will begin by default"
                },
                "email": {
                    "type": "string",
                    "description": "the user's email"
                },
                "name": {
                    "type": "string",
                    "description": "the user's name"
                },
                "primaryDomainId": {
                    "type": "string",
                    "description": "The unique primary key of the user's primary domain"
                },
                "userId": {
                    "type": "string",
                    "description": "The unique primary key of this user"
                }
            }
        },
        "UserSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AdminUserListModel",
                        "originalRef": "AdminUserListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "UserTaskHistoryMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "taskDetails": {
                    "type": "array",
                    "description": "Task history of the user",
                    "items": {
                        "$ref": "#/definitions/ConversationTaskDetails",
                        "originalRef": "ConversationTaskDetails"
                    }
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                }
            },
            "description": "A message sent to show conversation user's previous tasks."
        },
        "UserTransactionHistoryMessageFromAmelia": {
            "type": "object",
            "required": [
                "contextId",
                "conversationId",
                "id",
                "messageType"
            ],
            "properties": {
                "ameliaMessageType": {
                    "type": "string",
                    "description": "The internal type of this message sent from Amelia"
                },
                "clockSkew": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The clock skew of this message"
                },
                "contextId": {
                    "type": "string",
                    "description": "Context id for the message"
                },
                "conversationId": {
                    "type": "string",
                    "description": "The id of the conversation"
                },
                "fromUserDisplayName": {
                    "type": "string",
                    "description": "The display name of the user or agent that provided this message"
                },
                "headers": {
                    "type": "object",
                    "description": "the map of message headers",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the message"
                },
                "inResponseToMessageId": {
                    "type": "string",
                    "description": "The unique id of the message to which this is a response, if any"
                },
                "inputEnabled": {
                    "type": "boolean",
                    "description": "True if standard user input should be enabled upon receipt of this message, false if it should be disabled"
                },
                "locale": {
                    "type": "string",
                    "description": "the language of the message"
                },
                "messageText": {
                    "type": "string",
                    "description": "The text of the message, if any"
                },
                "messageType": {
                    "type": "string",
                    "description": "The message type of the message sent from Amelia"
                },
                "replaying": {
                    "type": "boolean",
                    "description": "True if this message is a part of a conversation replay"
                },
                "secureResponse": {
                    "type": "boolean",
                    "description": "Whether the response to this message should be treated as secure by the UI."
                },
                "selfEcho": {
                    "type": "boolean",
                    "description": "True if this message is a self echo"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The unique conversation sessionId to which this message belongs"
                },
                "sessionSequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The sessionSequence of this message in the conversation"
                },
                "sourceUserType": {
                    "type": "string",
                    "description": "The source user type of this message, e.g. Amelia"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of this message"
                },
                "transactionHistory": {
                    "description": "Transaction history of the user.",
                    "$ref": "#/definitions/TransactionHistory",
                    "originalRef": "TransactionHistory"
                }
            },
            "description": "A message sent to show user transactions. This is set by a BPN"
        },
        "UserUtteranceMessageToAmelia": {
            "type": "object",
            "properties": {
                "allowIntentDetectionInFormInput": {
                    "type": "boolean",
                    "description": "Attribute to allow/disallow intent detection on form input."
                },
                "customAttributes": {
                    "type": "object",
                    "description": "Custom conversation attributes to set",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "formInputAttributes": {
                    "type": "object",
                    "description": "Attributes to submit when submitting structured form data"
                },
                "messageText": {
                    "type": "string",
                    "description": "The message to say to Amelia"
                },
                "offTheRecord": {
                    "type": "boolean",
                    "description": "Whether the message text should be hidden from transcripts"
                },
                "requestReply": {
                    "type": "boolean",
                    "description": "true"
                },
                "responsePoolProfile": {
                    "description": "Attribute passed to create or update the response pool profile associated with the conversation.",
                    "$ref": "#/definitions/ResponsePoolProfile",
                    "originalRef": "ResponsePoolProfile"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Whether the message text in this message should be hidden"
                }
            },
            "description": "Not used directly, parent indicating any of the specific messageTypes"
        },
        "UtteranceAnnotation": {
            "type": "object",
            "properties": {
                "datasetLabels": {
                    "type": "array",
                    "description": "Dataset labels for this utterance",
                    "items": {
                        "type": "string"
                    }
                },
                "intents": {
                    "type": "array",
                    "description": "Set of intents associated with this annotation",
                    "items": {
                        "type": "string"
                    }
                },
                "slots": {
                    "type": "array",
                    "description": "List of entity annotations for this utterance",
                    "items": {
                        "$ref": "#/definitions/SlotProperties",
                        "originalRef": "SlotProperties"
                    }
                },
                "spanlessEntities": {
                    "type": "array",
                    "description": "Spanless entities associated with this annotation",
                    "items": {
                        "type": "string"
                    }
                },
                "speaker": {
                    "type": "string",
                    "description": "Speaker identifier for this utterance"
                },
                "text": {
                    "type": "string",
                    "description": "Raw text for this utterance annotation"
                }
            }
        },
        "UtteranceAnnotationAttributeModel": {
            "type": "object",
            "properties": {
                "attributeName": {
                    "type": "string"
                },
                "attributeValue": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "UtteranceAnnotationModel": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "description": "Attributes for this annotation.",
                    "items": {
                        "$ref": "#/definitions/UtteranceAnnotationAttributeModel",
                        "originalRef": "UtteranceAnnotationAttributeModel"
                    }
                },
                "bpnRevisionTaskModel": {
                    "description": "Populated if the utterance annotation applies to a BPN Revision Task.",
                    "$ref": "#/definitions/BpnRevisionTaskAnnotationModel",
                    "originalRef": "BpnRevisionTaskAnnotationModel"
                },
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "description": "End index of the annotated span."
                },
                "insertSequence": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Sequence number when this annotation was added."
                },
                "intentUtteranceModel": {
                    "description": "Populated if the utterance annotation applies to a Intent Answer FAQ.",
                    "$ref": "#/definitions/IntentUtteranceModel",
                    "originalRef": "IntentUtteranceModel"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the annotation."
                },
                "responsePoolEntryModel": {
                    "description": "Populated if the utterance annotation applies to a Response Pool Entry.",
                    "$ref": "#/definitions/ResponsePoolEntryModel",
                    "originalRef": "ResponsePoolEntryModel"
                },
                "sequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Index of this annotation."
                },
                "slotQuestionModel": {
                    "description": "Populated if the utterance annotation applies to a Slot Question.",
                    "$ref": "#/definitions/SlotQuestionModel",
                    "originalRef": "SlotQuestionModel"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Start index of the annotated span."
                },
                "utteranceAnnotationId": {
                    "type": "string",
                    "description": "The unique identifier of utterance annotation."
                }
            }
        },
        "UtterancePrediction": {
            "type": "object",
            "properties": {
                "domainId": {
                    "type": "string",
                    "description": "The primary key of the domain associated with this prediction"
                },
                "expected": {
                    "description": "The expected candidate of this prediction",
                    "$ref": "#/definitions/PredictionCandidate",
                    "originalRef": "PredictionCandidate"
                },
                "messageId": {
                    "type": "string",
                    "description": "The primary key of the message associated with this prediction"
                },
                "status": {
                    "type": "string",
                    "description": "The status of this prediction",
                    "enum": [
                        "POSITIVE",
                        "NEGATIVE",
                        "NONE"
                    ]
                },
                "winner": {
                    "description": "The winning candidate of this prediction as decided by classifier",
                    "$ref": "#/definitions/PredictionCandidate",
                    "originalRef": "PredictionCandidate"
                }
            },
            "description": "The summary of a prediction"
        },
        "VariableSummary": {
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Identifying variable name"
                },
                "type": {
                    "type": "string",
                    "description": "Variable data type"
                },
                "value": {
                    "type": "string",
                    "description": "Textual representation of the variable value, if possible"
                }
            },
            "description": "Information about a variable managed by BPN."
        },
        "VirtualHostListModel": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "a description of this virtual host",
                    "readOnly": true
                },
                "hostNames": {
                    "type": "array",
                    "description": "the host names represented by this virtual host",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "the primary key of the virtual host",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "the unique name of the virtual host"
                }
            }
        },
        "VirtualHostModel": {
            "type": "object",
            "properties": {
                "allowChatOverlay": {
                    "type": "string",
                    "description": "ALLOW if this virtual host should allow chat overlays, DENY if it should prohibit them,and DEFAULT to defer to the global configured parameters",
                    "enum": [
                        "ALLOW",
                        "DENY",
                        "DEFAULT"
                    ]
                },
                "default": {
                    "type": "boolean"
                },
                "defaultLocale": {
                    "type": "string",
                    "description": "the default locale for this Virtual Host"
                },
                "defaultTheme": {
                    "type": "string",
                    "description": "the primary key of default theme"
                },
                "description": {
                    "type": "string",
                    "description": "a description of this virtual host",
                    "readOnly": true
                },
                "hostNames": {
                    "type": "array",
                    "description": "the host names represented by this virtual host",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "the primary key of the virtual host",
                    "readOnly": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "true if the default virtual host for this Amelia",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "the unique name of the virtual host"
                },
                "settings": {
                    "type": "array",
                    "description": "Advanced virtual host settings",
                    "items": {
                        "$ref": "#/definitions/VirtualHostSettingModel",
                        "originalRef": "VirtualHostSettingModel"
                    }
                },
                "themes": {
                    "type": "array",
                    "description": "primary keys of available themes",
                    "items": {
                        "type": "string"
                    }
                },
                "tings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualHostSettingModel",
                        "originalRef": "VirtualHostSettingModel"
                    }
                },
                "uiBundle": {
                    "type": "string",
                    "description": "the primary key of an associated UIBundle"
                }
            }
        },
        "VirtualHostSearchResults": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualHostListModel",
                        "originalRef": "VirtualHostListModel"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "VirtualHostSettingModel": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The setting name"
                },
                "value": {
                    "type": "string",
                    "description": "The setting value"
                }
            }
        }
    }
}